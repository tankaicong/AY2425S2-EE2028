
Assignment2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000103a4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000029f8  08010538  08010538  00011538  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012f30  08012f30  00014338  2**0
                  CONTENTS
  4 .ARM          00000008  08012f30  08012f30  00013f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012f38  08012f38  00014338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012f38  08012f38  00013f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012f3c  08012f3c  00013f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000338  20000000  08012f40  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000110c  20000338  08013278  00014338  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001444  08013278  00014444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014338  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d808  00000000  00000000  00014368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b25  00000000  00000000  00031b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cb0  00000000  00000000  00036698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015dc  00000000  00000000  00038348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030f23  00000000  00000000  00039924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022e30  00000000  00000000  0006a847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a85d  00000000  00000000  0008d677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00197ed4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009138  00000000  00000000  00197f18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a3  00000000  00000000  001a1050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000338 	.word	0x20000338
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801051c 	.word	0x0801051c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000033c 	.word	0x2000033c
 80001cc:	0801051c 	.word	0x0801051c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	73fb      	strb	r3, [r7, #15]
 8000f46:	2300      	movs	r3, #0
 8000f48:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b2d      	cmp	r3, #45	@ 0x2d
 8000f54:	d119      	bne.n	8000f8a <ParseNumber+0x52>
        minus = 1;
 8000f56:	2301      	movs	r3, #1
 8000f58:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	607b      	str	r3, [r7, #4]
        i++;
 8000f60:	7bbb      	ldrb	r3, [r7, #14]
 8000f62:	3301      	adds	r3, #1
 8000f64:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000f66:	e010      	b.n	8000f8a <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8000f68:	68ba      	ldr	r2, [r7, #8]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	461a      	mov	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	3b30      	subs	r3, #48	@ 0x30
 8000f7a:	4413      	add	r3, r2
 8000f7c:	60bb      	str	r3, [r7, #8]
        ptr++;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3301      	adds	r3, #1
 8000f82:	607b      	str	r3, [r7, #4]
        i++;
 8000f84:	7bbb      	ldrb	r3, [r7, #14]
 8000f86:	3301      	adds	r3, #1
 8000f88:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b2f      	cmp	r3, #47	@ 0x2f
 8000f90:	d903      	bls.n	8000f9a <ParseNumber+0x62>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b39      	cmp	r3, #57	@ 0x39
 8000f98:	d9e6      	bls.n	8000f68 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d002      	beq.n	8000fa6 <ParseNumber+0x6e>
        *cnt = i;
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	7bba      	ldrb	r2, [r7, #14]
 8000fa4:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d002      	beq.n	8000fb2 <ParseNumber+0x7a>
        return 0 - sum;
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	425b      	negs	r3, r3
 8000fb0:	e000      	b.n	8000fb4 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8000fb2:	68bb      	ldr	r3, [r7, #8]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8000fce:	e019      	b.n	8001004 <ParseIP+0x44>
    hexcnt = 1;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b2e      	cmp	r3, #46	@ 0x2e
 8000fda:	d00e      	beq.n	8000ffa <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8000fdc:	f107 030e 	add.w	r3, r7, #14
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff ffa8 	bl	8000f38 <ParseNumber>
 8000fe8:	4601      	mov	r1, r0
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	1c5a      	adds	r2, r3, #1
 8000fee:	73fa      	strb	r2, [r7, #15]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	b2ca      	uxtb	r2, r1
 8000ff8:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8000ffa:	7bbb      	ldrb	r3, [r7, #14]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1e1      	bne.n	8000fd0 <ParseIP+0x10>
  }
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	3302      	adds	r3, #2
 800102a:	4934      	ldr	r1, [pc, #208]	@ (80010fc <AT_ParseInfo+0xe4>)
 800102c:	4618      	mov	r0, r3
 800102e:	f00b fc63 	bl	800c8f8 <strtok>
 8001032:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8001034:	e05a      	b.n	80010ec <AT_ParseInfo+0xd4>
    switch (num++) {
 8001036:	7afb      	ldrb	r3, [r7, #11]
 8001038:	1c5a      	adds	r2, r3, #1
 800103a:	72fa      	strb	r2, [r7, #11]
 800103c:	2b06      	cmp	r3, #6
 800103e:	d84f      	bhi.n	80010e0 <AT_ParseInfo+0xc8>
 8001040:	a201      	add	r2, pc, #4	@ (adr r2, 8001048 <AT_ParseInfo+0x30>)
 8001042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001046:	bf00      	nop
 8001048:	08001065 	.word	0x08001065
 800104c:	08001073 	.word	0x08001073
 8001050:	08001083 	.word	0x08001083
 8001054:	08001093 	.word	0x08001093
 8001058:	080010a3 	.word	0x080010a3
 800105c:	080010b3 	.word	0x080010b3
 8001060:	080010c7 	.word	0x080010c7
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2220      	movs	r2, #32
 8001068:	68f9      	ldr	r1, [r7, #12]
 800106a:	4618      	mov	r0, r3
 800106c:	f00b fc30 	bl	800c8d0 <strncpy>
      break;
 8001070:	e037      	b.n	80010e2 <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3320      	adds	r3, #32
 8001076:	2218      	movs	r2, #24
 8001078:	68f9      	ldr	r1, [r7, #12]
 800107a:	4618      	mov	r0, r3
 800107c:	f00b fc28 	bl	800c8d0 <strncpy>
      break;
 8001080:	e02f      	b.n	80010e2 <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3338      	adds	r3, #56	@ 0x38
 8001086:	2210      	movs	r2, #16
 8001088:	68f9      	ldr	r1, [r7, #12]
 800108a:	4618      	mov	r0, r3
 800108c:	f00b fc20 	bl	800c8d0 <strncpy>
      break;
 8001090:	e027      	b.n	80010e2 <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3348      	adds	r3, #72	@ 0x48
 8001096:	2210      	movs	r2, #16
 8001098:	68f9      	ldr	r1, [r7, #12]
 800109a:	4618      	mov	r0, r3
 800109c:	f00b fc18 	bl	800c8d0 <strncpy>
      break;
 80010a0:	e01f      	b.n	80010e2 <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3358      	adds	r3, #88	@ 0x58
 80010a6:	2210      	movs	r2, #16
 80010a8:	68f9      	ldr	r1, [r7, #12]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f00b fc10 	bl	800c8d0 <strncpy>
      break;
 80010b0:	e017      	b.n	80010e2 <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 80010b2:	2100      	movs	r1, #0
 80010b4:	68f8      	ldr	r0, [r7, #12]
 80010b6:	f7ff ff3f 	bl	8000f38 <ParseNumber>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      break;
 80010c4:	e00d      	b.n	80010e2 <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 80010c6:	490e      	ldr	r1, [pc, #56]	@ (8001100 <AT_ParseInfo+0xe8>)
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f00b fc15 	bl	800c8f8 <strtok>
 80010ce:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3368      	adds	r3, #104	@ 0x68
 80010d4:	2220      	movs	r2, #32
 80010d6:	68f9      	ldr	r1, [r7, #12]
 80010d8:	4618      	mov	r0, r3
 80010da:	f00b fbf9 	bl	800c8d0 <strncpy>
      break;
 80010de:	e000      	b.n	80010e2 <AT_ParseInfo+0xca>

    default: break;
 80010e0:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 80010e2:	4906      	ldr	r1, [pc, #24]	@ (80010fc <AT_ParseInfo+0xe4>)
 80010e4:	2000      	movs	r0, #0
 80010e6:	f00b fc07 	bl	800c8f8 <strtok>
 80010ea:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1a1      	bne.n	8001036 <AT_ParseInfo+0x1e>
  }
}
 80010f2:	bf00      	nop
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	08010568 	.word	0x08010568
 8001100:	0801056c 	.word	0x0801056c

08001104 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3302      	adds	r3, #2
 8001116:	4952      	ldr	r1, [pc, #328]	@ (8001260 <AT_ParseConnSettings+0x15c>)
 8001118:	4618      	mov	r0, r3
 800111a:	f00b fbed 	bl	800c8f8 <strtok>
 800111e:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8001120:	e095      	b.n	800124e <AT_ParseConnSettings+0x14a>
    switch (num++) {
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	1c5a      	adds	r2, r3, #1
 8001126:	73fa      	strb	r2, [r7, #15]
 8001128:	2b0b      	cmp	r3, #11
 800112a:	d87f      	bhi.n	800122c <AT_ParseConnSettings+0x128>
 800112c:	a201      	add	r2, pc, #4	@ (adr r2, 8001134 <AT_ParseConnSettings+0x30>)
 800112e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001132:	bf00      	nop
 8001134:	08001165 	.word	0x08001165
 8001138:	08001173 	.word	0x08001173
 800113c:	08001183 	.word	0x08001183
 8001140:	08001197 	.word	0x08001197
 8001144:	080011ab 	.word	0x080011ab
 8001148:	080011bf 	.word	0x080011bf
 800114c:	080011cd 	.word	0x080011cd
 8001150:	080011db 	.word	0x080011db
 8001154:	080011e9 	.word	0x080011e9
 8001158:	080011f7 	.word	0x080011f7
 800115c:	08001205 	.word	0x08001205
 8001160:	08001219 	.word	0x08001219
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	2221      	movs	r2, #33	@ 0x21
 8001168:	68b9      	ldr	r1, [r7, #8]
 800116a:	4618      	mov	r0, r3
 800116c:	f00b fbb0 	bl	800c8d0 <strncpy>
      break;
 8001170:	e05d      	b.n	800122e <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	3321      	adds	r3, #33	@ 0x21
 8001176:	2221      	movs	r2, #33	@ 0x21
 8001178:	68b9      	ldr	r1, [r7, #8]
 800117a:	4618      	mov	r0, r3
 800117c:	f00b fba8 	bl	800c8d0 <strncpy>
      break;
 8001180:	e055      	b.n	800122e <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8001182:	2100      	movs	r1, #0
 8001184:	68b8      	ldr	r0, [r7, #8]
 8001186:	f7ff fed7 	bl	8000f38 <ParseNumber>
 800118a:	4603      	mov	r3, r0
 800118c:	b2da      	uxtb	r2, r3
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        break;
 8001194:	e04b      	b.n	800122e <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8001196:	2100      	movs	r1, #0
 8001198:	68b8      	ldr	r0, [r7, #8]
 800119a:	f7ff fecd 	bl	8000f38 <ParseNumber>
 800119e:	4603      	mov	r3, r0
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      break;
 80011a8:	e041      	b.n	800122e <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 80011aa:	2100      	movs	r1, #0
 80011ac:	68b8      	ldr	r0, [r7, #8]
 80011ae:	f7ff fec3 	bl	8000f38 <ParseNumber>
 80011b2:	4603      	mov	r3, r0
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
      break;
 80011bc:	e037      	b.n	800122e <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	3348      	adds	r3, #72	@ 0x48
 80011c2:	4619      	mov	r1, r3
 80011c4:	68b8      	ldr	r0, [r7, #8]
 80011c6:	f7ff fefb 	bl	8000fc0 <ParseIP>
      break;
 80011ca:	e030      	b.n	800122e <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	334c      	adds	r3, #76	@ 0x4c
 80011d0:	4619      	mov	r1, r3
 80011d2:	68b8      	ldr	r0, [r7, #8]
 80011d4:	f7ff fef4 	bl	8000fc0 <ParseIP>
      break;
 80011d8:	e029      	b.n	800122e <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	3350      	adds	r3, #80	@ 0x50
 80011de:	4619      	mov	r1, r3
 80011e0:	68b8      	ldr	r0, [r7, #8]
 80011e2:	f7ff feed 	bl	8000fc0 <ParseIP>
      break;
 80011e6:	e022      	b.n	800122e <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	3354      	adds	r3, #84	@ 0x54
 80011ec:	4619      	mov	r1, r3
 80011ee:	68b8      	ldr	r0, [r7, #8]
 80011f0:	f7ff fee6 	bl	8000fc0 <ParseIP>
      break;
 80011f4:	e01b      	b.n	800122e <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	3358      	adds	r3, #88	@ 0x58
 80011fa:	4619      	mov	r1, r3
 80011fc:	68b8      	ldr	r0, [r7, #8]
 80011fe:	f7ff fedf 	bl	8000fc0 <ParseIP>
      break;
 8001202:	e014      	b.n	800122e <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8001204:	2100      	movs	r1, #0
 8001206:	68b8      	ldr	r0, [r7, #8]
 8001208:	f7ff fe96 	bl	8000f38 <ParseNumber>
 800120c:	4603      	mov	r3, r0
 800120e:	b2da      	uxtb	r2, r3
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      break;
 8001216:	e00a      	b.n	800122e <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8001218:	2100      	movs	r1, #0
 800121a:	68b8      	ldr	r0, [r7, #8]
 800121c:	f7ff fe8c 	bl	8000f38 <ParseNumber>
 8001220:	4603      	mov	r3, r0
 8001222:	b2da      	uxtb	r2, r3
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
      break;
 800122a:	e000      	b.n	800122e <AT_ParseConnSettings+0x12a>

    default:
      break;
 800122c:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800122e:	490c      	ldr	r1, [pc, #48]	@ (8001260 <AT_ParseConnSettings+0x15c>)
 8001230:	2000      	movs	r0, #0
 8001232:	f00b fb61 	bl	800c8f8 <strtok>
 8001236:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d007      	beq.n	800124e <AT_ParseConnSettings+0x14a>
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	3b01      	subs	r3, #1
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b2c      	cmp	r3, #44	@ 0x2c
 8001246:	d102      	bne.n	800124e <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	3301      	adds	r3, #1
 800124c:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	2b00      	cmp	r3, #0
 8001252:	f47f af66 	bne.w	8001122 <AT_ParseConnSettings+0x1e>
    }
  }
}
 8001256:	bf00      	nop
 8001258:	bf00      	nop
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	08010568 	.word	0x08010568

08001264 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b087      	sub	sp, #28
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
  int16_t recv_len = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	827b      	strh	r3, [r7, #18]
  LOCK_WIFI();  

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f8d3 4120 	ldr.w	r4, [r3, #288]	@ 0x120
 800127e:	68b8      	ldr	r0, [r7, #8]
 8001280:	f7fe fff6 	bl	8000270 <strlen>
 8001284:	4603      	mov	r3, r0
 8001286:	b299      	uxth	r1, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	@ 0x6a0
 800128e:	461a      	mov	r2, r3
 8001290:	68b8      	ldr	r0, [r7, #8]
 8001292:	47a0      	blx	r4
 8001294:	4603      	mov	r3, r0
 8001296:	617b      	str	r3, [r7, #20]

  if( ret > 0)
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	2b00      	cmp	r3, #0
 800129c:	dd33      	ble.n	8001306 <AT_ExecuteCommand+0xa2>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80012a4:	68fa      	ldr	r2, [r7, #12]
 80012a6:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	@ 0x6a0
 80012aa:	f44f 61af 	mov.w	r1, #1400	@ 0x578
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	4798      	blx	r3
 80012b2:	4603      	mov	r3, r0
 80012b4:	827b      	strh	r3, [r7, #18]
    if((recv_len > 0) && (recv_len < ES_WIFI_DATA_SIZE))
 80012b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	dd1c      	ble.n	80012f8 <AT_ExecuteCommand+0x94>
 80012be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012c2:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 80012c6:	da17      	bge.n	80012f8 <AT_ExecuteCommand+0x94>
    {
      *(pdata + recv_len) = 0;
 80012c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	4413      	add	r3, r2
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 80012d4:	490e      	ldr	r1, [pc, #56]	@ (8001310 <AT_ExecuteCommand+0xac>)
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f00b fb6a 	bl	800c9b0 <strstr>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <AT_ExecuteCommand+0x82>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e010      	b.n	8001308 <AT_ExecuteCommand+0xa4>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 80012e6:	490b      	ldr	r1, [pc, #44]	@ (8001314 <AT_ExecuteCommand+0xb0>)
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f00b fb61 	bl	800c9b0 <strstr>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <AT_ExecuteCommand+0x94>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80012f4:	2305      	movs	r3, #5
 80012f6:	e007      	b.n	8001308 <AT_ExecuteCommand+0xa4>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER ) 
 80012f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012fc:	f113 0f04 	cmn.w	r3, #4
 8001300:	d101      	bne.n	8001306 <AT_ExecuteCommand+0xa2>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8001302:	2306      	movs	r3, #6
 8001304:	e000      	b.n	8001308 <AT_ExecuteCommand+0xa4>
    }
  }
  UNLOCK_WIFI();  
  return ES_WIFI_STATUS_IO_ERROR;
 8001306:	2304      	movs	r3, #4
}
 8001308:	4618      	mov	r0, r3
 800130a:	371c      	adds	r7, #28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd90      	pop	{r4, r7, pc}
 8001310:	08010570 	.word	0x08010570
 8001314:	0801057c 	.word	0x0801057c

08001318 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
 8001324:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();  
  cmd_len = strlen((char*)cmd);
 8001332:	68b8      	ldr	r0, [r7, #8]
 8001334:	f7fe ff9c 	bl	8000270 <strlen>
 8001338:	4603      	mov	r3, r0
 800133a:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 800133c:	8a7b      	ldrh	r3, [r7, #18]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <AT_RequestSendData+0x32>
 8001346:	2302      	movs	r3, #2
 8001348:	e053      	b.n	80013f2 <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	@ 0x6a0
 8001356:	8a79      	ldrh	r1, [r7, #18]
 8001358:	68b8      	ldr	r0, [r7, #8]
 800135a:	4798      	blx	r3
 800135c:	4603      	mov	r3, r0
 800135e:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8001360:	8a3a      	ldrh	r2, [r7, #16]
 8001362:	8a7b      	ldrh	r3, [r7, #18]
 8001364:	429a      	cmp	r2, r3
 8001366:	d143      	bne.n	80013f0 <AT_RequestSendData+0xd8>
  {    
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	@ 0x6a0
 8001374:	8879      	ldrh	r1, [r7, #2]
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	4798      	blx	r3
 800137a:	4603      	mov	r3, r0
 800137c:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 800137e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001382:	887b      	ldrh	r3, [r7, #2]
 8001384:	429a      	cmp	r2, r3
 8001386:	d131      	bne.n	80013ec <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	@ 0x6a0
 8001394:	2100      	movs	r1, #0
 8001396:	6a38      	ldr	r0, [r7, #32]
 8001398:	4798      	blx	r3
 800139a:	4603      	mov	r3, r0
 800139c:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 800139e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	dd19      	ble.n	80013da <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 80013a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013aa:	6a3a      	ldr	r2, [r7, #32]
 80013ac:	4413      	add	r3, r2
 80013ae:	2200      	movs	r2, #0
 80013b0:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 80013b2:	4912      	ldr	r1, [pc, #72]	@ (80013fc <AT_RequestSendData+0xe4>)
 80013b4:	6a38      	ldr	r0, [r7, #32]
 80013b6:	f00b fafb 	bl	800c9b0 <strstr>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	e016      	b.n	80013f2 <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 80013c4:	490e      	ldr	r1, [pc, #56]	@ (8001400 <AT_RequestSendData+0xe8>)
 80013c6:	6a38      	ldr	r0, [r7, #32]
 80013c8:	f00b faf2 	bl	800c9b0 <strstr>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80013d2:	2305      	movs	r3, #5
 80013d4:	e00d      	b.n	80013f2 <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 80013d6:	2302      	movs	r3, #2
 80013d8:	e00b      	b.n	80013f2 <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER ) 
 80013da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013de:	f113 0f04 	cmn.w	r3, #4
 80013e2:	d101      	bne.n	80013e8 <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 80013e4:	2306      	movs	r3, #6
 80013e6:	e004      	b.n	80013f2 <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 80013e8:	2302      	movs	r3, #2
 80013ea:	e002      	b.n	80013f2 <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 80013ec:	2302      	movs	r3, #2
 80013ee:	e000      	b.n	80013f2 <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 80013f0:	2304      	movs	r3, #4
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	08010570 	.word	0x08010570
 8001400:	0801057c 	.word	0x0801057c

08001404 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8001404:	b590      	push	{r4, r7, lr}
 8001406:	b087      	sub	sp, #28
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
 8001410:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001418:	613b      	str	r3, [r7, #16]
  
  LOCK_WIFI();  
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f8d3 4120 	ldr.w	r4, [r3, #288]	@ 0x120
 8001420:	68b8      	ldr	r0, [r7, #8]
 8001422:	f7fe ff25 	bl	8000270 <strlen>
 8001426:	4603      	mov	r3, r0
 8001428:	b299      	uxth	r1, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	@ 0x6a0
 8001430:	461a      	mov	r2, r3
 8001432:	68b8      	ldr	r0, [r7, #8]
 8001434:	47a0      	blx	r4
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	dd67      	ble.n	800150c <AT_RequestReceiveData+0x108>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	@ 0x6a0
 8001448:	2100      	movs	r1, #0
 800144a:	6938      	ldr	r0, [r7, #16]
 800144c:	4798      	blx	r3
 800144e:	4603      	mov	r3, r0
 8001450:	617b      	str	r3, [r7, #20]
    if ((p[0]!='\r') || (p[1]!='\n'))
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b0d      	cmp	r3, #13
 8001458:	d104      	bne.n	8001464 <AT_RequestReceiveData+0x60>
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	3301      	adds	r3, #1
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b0a      	cmp	r3, #10
 8001462:	d001      	beq.n	8001468 <AT_RequestReceiveData+0x64>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 8001464:	2304      	movs	r3, #4
 8001466:	e052      	b.n	800150e <AT_RequestReceiveData+0x10a>
    }
    len-=2;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	3b02      	subs	r3, #2
 800146c:	617b      	str	r3, [r7, #20]
    p+=2;
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	3302      	adds	r3, #2
 8001472:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	2b07      	cmp	r3, #7
 8001478:	d942      	bls.n	8001500 <AT_RequestReceiveData+0xfc>
    {
     while(len && (p[len-1]==0x15)) len--;
 800147a:	e002      	b.n	8001482 <AT_RequestReceiveData+0x7e>
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	3b01      	subs	r3, #1
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d006      	beq.n	8001496 <AT_RequestReceiveData+0x92>
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	3b01      	subs	r3, #1
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4413      	add	r3, r2
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b15      	cmp	r3, #21
 8001494:	d0f2      	beq.n	800147c <AT_RequestReceiveData+0x78>
     p[len] = '\0';
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4413      	add	r3, r2
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	3b08      	subs	r3, #8
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4413      	add	r3, r2
 80014a8:	491b      	ldr	r1, [pc, #108]	@ (8001518 <AT_RequestReceiveData+0x114>)
 80014aa:	4618      	mov	r0, r3
 80014ac:	f00b fa80 	bl	800c9b0 <strstr>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d00e      	beq.n	80014d4 <AT_RequestReceiveData+0xd0>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	3b08      	subs	r3, #8
 80014bc:	b29a      	uxth	r2, r3
 80014be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014c0:	801a      	strh	r2, [r3, #0]
       memcpy(pdata, p, *ReadData);
 80014c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	6939      	ldr	r1, [r7, #16]
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f00b fafd 	bl	800caca <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 80014d0:	2300      	movs	r3, #0
 80014d2:	e01c      	b.n	800150e <AT_RequestReceiveData+0x10a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	3b04      	subs	r3, #4
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	4413      	add	r3, r2
 80014dc:	2204      	movs	r2, #4
 80014de:	490f      	ldr	r1, [pc, #60]	@ (800151c <AT_RequestReceiveData+0x118>)
 80014e0:	4618      	mov	r0, r3
 80014e2:	f00b f9dd 	bl	800c8a0 <memcmp>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d104      	bne.n	80014f6 <AT_RequestReceiveData+0xf2>
     {
       *ReadData = 0;
 80014ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ee:	2200      	movs	r2, #0
 80014f0:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80014f2:	2305      	movs	r3, #5
 80014f4:	e00b      	b.n	800150e <AT_RequestReceiveData+0x10a>
     }
     
     UNLOCK_WIFI();
     *ReadData = 0;
 80014f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014f8:	2200      	movs	r2, #0
 80014fa:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80014fc:	2305      	movs	r3, #5
 80014fe:	e006      	b.n	800150e <AT_RequestReceiveData+0x10a>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER ) 
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	f113 0f04 	cmn.w	r3, #4
 8001506:	d101      	bne.n	800150c <AT_RequestReceiveData+0x108>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 8001508:	2306      	movs	r3, #6
 800150a:	e000      	b.n	800150e <AT_RequestReceiveData+0x10a>
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 800150c:	2304      	movs	r3, #4
}
 800150e:	4618      	mov	r0, r3
 8001510:	371c      	adds	r7, #28
 8001512:	46bd      	mov	sp, r7
 8001514:	bd90      	pop	{r4, r7, pc}
 8001516:	bf00      	nop
 8001518:	08010570 	.word	0x08010570
 800151c:	08010584 	.word	0x08010584

08001520 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001528:	2302      	movs	r3, #2
 800152a:	73fb      	strb	r3, [r7, #15]
  aos_mutex_new(&es_wifi_mutex);
#endif

  LOCK_WIFI();  

  Obj->Timeout = ES_WIFI_TIMEOUT;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001532:	f8c3 26a0 	str.w	r2, [r3, #1696]	@ 0x6a0

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800153c:	2000      	movs	r0, #0
 800153e:	4798      	blx	r3
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d113      	bne.n	800156e <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800154c:	461a      	mov	r2, r3
 800154e:	490a      	ldr	r1, [pc, #40]	@ (8001578 <ES_WIFI_Init+0x58>)
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff fe87 	bl	8001264 <AT_ExecuteCommand>
 8001556:	4603      	mov	r3, r0
 8001558:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d106      	bne.n	800156e <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001566:	4619      	mov	r1, r3
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff fd55 	bl	8001018 <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 800156e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	0801058c 	.word	0x0801058c

0800157c <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d00b      	beq.n	80015a8 <ES_WIFI_RegisterBusIO+0x2c>
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d008      	beq.n	80015a8 <ES_WIFI_RegisterBusIO+0x2c>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d005      	beq.n	80015a8 <ES_WIFI_RegisterBusIO+0x2c>
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d002      	beq.n	80015a8 <ES_WIFI_RegisterBusIO+0x2c>
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 80015a8:	2302      	movs	r3, #2
 80015aa:	e014      	b.n	80015d6 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
  Obj->fops.IO_Send = IO_Send;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  Obj->fops.IO_Receive = IO_Receive;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
  Obj->fops.IO_Delay = IO_Delay;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  return ES_WIFI_STATUS_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80015f8:	68ba      	ldr	r2, [r7, #8]
 80015fa:	4932      	ldr	r1, [pc, #200]	@ (80016c4 <ES_WIFI_Connect+0xe0>)
 80015fc:	4618      	mov	r0, r3
 80015fe:	f00b f857 	bl	800c6b0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800160e:	461a      	mov	r2, r3
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f7ff fe27 	bl	8001264 <AT_ExecuteCommand>
 8001616:	4603      	mov	r3, r0
 8001618:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 800161a:	7dfb      	ldrb	r3, [r7, #23]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d14b      	bne.n	80016b8 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	4927      	ldr	r1, [pc, #156]	@ (80016c8 <ES_WIFI_Connect+0xe4>)
 800162a:	4618      	mov	r0, r3
 800162c:	f00b f840 	bl	800c6b0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800163c:	461a      	mov	r2, r3
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f7ff fe10 	bl	8001264 <AT_ExecuteCommand>
 8001644:	4603      	mov	r3, r0
 8001646:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8001648:	7dfb      	ldrb	r3, [r7, #23]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d134      	bne.n	80016b8 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	78fa      	ldrb	r2, [r7, #3]
 8001652:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800165c:	78fa      	ldrb	r2, [r7, #3]
 800165e:	491b      	ldr	r1, [pc, #108]	@ (80016cc <ES_WIFI_Connect+0xe8>)
 8001660:	4618      	mov	r0, r3
 8001662:	f00b f825 	bl	800c6b0 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001672:	461a      	mov	r2, r3
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f7ff fdf5 	bl	8001264 <AT_ExecuteCommand>
 800167a:	4603      	mov	r3, r0
 800167c:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 800167e:	7dfb      	ldrb	r3, [r7, #23]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d119      	bne.n	80016b8 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800168a:	4911      	ldr	r1, [pc, #68]	@ (80016d0 <ES_WIFI_Connect+0xec>)
 800168c:	4618      	mov	r0, r3
 800168e:	f00b f80f 	bl	800c6b0 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800169e:	461a      	mov	r2, r3
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f7ff fddf 	bl	8001264 <AT_ExecuteCommand>
 80016a6:	4603      	mov	r3, r0
 80016a8:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 80016aa:	7dfb      	ldrb	r3, [r7, #23]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d103      	bne.n	80016b8 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 80016b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	08010598 	.word	0x08010598
 80016c8:	080105a0 	.word	0x080105a0
 80016cc:	080105a8 	.word	0x080105a8
 80016d0:	080105b0 	.word	0x080105b0

080016d4 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"C?\r");
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80016e2:	4910      	ldr	r1, [pc, #64]	@ (8001724 <ES_WIFI_GetNetworkSettings+0x50>)
 80016e4:	4618      	mov	r0, r3
 80016e6:	f00a ffe3 	bl	800c6b0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80016f6:	461a      	mov	r2, r3
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff fdb3 	bl	8001264 <AT_ExecuteCommand>
 80016fe:	4603      	mov	r3, r0
 8001700:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d108      	bne.n	800171a <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f503 7294 	add.w	r2, r3, #296	@ 0x128
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	338d      	adds	r3, #141	@ 0x8d
 8001712:	4619      	mov	r1, r3
 8001714:	4610      	mov	r0, r2
 8001716:	f7ff fcf5 	bl	8001104 <AT_ParseConnSettings>
  }
  
  UNLOCK_WIFI();
  return ret;
 800171a:	7bfb      	ldrb	r3, [r7, #15]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	080105bc 	.word	0x080105bc

08001728 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b087      	sub	sp, #28
 800172c:	af02      	add	r7, sp, #8
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	73fb      	strb	r3, [r7, #15]
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	785b      	ldrb	r3, [r3, #1]
 8001740:	461a      	mov	r2, r3
 8001742:	4951      	ldr	r1, [pc, #324]	@ (8001888 <ES_WIFI_StartClientConnection+0x160>)
 8001744:	f00a ffb4 	bl	800c6b0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001754:	461a      	mov	r2, r3
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff fd84 	bl	8001264 <AT_ExecuteCommand>
 800175c:	4603      	mov	r3, r0
 800175e:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 8001760:	7bfb      	ldrb	r3, [r7, #15]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d114      	bne.n	8001790 <ES_WIFI_StartClientConnection+0x68>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	4946      	ldr	r1, [pc, #280]	@ (800188c <ES_WIFI_StartClientConnection+0x164>)
 8001774:	f00a ff9c 	bl	800c6b0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001784:	461a      	mov	r2, r3
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff fd6c 	bl	8001264 <AT_ExecuteCommand>
 800178c:	4603      	mov	r3, r0
 800178e:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->LocalPort > 0))
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d118      	bne.n	80017c8 <ES_WIFI_StartClientConnection+0xa0>
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	889b      	ldrh	r3, [r3, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d014      	beq.n	80017c8 <ES_WIFI_StartClientConnection+0xa0>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	889b      	ldrh	r3, [r3, #4]
 80017a8:	461a      	mov	r2, r3
 80017aa:	4939      	ldr	r1, [pc, #228]	@ (8001890 <ES_WIFI_StartClientConnection+0x168>)
 80017ac:	f00a ff80 	bl	800c6b0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80017bc:	461a      	mov	r2, r3
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff fd50 	bl	8001264 <AT_ExecuteCommand>
 80017c4:	4603      	mov	r3, r0
 80017c6:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->RemotePort > 0))
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d118      	bne.n	8001800 <ES_WIFI_StartClientConnection+0xd8>
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	885b      	ldrh	r3, [r3, #2]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d014      	beq.n	8001800 <ES_WIFI_StartClientConnection+0xd8>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	885b      	ldrh	r3, [r3, #2]
 80017e0:	461a      	mov	r2, r3
 80017e2:	492c      	ldr	r1, [pc, #176]	@ (8001894 <ES_WIFI_StartClientConnection+0x16c>)
 80017e4:	f00a ff64 	bl	800c6b0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80017f4:	461a      	mov	r2, r3
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff fd34 	bl	8001264 <AT_ExecuteCommand>
 80017fc:	4603      	mov	r3, r0
 80017fe:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_CONNECTION))
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d124      	bne.n	8001850 <ES_WIFI_StartClientConnection+0x128>
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d120      	bne.n	8001850 <ES_WIFI_StartClientConnection+0x128>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	799b      	ldrb	r3, [r3, #6]
 8001818:	4619      	mov	r1, r3
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	79db      	ldrb	r3, [r3, #7]
 800181e:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8001824:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800182a:	9301      	str	r3, [sp, #4]
 800182c:	9200      	str	r2, [sp, #0]
 800182e:	4623      	mov	r3, r4
 8001830:	460a      	mov	r2, r1
 8001832:	4919      	ldr	r1, [pc, #100]	@ (8001898 <ES_WIFI_StartClientConnection+0x170>)
 8001834:	f00a ff3c 	bl	800c6b0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001844:	461a      	mov	r2, r3
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff fd0c 	bl	8001264 <AT_ExecuteCommand>
 800184c:	4603      	mov	r3, r0
 800184e:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d112      	bne.n	800187c <ES_WIFI_StartClientConnection+0x154>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800185c:	490f      	ldr	r1, [pc, #60]	@ (800189c <ES_WIFI_StartClientConnection+0x174>)
 800185e:	4618      	mov	r0, r3
 8001860:	f00a ff26 	bl	800c6b0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001870:	461a      	mov	r2, r3
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff fcf6 	bl	8001264 <AT_ExecuteCommand>
 8001878:	4603      	mov	r3, r0
 800187a:	73fb      	strb	r3, [r7, #15]
  }
  
  UNLOCK_WIFI();
  return ret;
 800187c:	7bfb      	ldrb	r3, [r7, #15]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	bd90      	pop	{r4, r7, pc}
 8001886:	bf00      	nop
 8001888:	08010688 	.word	0x08010688
 800188c:	08010690 	.word	0x08010690
 8001890:	08010698 	.word	0x08010698
 8001894:	080106a0 	.word	0x080106a0
 8001898:	080106a8 	.word	0x080106a8
 800189c:	080106b8 	.word	0x080106b8

080018a0 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b088      	sub	sp, #32
 80018a4:	af02      	add	r7, sp, #8
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	461a      	mov	r2, r3
 80018ac:	460b      	mov	r3, r1
 80018ae:	72fb      	strb	r3, [r7, #11]
 80018b0:	4613      	mov	r3, r2
 80018b2:	813b      	strh	r3, [r7, #8]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80018b4:	2302      	movs	r3, #2
 80018b6:	75fb      	strb	r3, [r7, #23]
  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 80018b8:	893b      	ldrh	r3, [r7, #8]
 80018ba:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80018be:	d302      	bcc.n	80018c6 <ES_WIFI_SendData+0x26>
 80018c0:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 80018c4:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	893a      	ldrh	r2, [r7, #8]
 80018ca:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80018d2:	7afa      	ldrb	r2, [r7, #11]
 80018d4:	4942      	ldr	r1, [pc, #264]	@ (80019e0 <ES_WIFI_SendData+0x140>)
 80018d6:	4618      	mov	r0, r3
 80018d8:	f00a feea 	bl	800c6b0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80018e8:	461a      	mov	r2, r3
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f7ff fcba 	bl	8001264 <AT_ExecuteCommand>
 80018f0:	4603      	mov	r3, r0
 80018f2:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 80018f4:	7dfb      	ldrb	r3, [r7, #23]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d15e      	bne.n	80019b8 <ES_WIFI_SendData+0x118>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",Timeout);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001902:	4938      	ldr	r1, [pc, #224]	@ (80019e4 <ES_WIFI_SendData+0x144>)
 8001904:	4618      	mov	r0, r3
 8001906:	f00a fed3 	bl	800c6b0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001916:	461a      	mov	r2, r3
 8001918:	68f8      	ldr	r0, [r7, #12]
 800191a:	f7ff fca3 	bl	8001264 <AT_ExecuteCommand>
 800191e:	4603      	mov	r3, r0
 8001920:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8001922:	7dfb      	ldrb	r3, [r7, #23]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d13d      	bne.n	80019a4 <ES_WIFI_SendData+0x104>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800192e:	893a      	ldrh	r2, [r7, #8]
 8001930:	492d      	ldr	r1, [pc, #180]	@ (80019e8 <ES_WIFI_SendData+0x148>)
 8001932:	4618      	mov	r0, r3
 8001934:	f00a febc 	bl	800c6b0 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001944:	893a      	ldrh	r2, [r7, #8]
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	4613      	mov	r3, r2
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f7ff fce3 	bl	8001318 <AT_RequestSendData>
 8001952:	4603      	mov	r3, r0
 8001954:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8001956:	7dfb      	ldrb	r3, [r7, #23]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d119      	bne.n	8001990 <ES_WIFI_SendData+0xf0>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001962:	4922      	ldr	r1, [pc, #136]	@ (80019ec <ES_WIFI_SendData+0x14c>)
 8001964:	4618      	mov	r0, r3
 8001966:	f00b f823 	bl	800c9b0 <strstr>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d02c      	beq.n	80019ca <ES_WIFI_SendData+0x12a>
        {
          _DEBUG_("SEnd Data detect error %s\n", (char *)Obj->CmdData);
 8001970:	f240 722c 	movw	r2, #1836	@ 0x72c
 8001974:	491e      	ldr	r1, [pc, #120]	@ (80019f0 <ES_WIFI_SendData+0x150>)
 8001976:	481f      	ldr	r0, [pc, #124]	@ (80019f4 <ES_WIFI_SendData+0x154>)
 8001978:	f00a fe2a 	bl	800c5d0 <iprintf>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001982:	4619      	mov	r1, r3
 8001984:	481c      	ldr	r0, [pc, #112]	@ (80019f8 <ES_WIFI_SendData+0x158>)
 8001986:	f00a fe23 	bl	800c5d0 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 800198a:	2302      	movs	r3, #2
 800198c:	75fb      	strb	r3, [r7, #23]
 800198e:	e01c      	b.n	80019ca <ES_WIFI_SendData+0x12a>
        }
      }
      else
      {
        _DEBUG_("Send Data command failed\n");
 8001990:	f240 7232 	movw	r2, #1842	@ 0x732
 8001994:	4916      	ldr	r1, [pc, #88]	@ (80019f0 <ES_WIFI_SendData+0x150>)
 8001996:	4817      	ldr	r0, [pc, #92]	@ (80019f4 <ES_WIFI_SendData+0x154>)
 8001998:	f00a fe1a 	bl	800c5d0 <iprintf>
 800199c:	4817      	ldr	r0, [pc, #92]	@ (80019fc <ES_WIFI_SendData+0x15c>)
 800199e:	f00a fe7f 	bl	800c6a0 <puts>
 80019a2:	e012      	b.n	80019ca <ES_WIFI_SendData+0x12a>
      }
    }
    else
    {
      _DEBUG_("S2 command failed\n");
 80019a4:	f240 7237 	movw	r2, #1847	@ 0x737
 80019a8:	4911      	ldr	r1, [pc, #68]	@ (80019f0 <ES_WIFI_SendData+0x150>)
 80019aa:	4812      	ldr	r0, [pc, #72]	@ (80019f4 <ES_WIFI_SendData+0x154>)
 80019ac:	f00a fe10 	bl	800c5d0 <iprintf>
 80019b0:	4813      	ldr	r0, [pc, #76]	@ (8001a00 <ES_WIFI_SendData+0x160>)
 80019b2:	f00a fe75 	bl	800c6a0 <puts>
 80019b6:	e008      	b.n	80019ca <ES_WIFI_SendData+0x12a>
    }
  }
  else
  {
   _DEBUG_("P0 command failed\n");
 80019b8:	f240 723c 	movw	r2, #1852	@ 0x73c
 80019bc:	490c      	ldr	r1, [pc, #48]	@ (80019f0 <ES_WIFI_SendData+0x150>)
 80019be:	480d      	ldr	r0, [pc, #52]	@ (80019f4 <ES_WIFI_SendData+0x154>)
 80019c0:	f00a fe06 	bl	800c5d0 <iprintf>
 80019c4:	480f      	ldr	r0, [pc, #60]	@ (8001a04 <ES_WIFI_SendData+0x164>)
 80019c6:	f00a fe6b 	bl	800c6a0 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 80019ca:	7dfb      	ldrb	r3, [r7, #23]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d102      	bne.n	80019d6 <ES_WIFI_SendData+0x136>
  {
    *SentLen = 0;
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	2200      	movs	r2, #0
 80019d4:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	08010688 	.word	0x08010688
 80019e4:	08010714 	.word	0x08010714
 80019e8:	0801071c 	.word	0x0801071c
 80019ec:	08010728 	.word	0x08010728
 80019f0:	08010730 	.word	0x08010730
 80019f4:	08010748 	.word	0x08010748
 80019f8:	08010750 	.word	0x08010750
 80019fc:	0801076c 	.word	0x0801076c
 8001a00:	08010788 	.word	0x08010788
 8001a04:	0801079c 	.word	0x0801079c

08001a08 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af02      	add	r7, sp, #8
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	461a      	mov	r2, r3
 8001a14:	460b      	mov	r3, r1
 8001a16:	72fb      	strb	r3, [r7, #11]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	813b      	strh	r3, [r7, #8]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	75fb      	strb	r3, [r7, #23]
  LOCK_WIFI();  

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8001a20:	893b      	ldrh	r3, [r7, #8]
 8001a22:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8001a26:	f200 808b 	bhi.w	8001b40 <ES_WIFI_ReceiveData+0x138>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001a30:	7afa      	ldrb	r2, [r7, #11]
 8001a32:	4946      	ldr	r1, [pc, #280]	@ (8001b4c <ES_WIFI_ReceiveData+0x144>)
 8001a34:	4618      	mov	r0, r3
 8001a36:	f00a fe3b 	bl	800c6b0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001a46:	461a      	mov	r2, r3
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f7ff fc0b 	bl	8001264 <AT_ExecuteCommand>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8001a52:	7dfb      	ldrb	r3, [r7, #23]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d165      	bne.n	8001b24 <ES_WIFI_ReceiveData+0x11c>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001a5e:	893a      	ldrh	r2, [r7, #8]
 8001a60:	493b      	ldr	r1, [pc, #236]	@ (8001b50 <ES_WIFI_ReceiveData+0x148>)
 8001a62:	4618      	mov	r0, r3
 8001a64:	f00a fe24 	bl	800c6b0 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001a74:	461a      	mov	r2, r3
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f7ff fbf4 	bl	8001264 <AT_ExecuteCommand>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	75fb      	strb	r3, [r7, #23]
      if(ret == ES_WIFI_STATUS_OK)
 8001a80:	7dfb      	ldrb	r3, [r7, #23]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d141      	bne.n	8001b0a <ES_WIFI_ReceiveData+0x102>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", Timeout);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001a8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a8e:	4931      	ldr	r1, [pc, #196]	@ (8001b54 <ES_WIFI_ReceiveData+0x14c>)
 8001a90:	4618      	mov	r0, r3
 8001a92:	f00a fe0d 	bl	800c6b0 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f7ff fbdd 	bl	8001264 <AT_ExecuteCommand>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8001aae:	7dfb      	ldrb	r3, [r7, #23]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d120      	bne.n	8001af6 <ES_WIFI_ReceiveData+0xee>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001aba:	4927      	ldr	r1, [pc, #156]	@ (8001b58 <ES_WIFI_ReceiveData+0x150>)
 8001abc:	4618      	mov	r0, r3
 8001abe:	f00a fdf7 	bl	800c6b0 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001ac8:	893a      	ldrh	r2, [r7, #8]
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f7ff fc96 	bl	8001404 <AT_RequestReceiveData>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	75fb      	strb	r3, [r7, #23]
          if (ret != ES_WIFI_STATUS_OK)
 8001adc:	7dfb      	ldrb	r3, [r7, #23]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d02e      	beq.n	8001b40 <ES_WIFI_ReceiveData+0x138>
          {
            _DEBUG_("AT_RequestReceiveData  failed\n");
 8001ae2:	f240 72b5 	movw	r2, #1973	@ 0x7b5
 8001ae6:	491d      	ldr	r1, [pc, #116]	@ (8001b5c <ES_WIFI_ReceiveData+0x154>)
 8001ae8:	481d      	ldr	r0, [pc, #116]	@ (8001b60 <ES_WIFI_ReceiveData+0x158>)
 8001aea:	f00a fd71 	bl	800c5d0 <iprintf>
 8001aee:	481d      	ldr	r0, [pc, #116]	@ (8001b64 <ES_WIFI_ReceiveData+0x15c>)
 8001af0:	f00a fdd6 	bl	800c6a0 <puts>
 8001af4:	e024      	b.n	8001b40 <ES_WIFI_ReceiveData+0x138>
          }
        }
        else
        {
         _DEBUG_("setting timeout failed\n");
 8001af6:	f240 72ba 	movw	r2, #1978	@ 0x7ba
 8001afa:	4918      	ldr	r1, [pc, #96]	@ (8001b5c <ES_WIFI_ReceiveData+0x154>)
 8001afc:	4818      	ldr	r0, [pc, #96]	@ (8001b60 <ES_WIFI_ReceiveData+0x158>)
 8001afe:	f00a fd67 	bl	800c5d0 <iprintf>
 8001b02:	4819      	ldr	r0, [pc, #100]	@ (8001b68 <ES_WIFI_ReceiveData+0x160>)
 8001b04:	f00a fdcc 	bl	800c6a0 <puts>
 8001b08:	e01a      	b.n	8001b40 <ES_WIFI_ReceiveData+0x138>
        }
      }
      else
      {
        _DEBUG_("setting requested len failed\n");
 8001b0a:	f240 72bf 	movw	r2, #1983	@ 0x7bf
 8001b0e:	4913      	ldr	r1, [pc, #76]	@ (8001b5c <ES_WIFI_ReceiveData+0x154>)
 8001b10:	4813      	ldr	r0, [pc, #76]	@ (8001b60 <ES_WIFI_ReceiveData+0x158>)
 8001b12:	f00a fd5d 	bl	800c5d0 <iprintf>
 8001b16:	4815      	ldr	r0, [pc, #84]	@ (8001b6c <ES_WIFI_ReceiveData+0x164>)
 8001b18:	f00a fdc2 	bl	800c6a0 <puts>
        *Receivedlen = 0;
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	801a      	strh	r2, [r3, #0]
 8001b22:	e00d      	b.n	8001b40 <ES_WIFI_ReceiveData+0x138>
      }
    }
    else
    {
      _DEBUG_("setting socket for read failed\n");
 8001b24:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8001b28:	490c      	ldr	r1, [pc, #48]	@ (8001b5c <ES_WIFI_ReceiveData+0x154>)
 8001b2a:	480d      	ldr	r0, [pc, #52]	@ (8001b60 <ES_WIFI_ReceiveData+0x158>)
 8001b2c:	f00a fd50 	bl	800c5d0 <iprintf>
 8001b30:	480f      	ldr	r0, [pc, #60]	@ (8001b70 <ES_WIFI_ReceiveData+0x168>)
 8001b32:	f00a fdb5 	bl	800c6a0 <puts>
      issue15++;
 8001b36:	4b0f      	ldr	r3, [pc, #60]	@ (8001b74 <ES_WIFI_ReceiveData+0x16c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b74 <ES_WIFI_ReceiveData+0x16c>)
 8001b3e:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 8001b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	08010688 	.word	0x08010688
 8001b50:	080107c0 	.word	0x080107c0
 8001b54:	080107c8 	.word	0x080107c8
 8001b58:	080107d0 	.word	0x080107d0
 8001b5c:	08010730 	.word	0x08010730
 8001b60:	08010748 	.word	0x08010748
 8001b64:	080107d4 	.word	0x080107d4
 8001b68:	080107f4 	.word	0x080107f4
 8001b6c:	0801080c 	.word	0x0801080c
 8001b70:	0801082c 	.word	0x0801082c
 8001b74:	20000354 	.word	0x20000354

08001b78 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08c      	sub	sp, #48	@ 0x30
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001b80:	4b56      	ldr	r3, [pc, #344]	@ (8001cdc <SPI_WIFI_MspInit+0x164>)
 8001b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b84:	4a55      	ldr	r2, [pc, #340]	@ (8001cdc <SPI_WIFI_MspInit+0x164>)
 8001b86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b8c:	4b53      	ldr	r3, [pc, #332]	@ (8001cdc <SPI_WIFI_MspInit+0x164>)
 8001b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b94:	61bb      	str	r3, [r7, #24]
 8001b96:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b98:	4b50      	ldr	r3, [pc, #320]	@ (8001cdc <SPI_WIFI_MspInit+0x164>)
 8001b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9c:	4a4f      	ldr	r2, [pc, #316]	@ (8001cdc <SPI_WIFI_MspInit+0x164>)
 8001b9e:	f043 0302 	orr.w	r3, r3, #2
 8001ba2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ba4:	4b4d      	ldr	r3, [pc, #308]	@ (8001cdc <SPI_WIFI_MspInit+0x164>)
 8001ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb0:	4b4a      	ldr	r3, [pc, #296]	@ (8001cdc <SPI_WIFI_MspInit+0x164>)
 8001bb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb4:	4a49      	ldr	r2, [pc, #292]	@ (8001cdc <SPI_WIFI_MspInit+0x164>)
 8001bb6:	f043 0304 	orr.w	r3, r3, #4
 8001bba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bbc:	4b47      	ldr	r3, [pc, #284]	@ (8001cdc <SPI_WIFI_MspInit+0x164>)
 8001bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bc8:	4b44      	ldr	r3, [pc, #272]	@ (8001cdc <SPI_WIFI_MspInit+0x164>)
 8001bca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bcc:	4a43      	ldr	r2, [pc, #268]	@ (8001cdc <SPI_WIFI_MspInit+0x164>)
 8001bce:	f043 0310 	orr.w	r3, r3, #16
 8001bd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bd4:	4b41      	ldr	r3, [pc, #260]	@ (8001cdc <SPI_WIFI_MspInit+0x164>)
 8001bd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET ); 
 8001be0:	2200      	movs	r2, #0
 8001be2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001be6:	483e      	ldr	r0, [pc, #248]	@ (8001ce0 <SPI_WIFI_MspInit+0x168>)
 8001be8:	f005 f986 	bl	8006ef8 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8001bec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bf0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8001bfe:	f107 031c 	add.w	r3, r7, #28
 8001c02:	4619      	mov	r1, r3
 8001c04:	4836      	ldr	r0, [pc, #216]	@ (8001ce0 <SPI_WIFI_MspInit+0x168>)
 8001c06:	f004 fec1 	bl	800698c <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8001c0e:	4b35      	ldr	r3, [pc, #212]	@ (8001ce4 <SPI_WIFI_MspInit+0x16c>)
 8001c10:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001c16:	2300      	movs	r3, #0
 8001c18:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001c1a:	f107 031c 	add.w	r3, r7, #28
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4831      	ldr	r0, [pc, #196]	@ (8001ce8 <SPI_WIFI_MspInit+0x170>)
 8001c22:	f004 feb3 	bl	800698c <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8001c26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c2a:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001c3c:	f107 031c 	add.w	r3, r7, #28
 8001c40:	4619      	mov	r1, r3
 8001c42:	4829      	ldr	r0, [pc, #164]	@ (8001ce8 <SPI_WIFI_MspInit+0x170>)
 8001c44:	f004 fea2 	bl	800698c <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET ); 
 8001c48:	2201      	movs	r2, #1
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	4826      	ldr	r0, [pc, #152]	@ (8001ce8 <SPI_WIFI_MspInit+0x170>)
 8001c4e:	f005 f953 	bl	8006ef8 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8001c52:	2301      	movs	r3, #1
 8001c54:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001c56:	2301      	movs	r3, #1
 8001c58:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8001c62:	f107 031c 	add.w	r3, r7, #28
 8001c66:	4619      	mov	r1, r3
 8001c68:	481f      	ldr	r0, [pc, #124]	@ (8001ce8 <SPI_WIFI_MspInit+0x170>)
 8001c6a:	f004 fe8f 	bl	800698c <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8001c6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c72:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001c80:	2306      	movs	r3, #6
 8001c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8001c84:	f107 031c 	add.w	r3, r7, #28
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4818      	ldr	r0, [pc, #96]	@ (8001cec <SPI_WIFI_MspInit+0x174>)
 8001c8c:	f004 fe7e 	bl	800698c <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8001c90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c94:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001c96:	2302      	movs	r3, #2
 8001c98:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001ca2:	2306      	movs	r3, #6
 8001ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001ca6:	f107 031c 	add.w	r3, r7, #28
 8001caa:	4619      	mov	r1, r3
 8001cac:	480f      	ldr	r0, [pc, #60]	@ (8001cec <SPI_WIFI_MspInit+0x174>)
 8001cae:	f004 fe6d 	bl	800698c <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8001cb2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001cb6:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001cc4:	2306      	movs	r3, #6
 8001cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001cc8:	f107 031c 	add.w	r3, r7, #28
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4807      	ldr	r0, [pc, #28]	@ (8001cec <SPI_WIFI_MspInit+0x174>)
 8001cd0:	f004 fe5c 	bl	800698c <HAL_GPIO_Init>
}
 8001cd4:	bf00      	nop
 8001cd6:	3730      	adds	r7, #48	@ 0x30
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	48000400 	.word	0x48000400
 8001ce4:	10110000 	.word	0x10110000
 8001ce8:	48001000 	.word	0x48001000
 8001cec:	48000800 	.word	0x48000800

08001cf0 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 8001cfe:	88fb      	ldrh	r3, [r7, #6]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d13a      	bne.n	8001d7a <SPI_WIFI_Init+0x8a>
  {
    hspi.Instance               = SPI3;
 8001d04:	4b22      	ldr	r3, [pc, #136]	@ (8001d90 <SPI_WIFI_Init+0xa0>)
 8001d06:	4a23      	ldr	r2, [pc, #140]	@ (8001d94 <SPI_WIFI_Init+0xa4>)
 8001d08:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8001d0a:	4821      	ldr	r0, [pc, #132]	@ (8001d90 <SPI_WIFI_Init+0xa0>)
 8001d0c:	f7ff ff34 	bl	8001b78 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8001d10:	4b1f      	ldr	r3, [pc, #124]	@ (8001d90 <SPI_WIFI_Init+0xa0>)
 8001d12:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d16:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8001d18:	4b1d      	ldr	r3, [pc, #116]	@ (8001d90 <SPI_WIFI_Init+0xa0>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d90 <SPI_WIFI_Init+0xa0>)
 8001d20:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8001d24:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8001d26:	4b1a      	ldr	r3, [pc, #104]	@ (8001d90 <SPI_WIFI_Init+0xa0>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8001d2c:	4b18      	ldr	r3, [pc, #96]	@ (8001d90 <SPI_WIFI_Init+0xa0>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8001d32:	4b17      	ldr	r3, [pc, #92]	@ (8001d90 <SPI_WIFI_Init+0xa0>)
 8001d34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d38:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supportes up to 20MHz)*/
 8001d3a:	4b15      	ldr	r3, [pc, #84]	@ (8001d90 <SPI_WIFI_Init+0xa0>)
 8001d3c:	2210      	movs	r2, #16
 8001d3e:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8001d40:	4b13      	ldr	r3, [pc, #76]	@ (8001d90 <SPI_WIFI_Init+0xa0>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8001d46:	4b12      	ldr	r3, [pc, #72]	@ (8001d90 <SPI_WIFI_Init+0xa0>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8001d4c:	4b10      	ldr	r3, [pc, #64]	@ (8001d90 <SPI_WIFI_Init+0xa0>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi.Init.CRCPolynomial     = 0;
 8001d52:	4b0f      	ldr	r3, [pc, #60]	@ (8001d90 <SPI_WIFI_Init+0xa0>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	62da      	str	r2, [r3, #44]	@ 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8001d58:	480d      	ldr	r0, [pc, #52]	@ (8001d90 <SPI_WIFI_Init+0xa0>)
 8001d5a:	f006 fcdd 	bl	8008718 <HAL_SPI_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d002      	beq.n	8001d6a <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8001d64:	f04f 33ff 	mov.w	r3, #4294967295
 8001d68:	e00d      	b.n	8001d86 <SPI_WIFI_Init+0x96>
    }

	 // Enable Interrupt for Data Ready pin , GPIO_PIN1
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, 0x0F, 0x00);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	210f      	movs	r1, #15
 8001d6e:	2007      	movs	r0, #7
 8001d70:	f004 fd95 	bl	800689e <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8001d74:	2007      	movs	r0, #7
 8001d76:	f004 fdae 	bl	80068d6 <HAL_NVIC_EnableIRQ>
    
    // create Mutex and Semaphore
	RTOS_CREATE_SEM_MUTEX();
  }
  
  rc= SPI_WIFI_ResetModule();
 8001d7a:	f000 f80d 	bl	8001d98 <SPI_WIFI_ResetModule>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	73fb      	strb	r3, [r7, #15]

  return rc;
 8001d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000358 	.word	0x20000358
 8001d94:	40003c00 	.word	0x40003c00

08001d98 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8001d9e:	f004 fc75 	bl	800668c <HAL_GetTick>
 8001da2:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 8001da8:	2200      	movs	r2, #0
 8001daa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dae:	4830      	ldr	r0, [pc, #192]	@ (8001e70 <SPI_WIFI_ResetModule+0xd8>)
 8001db0:	f005 f8a2 	bl	8006ef8 <HAL_GPIO_WritePin>
 8001db4:	200a      	movs	r0, #10
 8001db6:	f004 fc75 	bl	80066a4 <HAL_Delay>
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dc0:	482b      	ldr	r0, [pc, #172]	@ (8001e70 <SPI_WIFI_ResetModule+0xd8>)
 8001dc2:	f005 f899 	bl	8006ef8 <HAL_GPIO_WritePin>
 8001dc6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001dca:	f004 fc6b 	bl	80066a4 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	4827      	ldr	r0, [pc, #156]	@ (8001e70 <SPI_WIFI_ResetModule+0xd8>)
 8001dd4:	f005 f890 	bl	8006ef8 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001dd8:	200f      	movs	r0, #15
 8001dda:	f000 f977 	bl	80020cc <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 8001dde:	e020      	b.n	8001e22 <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);  
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
 8001de2:	463a      	mov	r2, r7
 8001de4:	18d1      	adds	r1, r2, r3
 8001de6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001dea:	2201      	movs	r2, #1
 8001dec:	4821      	ldr	r0, [pc, #132]	@ (8001e74 <SPI_WIFI_ResetModule+0xdc>)
 8001dee:	f006 feab 	bl	8008b48 <HAL_SPI_Receive>
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	3302      	adds	r3, #2
 8001dfa:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8001dfc:	f004 fc46 	bl	800668c <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e0a:	d202      	bcs.n	8001e12 <SPI_WIFI_ResetModule+0x7a>
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d007      	beq.n	8001e22 <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS(); 
 8001e12:	2201      	movs	r2, #1
 8001e14:	2101      	movs	r1, #1
 8001e16:	4816      	ldr	r0, [pc, #88]	@ (8001e70 <SPI_WIFI_ResetModule+0xd8>)
 8001e18:	f005 f86e 	bl	8006ef8 <HAL_GPIO_WritePin>
      return -1;
 8001e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e20:	e021      	b.n	8001e66 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 8001e22:	2102      	movs	r1, #2
 8001e24:	4812      	ldr	r0, [pc, #72]	@ (8001e70 <SPI_WIFI_ResetModule+0xd8>)
 8001e26:	f005 f84f 	bl	8006ec8 <HAL_GPIO_ReadPin>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d0d7      	beq.n	8001de0 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS(); 
 8001e30:	2201      	movs	r2, #1
 8001e32:	2101      	movs	r1, #1
 8001e34:	480e      	ldr	r0, [pc, #56]	@ (8001e70 <SPI_WIFI_ResetModule+0xd8>)
 8001e36:	f005 f85f 	bl	8006ef8 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8001e3a:	783b      	ldrb	r3, [r7, #0]
 8001e3c:	2b15      	cmp	r3, #21
 8001e3e:	d10e      	bne.n	8001e5e <SPI_WIFI_ResetModule+0xc6>
 8001e40:	787b      	ldrb	r3, [r7, #1]
 8001e42:	2b15      	cmp	r3, #21
 8001e44:	d10b      	bne.n	8001e5e <SPI_WIFI_ResetModule+0xc6>
 8001e46:	78bb      	ldrb	r3, [r7, #2]
 8001e48:	2b0d      	cmp	r3, #13
 8001e4a:	d108      	bne.n	8001e5e <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8001e4e:	2b0a      	cmp	r3, #10
 8001e50:	d105      	bne.n	8001e5e <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8001e52:	793b      	ldrb	r3, [r7, #4]
 8001e54:	2b3e      	cmp	r3, #62	@ 0x3e
 8001e56:	d102      	bne.n	8001e5e <SPI_WIFI_ResetModule+0xc6>
 8001e58:	797b      	ldrb	r3, [r7, #5]
 8001e5a:	2b20      	cmp	r3, #32
 8001e5c:	d002      	beq.n	8001e64 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 8001e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e62:	e000      	b.n	8001e66 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	48001000 	.word	0x48001000
 8001e74:	20000358 	.word	0x20000358

08001e78 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8001e7c:	4802      	ldr	r0, [pc, #8]	@ (8001e88 <SPI_WIFI_DeInit+0x10>)
 8001e7e:	f006 fcd5 	bl	800882c <HAL_SPI_DeInit>
  RTOS_FREE_SEM_MUTEX();
  return 0;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000358 	.word	0x20000358

08001e8c <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8001e94:	f004 fbfa 	bl	800668c <HAL_GetTick>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 8001e9c:	e00a      	b.n	8001eb4 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001e9e:	f004 fbf5 	bl	800668c <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	1ad2      	subs	r2, r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d902      	bls.n	8001eb4 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8001eae:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb2:	e007      	b.n	8001ec4 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 8001eb4:	2102      	movs	r1, #2
 8001eb6:	4805      	ldr	r0, [pc, #20]	@ (8001ecc <wait_cmddata_rdy_high+0x40>)
 8001eb8:	f005 f806 	bl	8006ec8 <HAL_GPIO_ReadPin>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d1ed      	bne.n	8001e9e <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	48001000 	.word	0x48001000

08001ed0 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout); 
#else
  int tickstart = HAL_GetTick();
 8001ed8:	f004 fbd8 	bl	800668c <HAL_GetTick>
 8001edc:	4603      	mov	r3, r0
 8001ede:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 8001ee0:	e00a      	b.n	8001ef8 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001ee2:	f004 fbd3 	bl	800668c <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	1ad2      	subs	r2, r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d902      	bls.n	8001ef8 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8001ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef6:	e004      	b.n	8001f02 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 8001ef8:	4b04      	ldr	r3, [pc, #16]	@ (8001f0c <wait_cmddata_rdy_rising_event+0x3c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d0f0      	beq.n	8001ee2 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0; 
 8001f00:	2300      	movs	r3, #0
#endif
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	200003bc 	.word	0x200003bc

08001f10 <SPI_WIFI_ReceiveData>:
}
*/


int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	607a      	str	r2, [r7, #4]
 8001f1c:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS(); 
 8001f22:	2201      	movs	r2, #1
 8001f24:	2101      	movs	r1, #1
 8001f26:	4831      	ldr	r0, [pc, #196]	@ (8001fec <SPI_WIFI_ReceiveData+0xdc>)
 8001f28:	f004 ffe6 	bl	8006ef8 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8001f2c:	2003      	movs	r0, #3
 8001f2e:	f000 f8cd 	bl	80020cc <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff ffcb 	bl	8001ed0 <wait_cmddata_rdy_rising_event>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	da02      	bge.n	8001f46 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8001f40:	f06f 0302 	mvn.w	r3, #2
 8001f44:	e04e      	b.n	8001fe4 <SPI_WIFI_ReceiveData+0xd4>
  }

  LOCK_SPI();  
  WIFI_ENABLE_NSS(); 
 8001f46:	2200      	movs	r2, #0
 8001f48:	2101      	movs	r1, #1
 8001f4a:	4828      	ldr	r0, [pc, #160]	@ (8001fec <SPI_WIFI_ReceiveData+0xdc>)
 8001f4c:	f004 ffd4 	bl	8006ef8 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001f50:	200f      	movs	r0, #15
 8001f52:	f000 f8bb 	bl	80020cc <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8001f56:	e037      	b.n	8001fc8 <SPI_WIFI_ReceiveData+0xb8>
  {
    if((length < len) || (!len))
 8001f58:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001f5c:	897b      	ldrh	r3, [r7, #10]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	db02      	blt.n	8001f68 <SPI_WIFI_ReceiveData+0x58>
 8001f62:	897b      	ldrh	r3, [r7, #10]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d136      	bne.n	8001fd6 <SPI_WIFI_ReceiveData+0xc6>
    {
      //spi_rx_event=1;
      if (HAL_SPI_Receive(&hspi, tmp, 1, 0xFFFFFFFF) != HAL_OK) {
 8001f68:	f107 0114 	add.w	r1, r7, #20
 8001f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f70:	2201      	movs	r2, #1
 8001f72:	481f      	ldr	r0, [pc, #124]	@ (8001ff0 <SPI_WIFI_ReceiveData+0xe0>)
 8001f74:	f006 fde8 	bl	8008b48 <HAL_SPI_Receive>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d007      	beq.n	8001f8e <SPI_WIFI_ReceiveData+0x7e>
        WIFI_DISABLE_NSS();
 8001f7e:	2201      	movs	r2, #1
 8001f80:	2101      	movs	r1, #1
 8001f82:	481a      	ldr	r0, [pc, #104]	@ (8001fec <SPI_WIFI_ReceiveData+0xdc>)
 8001f84:	f004 ffb8 	bl	8006ef8 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8001f88:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8c:	e02a      	b.n	8001fe4 <SPI_WIFI_ReceiveData+0xd4>
      }
  
      //wait_spi_rx_event(timeout);

      pData[0] = tmp[0];
 8001f8e:	7d3a      	ldrb	r2, [r7, #20]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	3301      	adds	r3, #1
 8001f98:	7d7a      	ldrb	r2, [r7, #21]
 8001f9a:	701a      	strb	r2, [r3, #0]
      length += 2;
 8001f9c:	8afb      	ldrh	r3, [r7, #22]
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 8001faa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fae:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 8001fb2:	db09      	blt.n	8001fc8 <SPI_WIFI_ReceiveData+0xb8>
        WIFI_DISABLE_NSS();
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	480c      	ldr	r0, [pc, #48]	@ (8001fec <SPI_WIFI_ReceiveData+0xdc>)
 8001fba:	f004 ff9d 	bl	8006ef8 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();    
 8001fbe:	f7ff feeb 	bl	8001d98 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8001fc2:	f06f 0303 	mvn.w	r3, #3
 8001fc6:	e00d      	b.n	8001fe4 <SPI_WIFI_ReceiveData+0xd4>
  while (WIFI_IS_CMDDATA_READY())
 8001fc8:	2102      	movs	r1, #2
 8001fca:	4808      	ldr	r0, [pc, #32]	@ (8001fec <SPI_WIFI_ReceiveData+0xdc>)
 8001fcc:	f004 ff7c 	bl	8006ec8 <HAL_GPIO_ReadPin>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d0c0      	beq.n	8001f58 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS(); 
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	2101      	movs	r1, #1
 8001fda:	4804      	ldr	r0, [pc, #16]	@ (8001fec <SPI_WIFI_ReceiveData+0xdc>)
 8001fdc:	f004 ff8c 	bl	8006ef8 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8001fe0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	48001000 	.word	0x48001000
 8001ff0:	20000358 	.word	0x20000358

08001ff4 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	607a      	str	r2, [r7, #4]
 8002000:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ff41 	bl	8001e8c <wait_cmddata_rdy_high>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	da02      	bge.n	8002016 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8002010:	f04f 33ff 	mov.w	r3, #4294967295
 8002014:	e043      	b.n	800209e <SPI_WIFI_SendData+0xaa>
  }
    
  // arm to detect rising event
  cmddata_rdy_rising_event=1;
 8002016:	4b24      	ldr	r3, [pc, #144]	@ (80020a8 <SPI_WIFI_SendData+0xb4>)
 8002018:	2201      	movs	r2, #1
 800201a:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800201c:	2200      	movs	r2, #0
 800201e:	2101      	movs	r1, #1
 8002020:	4822      	ldr	r0, [pc, #136]	@ (80020ac <SPI_WIFI_SendData+0xb8>)
 8002022:	f004 ff69 	bl	8006ef8 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002026:	200f      	movs	r0, #15
 8002028:	f000 f850 	bl	80020cc <SPI_WIFI_DelayUs>
  if (len > 1)
 800202c:	897b      	ldrh	r3, [r7, #10]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d913      	bls.n	800205a <SPI_WIFI_SendData+0x66>
  {
    //spi_tx_event=1;
    if( HAL_SPI_Transmit(&hspi, (uint8_t *)pdata , len/2, 0xFFFFFFFF) != HAL_OK)
 8002032:	897b      	ldrh	r3, [r7, #10]
 8002034:	085b      	lsrs	r3, r3, #1
 8002036:	b29a      	uxth	r2, r3
 8002038:	f04f 33ff 	mov.w	r3, #4294967295
 800203c:	68f9      	ldr	r1, [r7, #12]
 800203e:	481c      	ldr	r0, [pc, #112]	@ (80020b0 <SPI_WIFI_SendData+0xbc>)
 8002040:	f006 fc1c 	bl	800887c <HAL_SPI_Transmit>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d007      	beq.n	800205a <SPI_WIFI_SendData+0x66>
    {
      WIFI_DISABLE_NSS();
 800204a:	2201      	movs	r2, #1
 800204c:	2101      	movs	r1, #1
 800204e:	4817      	ldr	r0, [pc, #92]	@ (80020ac <SPI_WIFI_SendData+0xb8>)
 8002050:	f004 ff52 	bl	8006ef8 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8002054:	f04f 33ff 	mov.w	r3, #4294967295
 8002058:	e021      	b.n	800209e <SPI_WIFI_SendData+0xaa>
    }
    //wait_spi_tx_event(timeout);
  }
  
  if ( len & 1)
 800205a:	897b      	ldrh	r3, [r7, #10]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b00      	cmp	r3, #0
 8002062:	d01a      	beq.n	800209a <SPI_WIFI_SendData+0xa6>
  {
    Padding[0] = pdata[len-1];
 8002064:	897b      	ldrh	r3, [r7, #10]
 8002066:	3b01      	subs	r3, #1
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	4413      	add	r3, r2
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8002070:	230a      	movs	r3, #10
 8002072:	757b      	strb	r3, [r7, #21]

    //spi_tx_event=1;
    if( HAL_SPI_Transmit(&hspi, Padding, 1, 0xFFFFFFFF) != HAL_OK)
 8002074:	f107 0114 	add.w	r1, r7, #20
 8002078:	f04f 33ff 	mov.w	r3, #4294967295
 800207c:	2201      	movs	r2, #1
 800207e:	480c      	ldr	r0, [pc, #48]	@ (80020b0 <SPI_WIFI_SendData+0xbc>)
 8002080:	f006 fbfc 	bl	800887c <HAL_SPI_Transmit>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d007      	beq.n	800209a <SPI_WIFI_SendData+0xa6>
    {
      WIFI_DISABLE_NSS();
 800208a:	2201      	movs	r2, #1
 800208c:	2101      	movs	r1, #1
 800208e:	4807      	ldr	r0, [pc, #28]	@ (80020ac <SPI_WIFI_SendData+0xb8>)
 8002090:	f004 ff32 	bl	8006ef8 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8002094:	f04f 33ff 	mov.w	r3, #4294967295
 8002098:	e001      	b.n	800209e <SPI_WIFI_SendData+0xaa>
    }  
    //wait_spi_tx_event(timeout);
    
  }
  return len;
 800209a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	200003bc 	.word	0x200003bc
 80020ac:	48001000 	.word	0x48001000
 80020b0:	20000358 	.word	0x20000358

080020b4 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f004 faf1 	bl	80066a4 <HAL_Delay>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b087      	sub	sp, #28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t freq = (SystemCoreClock/1000000L);
 80020d4:	4b20      	ldr	r3, [pc, #128]	@ (8002158 <SPI_WIFI_DelayUs+0x8c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a20      	ldr	r2, [pc, #128]	@ (800215c <SPI_WIFI_DelayUs+0x90>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	0c9b      	lsrs	r3, r3, #18
 80020e0:	617b      	str	r3, [r7, #20]
  uint32_t ctrl;
  uint32_t cycle;
  
  n=n*freq;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	fb02 f303 	mul.w	r3, r2, r3
 80020ea:	607b      	str	r3, [r7, #4]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80020ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002160 <SPI_WIFI_DelayUs+0x94>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002160 <SPI_WIFI_DelayUs+0x94>)
 80020f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020f6:	60d3      	str	r3, [r2, #12]
  ctrl = DWT->CTRL;
 80020f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002164 <SPI_WIFI_DelayUs+0x98>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	613b      	str	r3, [r7, #16]
  DWT->CTRL |= 1 ; // enable  counter
 80020fe:	4b19      	ldr	r3, [pc, #100]	@ (8002164 <SPI_WIFI_DelayUs+0x98>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a18      	ldr	r2, [pc, #96]	@ (8002164 <SPI_WIFI_DelayUs+0x98>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6013      	str	r3, [r2, #0]
  cycle = DWT->CYCCNT;
 800210a:	4b16      	ldr	r3, [pc, #88]	@ (8002164 <SPI_WIFI_DelayUs+0x98>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	60fb      	str	r3, [r7, #12]
  n += cycle;
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	4413      	add	r3, r2
 8002116:	607b      	str	r3, [r7, #4]
  if (n < cycle) 
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	429a      	cmp	r2, r3
 800211e:	d205      	bcs.n	800212c <SPI_WIFI_DelayUs+0x60>
  {
	 // wait for rewrap
	 while(n < DWT->CYCCNT);
 8002120:	bf00      	nop
 8002122:	4b10      	ldr	r3, [pc, #64]	@ (8002164 <SPI_WIFI_DelayUs+0x98>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	429a      	cmp	r2, r3
 800212a:	d3fa      	bcc.n	8002122 <SPI_WIFI_DelayUs+0x56>
  }
  
  while(DWT->CYCCNT < n);
 800212c:	bf00      	nop
 800212e:	4b0d      	ldr	r3, [pc, #52]	@ (8002164 <SPI_WIFI_DelayUs+0x98>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	429a      	cmp	r2, r3
 8002136:	d8fa      	bhi.n	800212e <SPI_WIFI_DelayUs+0x62>
  
  DWT->CTRL &= ~(ctrl & 1 ) ; // restore counter mode
 8002138:	4b0a      	ldr	r3, [pc, #40]	@ (8002164 <SPI_WIFI_DelayUs+0x98>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	43db      	mvns	r3, r3
 8002144:	4907      	ldr	r1, [pc, #28]	@ (8002164 <SPI_WIFI_DelayUs+0x98>)
 8002146:	4013      	ands	r3, r2
 8002148:	600b      	str	r3, [r1, #0]
  return;
 800214a:	bf00      	nop
}
 800214c:	371c      	adds	r7, #28
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	20000088 	.word	0x20000088
 800215c:	431bde83 	.word	0x431bde83
 8002160:	e000edf0 	.word	0xe000edf0
 8002164:	e0001000 	.word	0xe0001000

08002168 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 800216c:	4b05      	ldr	r3, [pc, #20]	@ (8002184 <SPI_WIFI_ISR+0x1c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d102      	bne.n	800217a <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event=0;
 8002174:	4b03      	ldr	r3, [pc, #12]	@ (8002184 <SPI_WIFI_ISR+0x1c>)
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
   }
}
 800217a:	bf00      	nop
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	200003bc 	.word	0x200003bc

08002188 <kalman_update_angle>:

const float Q_angle = 0.005f; // Process noise variance for the accelerometer (increase to follow input, decrease to smooth output)
const float Q_bias = 0.003f; // Process noise variance for the gyro bias (increase to follow input, decrease to smooth output)
const float R_measure = 0.01f; // Measurement noise variance - this is actually the variance of the measurement noise

float kalman_update_angle(Kalman *kalman, float newAngle, float newRate, float dt) {
 8002188:	b480      	push	{r7}
 800218a:	b08b      	sub	sp, #44	@ 0x2c
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	ed87 0a02 	vstr	s0, [r7, #8]
 8002194:	edc7 0a01 	vstr	s1, [r7, #4]
 8002198:	ed87 1a00 	vstr	s2, [r7]

	// Discrete Kalman filter time update equations - Time Update ("Predict")
	// Update xhat - Project the state ahead
	/* Step 1 */
	kalman->rate = newRate - kalman->bias;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	edd3 7a01 	vldr	s15, [r3, #4]
 80021a2:	ed97 7a01 	vldr	s14, [r7, #4]
 80021a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	edc3 7a02 	vstr	s15, [r3, #8]
	kalman->angle += dt * kalman->rate;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	ed93 7a00 	vldr	s14, [r3]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	edd3 6a02 	vldr	s13, [r3, #8]
 80021bc:	edd7 7a00 	vldr	s15, [r7]
 80021c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	edc3 7a00 	vstr	s15, [r3]

	// Correct angle over/underflow
	if(kalman->angle > 180) {
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	edd3 7a00 	vldr	s15, [r3]
 80021d4:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8002460 <kalman_update_angle+0x2d8>
 80021d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e0:	dd0a      	ble.n	80021f8 <kalman_update_angle+0x70>
		kalman->angle -= 360.0;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	edd3 7a00 	vldr	s15, [r3]
 80021e8:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 8002464 <kalman_update_angle+0x2dc>
 80021ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	edc3 7a00 	vstr	s15, [r3]
 80021f6:	e013      	b.n	8002220 <kalman_update_angle+0x98>
	} else if(kalman->angle < -180) {
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	edd3 7a00 	vldr	s15, [r3]
 80021fe:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8002468 <kalman_update_angle+0x2e0>
 8002202:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220a:	d509      	bpl.n	8002220 <kalman_update_angle+0x98>
		kalman->angle += 360.0;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	edd3 7a00 	vldr	s15, [r3]
 8002212:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8002464 <kalman_update_angle+0x2dc>
 8002216:	ee77 7a87 	vadd.f32	s15, s15, s14
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	edc3 7a00 	vstr	s15, [r3]
	}

	// Update estimation error covariance - Project the error covariance ahead
	/* Step 2 */
	kalman->P[0][0] += dt * (dt*kalman->P[1][1] - kalman->P[0][1] - kalman->P[1][0] + Q_angle);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	ed93 7a03 	vldr	s14, [r3, #12]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	edd3 6a06 	vldr	s13, [r3, #24]
 800222c:	edd7 7a00 	vldr	s15, [r7]
 8002230:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	edd3 7a04 	vldr	s15, [r3, #16]
 800223a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	edd3 7a05 	vldr	s15, [r3, #20]
 8002244:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002248:	eddf 6a88 	vldr	s13, [pc, #544]	@ 800246c <kalman_update_angle+0x2e4>
 800224c:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002250:	edd7 7a00 	vldr	s15, [r7]
 8002254:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002258:	ee77 7a27 	vadd.f32	s15, s14, s15
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	edc3 7a03 	vstr	s15, [r3, #12]
	kalman->P[0][1] -= dt * kalman->P[1][1];
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	ed93 7a04 	vldr	s14, [r3, #16]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	edd3 6a06 	vldr	s13, [r3, #24]
 800226e:	edd7 7a00 	vldr	s15, [r7]
 8002272:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002276:	ee77 7a67 	vsub.f32	s15, s14, s15
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	edc3 7a04 	vstr	s15, [r3, #16]
	kalman->P[1][0] -= dt * kalman->P[1][1];
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	ed93 7a05 	vldr	s14, [r3, #20]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	edd3 6a06 	vldr	s13, [r3, #24]
 800228c:	edd7 7a00 	vldr	s15, [r7]
 8002290:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002294:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	edc3 7a05 	vstr	s15, [r3, #20]
	kalman->P[1][1] += Q_bias * dt;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	ed93 7a06 	vldr	s14, [r3, #24]
 80022a4:	eddf 6a72 	vldr	s13, [pc, #456]	@ 8002470 <kalman_update_angle+0x2e8>
 80022a8:	edd7 7a00 	vldr	s15, [r7]
 80022ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	edc3 7a06 	vstr	s15, [r3, #24]

	// Discrete Kalman filter measurement update equations - Measurement Update ("Correct")
	// Calculate Kalman gain - Compute the Kalman gain
	/* Step 4 */
	float S = kalman->P[0][0] + R_measure; // Estimate error
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80022c0:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8002474 <kalman_update_angle+0x2ec>
 80022c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022c8:	edc7 7a08 	vstr	s15, [r7, #32]
	/* Step 5 */
	float K[2]; // Kalman gain - This is a 2x1 vector
	K[0] = kalman->P[0][0] / S;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	edd3 6a03 	vldr	s13, [r3, #12]
 80022d2:	ed97 7a08 	vldr	s14, [r7, #32]
 80022d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022da:	edc7 7a04 	vstr	s15, [r7, #16]
	K[1] = kalman->P[1][0] / S;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	edd3 6a05 	vldr	s13, [r3, #20]
 80022e4:	ed97 7a08 	vldr	s14, [r7, #32]
 80022e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022ec:	edc7 7a05 	vstr	s15, [r7, #20]

	// Calculate angle and bias - Update estimate with measurement zk (newAngle)
	/* Step 3 */
	float y = newAngle - kalman->angle; // Angle difference
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	edd3 7a00 	vldr	s15, [r3]
 80022f6:	ed97 7a02 	vldr	s14, [r7, #8]
 80022fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022fe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	// Assume angle has overflowed from 180 to -180 or vice versa when difference is larger than 270
	if(y > 270.0) {
 8002302:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002306:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8002478 <kalman_update_angle+0x2f0>
 800230a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800230e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002312:	dd08      	ble.n	8002326 <kalman_update_angle+0x19e>
		y -= 360.0;
 8002314:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002318:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8002464 <kalman_update_angle+0x2dc>
 800231c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002320:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8002324:	e010      	b.n	8002348 <kalman_update_angle+0x1c0>
	} else if(y < -270.0) {
 8002326:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800232a:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 800247c <kalman_update_angle+0x2f4>
 800232e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002336:	d507      	bpl.n	8002348 <kalman_update_angle+0x1c0>
		y += 360.0;
 8002338:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800233c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8002464 <kalman_update_angle+0x2dc>
 8002340:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002344:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	}

	/* Step 6 */
	kalman->angle += K[0] * y;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	ed93 7a00 	vldr	s14, [r3]
 800234e:	edd7 6a04 	vldr	s13, [r7, #16]
 8002352:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002356:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800235a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	edc3 7a00 	vstr	s15, [r3]
	kalman->bias += K[1] * y;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	ed93 7a01 	vldr	s14, [r3, #4]
 800236a:	edd7 6a05 	vldr	s13, [r7, #20]
 800236e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002372:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	edc3 7a01 	vstr	s15, [r3, #4]
	// Correct angle over/underflow
	if(kalman->angle > 180) {
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	edd3 7a00 	vldr	s15, [r3]
 8002386:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8002460 <kalman_update_angle+0x2d8>
 800238a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800238e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002392:	dd0a      	ble.n	80023aa <kalman_update_angle+0x222>
		kalman->angle -= 360.0;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	edd3 7a00 	vldr	s15, [r3]
 800239a:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002464 <kalman_update_angle+0x2dc>
 800239e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	edc3 7a00 	vstr	s15, [r3]
 80023a8:	e013      	b.n	80023d2 <kalman_update_angle+0x24a>
	} else if(kalman->angle < -180) {
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	edd3 7a00 	vldr	s15, [r3]
 80023b0:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8002468 <kalman_update_angle+0x2e0>
 80023b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023bc:	d509      	bpl.n	80023d2 <kalman_update_angle+0x24a>
		kalman->angle += 360.0;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	edd3 7a00 	vldr	s15, [r3]
 80023c4:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002464 <kalman_update_angle+0x2dc>
 80023c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	edc3 7a00 	vstr	s15, [r3]
	}

	// Calculate estimation error covariance - Update the error covariance
	/* Step 7 */
	float P00_temp = kalman->P[0][0];
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	61fb      	str	r3, [r7, #28]
	float P01_temp = kalman->P[0][1];
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	61bb      	str	r3, [r7, #24]

	kalman->P[0][0] -= K[0] * P00_temp;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	ed93 7a03 	vldr	s14, [r3, #12]
 80023e4:	edd7 6a04 	vldr	s13, [r7, #16]
 80023e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80023ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	edc3 7a03 	vstr	s15, [r3, #12]
	kalman->P[0][1] -= K[0] * P01_temp;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	ed93 7a04 	vldr	s14, [r3, #16]
 8002400:	edd7 6a04 	vldr	s13, [r7, #16]
 8002404:	edd7 7a06 	vldr	s15, [r7, #24]
 8002408:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800240c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	edc3 7a04 	vstr	s15, [r3, #16]
	kalman->P[1][0] -= K[1] * P00_temp;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	ed93 7a05 	vldr	s14, [r3, #20]
 800241c:	edd7 6a05 	vldr	s13, [r7, #20]
 8002420:	edd7 7a07 	vldr	s15, [r7, #28]
 8002424:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002428:	ee77 7a67 	vsub.f32	s15, s14, s15
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	edc3 7a05 	vstr	s15, [r3, #20]
	kalman->P[1][1] -= K[1] * P01_temp;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	ed93 7a06 	vldr	s14, [r3, #24]
 8002438:	edd7 6a05 	vldr	s13, [r7, #20]
 800243c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002444:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	edc3 7a06 	vstr	s15, [r3, #24]
}
 800244e:	bf00      	nop
 8002450:	eeb0 0a67 	vmov.f32	s0, s15
 8002454:	372c      	adds	r7, #44	@ 0x2c
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	43340000 	.word	0x43340000
 8002464:	43b40000 	.word	0x43b40000
 8002468:	c3340000 	.word	0xc3340000
 800246c:	3ba3d70a 	.word	0x3ba3d70a
 8002470:	3b449ba6 	.word	0x3b449ba6
 8002474:	3c23d70a 	.word	0x3c23d70a
 8002478:	43870000 	.word	0x43870000
 800247c:	c3870000 	.word	0xc3870000

08002480 <HAL_GPIO_EXTI_Callback>:
uint8_t resp[MAX_LENGTH]; // response packet
uint16_t Datalen;
WIFI_Status_t WiFi_Stat; // WiFi status. Should remain WIFI_STATUS_OK if everything goes well


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BUTTON_EXTI13_Pin) {
 800248a:	88fb      	ldrh	r3, [r7, #6]
 800248c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002490:	d115      	bne.n	80024be <HAL_GPIO_EXTI_Callback+0x3e>
		if (button_counter == 0) {
 8002492:	4b10      	ldr	r3, [pc, #64]	@ (80024d4 <HAL_GPIO_EXTI_Callback+0x54>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d108      	bne.n	80024ae <HAL_GPIO_EXTI_Callback+0x2e>
			first_tick = HAL_GetTick();
 800249c:	f004 f8f6 	bl	800668c <HAL_GetTick>
 80024a0:	4603      	mov	r3, r0
 80024a2:	4a0d      	ldr	r2, [pc, #52]	@ (80024d8 <HAL_GPIO_EXTI_Callback+0x58>)
 80024a4:	6013      	str	r3, [r2, #0]
			button_counter = 1;
 80024a6:	4b0b      	ldr	r3, [pc, #44]	@ (80024d4 <HAL_GPIO_EXTI_Callback+0x54>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	701a      	strb	r2, [r3, #0]
 80024ac:	e007      	b.n	80024be <HAL_GPIO_EXTI_Callback+0x3e>
		} else {
			second_tick = HAL_GetTick();
 80024ae:	f004 f8ed 	bl	800668c <HAL_GetTick>
 80024b2:	4603      	mov	r3, r0
 80024b4:	4a09      	ldr	r2, [pc, #36]	@ (80024dc <HAL_GPIO_EXTI_Callback+0x5c>)
 80024b6:	6013      	str	r3, [r2, #0]
			button_counter = 2;
 80024b8:	4b06      	ldr	r3, [pc, #24]	@ (80024d4 <HAL_GPIO_EXTI_Callback+0x54>)
 80024ba:	2202      	movs	r2, #2
 80024bc:	701a      	strb	r2, [r3, #0]
	// 			print_text("Falling detected!\r\n");
	// 			fall_detect = true;
	// 		}
	// 	}
	// }
	switch(GPIO_Pin){
 80024be:	88fb      	ldrh	r3, [r7, #6]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d102      	bne.n	80024ca <HAL_GPIO_EXTI_Callback+0x4a>
	case GPIO_PIN_1:
		SPI_WIFI_ISR();
 80024c4:	f7ff fe50 	bl	8002168 <SPI_WIFI_ISR>
		break;
 80024c8:	bf00      	nop
	}
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	200005d0 	.word	0x200005d0
 80024d8:	200005c8 	.word	0x200005c8
 80024dc:	200005cc 	.word	0x200005cc

080024e0 <SPI3_IRQHandler>:

void SPI3_IRQHandler(void) {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
	HAL_SPI_IRQHandler(&hspi3);
 80024e4:	4802      	ldr	r0, [pc, #8]	@ (80024f0 <SPI3_IRQHandler+0x10>)
 80024e6:	f006 fe6b 	bl	80091c0 <HAL_SPI_IRQHandler>
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	200004cc 	.word	0x200004cc

080024f4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance) {
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	4b07      	ldr	r3, [pc, #28]	@ (8002520 <HAL_UART_RxCpltCallback+0x2c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d107      	bne.n	8002518 <HAL_UART_RxCpltCallback+0x24>
		uart_recv = true;	//can do this since expect only 1 char to be sent
 8002508:	4b06      	ldr	r3, [pc, #24]	@ (8002524 <HAL_UART_RxCpltCallback+0x30>)
 800250a:	2201      	movs	r2, #1
 800250c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, input_buf, 1);
 800250e:	2201      	movs	r2, #1
 8002510:	4905      	ldr	r1, [pc, #20]	@ (8002528 <HAL_UART_RxCpltCallback+0x34>)
 8002512:	4803      	ldr	r0, [pc, #12]	@ (8002520 <HAL_UART_RxCpltCallback+0x2c>)
 8002514:	f008 f978 	bl	800a808 <HAL_UART_Receive_IT>
	}
}
 8002518:	bf00      	nop
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000400 	.word	0x20000400
 8002524:	2000063c 	.word	0x2000063c
 8002528:	200005d4 	.word	0x200005d4

0800252c <main>:

uint8_t LAST_MODE = 0;
uint32_t frame_timer1,frame_timer2;

int main(void) {
 800252c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002530:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 8002534:	af1c      	add	r7, sp, #112	@ 0x70
	HAL_Init();
 8002536:	f004 f845 	bl	80065c4 <HAL_Init>
	SystemClock_Config();
 800253a:	f001 fa1d 	bl	8003978 <SystemClock_Config>

	MX_GPIO_Init();
 800253e:	f001 faf5 	bl	8003b2c <MX_GPIO_Init>
	MX_TIM3_Init();
 8002542:	f001 fa7b 	bl	8003a3c <MX_TIM3_Init>
	UART1_Init();
 8002546:	f001 fb33 	bl	8003bb0 <UART1_Init>
	BSP_LED_Init(LED2);
 800254a:	2000      	movs	r0, #0
 800254c:	f002 fcc8 	bl	8004ee0 <BSP_LED_Init>
	BSP_TSENSOR_Init();
 8002550:	f002 ffac 	bl	80054ac <BSP_TSENSOR_Init>
	BSP_HSENSOR_Init();
 8002554:	f002 ff0a 	bl	800536c <BSP_HSENSOR_Init>
	BSP_PSENSOR_Init();
 8002558:	f002 ff7a 	bl	8005450 <BSP_PSENSOR_Init>
	BSP_ACCELERO_Init();
 800255c:	f002 fe56 	bl	800520c <BSP_ACCELERO_Init>
	BSP_MAGNETO_Init();
 8002560:	f002 ff32 	bl	80053c8 <BSP_MAGNETO_Init>
	BSP_GYRO_Init();
 8002564:	f002 fea8 	bl	80052b8 <BSP_GYRO_Init>
	IMU_calib();
 8002568:	f001 fc4e 	bl	8003e08 <IMU_calib>
	MX_I2C1_Init();
 800256c:	f001 fb80 	bl	8003c70 <MX_I2C1_Init>
	ssd1306_Init();
 8002570:	f003 fd62 	bl	8006038 <ssd1306_Init>
	ACC_EXTI11_Init();
 8002574:	f001 fbe2 	bl	8003d3c <ACC_EXTI11_Init>

	//wifi init
	WiFi_Stat = WIFI_Init(); // if it gets stuck here, you likely did not include EXTI1_IRQHandler() in stm32l4xx_it.c as mentioned above
 8002578:	f002 fbbc 	bl	8004cf4 <WIFI_Init>
 800257c:	4603      	mov	r3, r0
 800257e:	461a      	mov	r2, r3
 8002580:	4ba6      	ldr	r3, [pc, #664]	@ (800281c <main+0x2f0>)
 8002582:	701a      	strb	r2, [r3, #0]
	WiFi_Stat &= WIFI_Connect(WiFi_SSID, WiFi_password, WiFi_security); // joining a WiFi network takes several seconds. Don't be too quick to judge that your program has 'hung' :)
 8002584:	4ba6      	ldr	r3, [pc, #664]	@ (8002820 <main+0x2f4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4aa6      	ldr	r2, [pc, #664]	@ (8002824 <main+0x2f8>)
 800258a:	6811      	ldr	r1, [r2, #0]
 800258c:	2203      	movs	r2, #3
 800258e:	4618      	mov	r0, r3
 8002590:	f002 fbdc 	bl	8004d4c <WIFI_Connect>
 8002594:	4603      	mov	r3, r0
 8002596:	461a      	mov	r2, r3
 8002598:	4ba0      	ldr	r3, [pc, #640]	@ (800281c <main+0x2f0>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	4013      	ands	r3, r2
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	4b9e      	ldr	r3, [pc, #632]	@ (800281c <main+0x2f0>)
 80025a2:	701a      	strb	r2, [r3, #0]
	if(WiFi_Stat!=WIFI_STATUS_OK) while(1); // halt computations if a WiFi connection could not be established.
 80025a4:	4b9d      	ldr	r3, [pc, #628]	@ (800281c <main+0x2f0>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <main+0x84>
 80025ac:	bf00      	nop
 80025ae:	e7fd      	b.n	80025ac <main+0x80>

//	WiFi_Stat = WIFI_Ping(ipaddr, 3, 200); // Optional ping 3 times in 200 ms intervals
	WiFi_Stat = WIFI_OpenClientConnection(1, WIFI_TCP_PROTOCOL, "conn", ipaddr, DEST_PORT, SOURCE_PORT); // Make a TCP connection.
 80025b0:	f240 73ec 	movw	r3, #2028	@ 0x7ec
 80025b4:	f240 42d2 	movw	r2, #1234	@ 0x4d2
 80025b8:	9201      	str	r2, [sp, #4]
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	4b9a      	ldr	r3, [pc, #616]	@ (8002828 <main+0x2fc>)
 80025be:	4a9b      	ldr	r2, [pc, #620]	@ (800282c <main+0x300>)
 80025c0:	2100      	movs	r1, #0
 80025c2:	2001      	movs	r0, #1
 80025c4:	f002 fbe4 	bl	8004d90 <WIFI_OpenClientConnection>
 80025c8:	4603      	mov	r3, r0
 80025ca:	461a      	mov	r2, r3
 80025cc:	4b93      	ldr	r3, [pc, #588]	@ (800281c <main+0x2f0>)
 80025ce:	701a      	strb	r2, [r3, #0]
	// "conn" is just a name and serves no functional purpose
	if(WiFi_Stat!=WIFI_STATUS_OK) while(1); // halt computations if a connection could not be established with the server
 80025d0:	4b92      	ldr	r3, [pc, #584]	@ (800281c <main+0x2f0>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <main+0xb0>
 80025d8:	bf00      	nop
 80025da:	e7fd      	b.n	80025d8 <main+0xac>

	__HAL_TIM_SET_PRESCALER(&htim3, presForFrequency(1000));
 80025dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80025e0:	f002 f8ea 	bl	80047b8 <presForFrequency>
 80025e4:	4602      	mov	r2, r0
 80025e6:	4b92      	ldr	r3, [pc, #584]	@ (8002830 <main+0x304>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	629a      	str	r2, [r3, #40]	@ 0x28

	HAL_UART_Receive_IT(&huart1, input_buf, 1);
 80025ec:	2201      	movs	r2, #1
 80025ee:	4991      	ldr	r1, [pc, #580]	@ (8002834 <main+0x308>)
 80025f0:	4891      	ldr	r0, [pc, #580]	@ (8002838 <main+0x30c>)
 80025f2:	f008 f909 	bl	800a808 <HAL_UART_Receive_IT>

	uint32_t start_tick = HAL_GetTick();
 80025f6:	f004 f849 	bl	800668c <HAL_GetTick>
 80025fa:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
	uint32_t start_tick_emergency = HAL_GetTick();
 80025fe:	f004 f845 	bl	800668c <HAL_GetTick>
 8002602:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
	uint32_t readings_tick = HAL_GetTick();
 8002606:	f004 f841 	bl	800668c <HAL_GetTick>
 800260a:	f8c7 01f4 	str.w	r0, [r7, #500]	@ 0x1f4
	uint32_t display_tick = HAL_GetTick();
 800260e:	f004 f83d 	bl	800668c <HAL_GetTick>
 8002612:	f8c7 01f0 	str.w	r0, [r7, #496]	@ 0x1f0
	uint32_t wifi_tick = HAL_GetTick();
 8002616:	f004 f839 	bl	800668c <HAL_GetTick>
 800261a:	f8c7 01ec 	str.w	r0, [r7, #492]	@ 0x1ec
	struct Warnings warning_ticks={0,0,0,0};
 800261e:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	605a      	str	r2, [r3, #4]
 8002628:	609a      	str	r2, [r3, #8]
 800262a:	60da      	str	r2, [r3, #12]
	char message_print[32];
	sprintf(message_print, "Entering Standard Mode.\r\n");
 800262c:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 8002630:	4982      	ldr	r1, [pc, #520]	@ (800283c <main+0x310>)
 8002632:	4618      	mov	r0, r3
 8002634:	f00a f83c 	bl	800c6b0 <siprintf>
	print_text(message_print);
 8002638:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 800263c:	4618      	mov	r0, r3
 800263e:	f001 fe6d 	bl	800431c <print_text>
	uint16_t seconds_count = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	f8a7 31ea 	strh.w	r3, [r7, #490]	@ 0x1ea
	uint16_t blink_time = 1000;
 8002648:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800264c:	f8a7 31e8 	strh.w	r3, [r7, #488]	@ 0x1e8

	while (1) {
		//wifi
		if(HAL_GetTick()-wifi_tick >= 250) {
 8002650:	f004 f81c 	bl	800668c <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2bf9      	cmp	r3, #249	@ 0xf9
 800265e:	f240 80c6 	bls.w	80027ee <main+0x2c2>
			wifi_tick = HAL_GetTick();
 8002662:	f004 f813 	bl	800668c <HAL_GetTick>
 8002666:	f8c7 01ec 	str.w	r0, [r7, #492]	@ 0x1ec
			sprintf((char*)req, "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
					gyro_data[0], gyro_data[1], gyro_data[2],
 800266a:	4b75      	ldr	r3, [pc, #468]	@ (8002840 <main+0x314>)
 800266c:	681b      	ldr	r3, [r3, #0]
			sprintf((char*)req, "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 800266e:	4618      	mov	r0, r3
 8002670:	f7fd ff6a 	bl	8000548 <__aeabi_f2d>
 8002674:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
					gyro_data[0], gyro_data[1], gyro_data[2],
 8002678:	4b71      	ldr	r3, [pc, #452]	@ (8002840 <main+0x314>)
 800267a:	685b      	ldr	r3, [r3, #4]
			sprintf((char*)req, "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 800267c:	4618      	mov	r0, r3
 800267e:	f7fd ff63 	bl	8000548 <__aeabi_f2d>
 8002682:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
					gyro_data[0], gyro_data[1], gyro_data[2],
 8002686:	4b6e      	ldr	r3, [pc, #440]	@ (8002840 <main+0x314>)
 8002688:	689b      	ldr	r3, [r3, #8]
			sprintf((char*)req, "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 800268a:	4618      	mov	r0, r3
 800268c:	f7fd ff5c 	bl	8000548 <__aeabi_f2d>
 8002690:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
					accel_data[0], accel_data[1], accel_data[2],
 8002694:	4b6b      	ldr	r3, [pc, #428]	@ (8002844 <main+0x318>)
 8002696:	681b      	ldr	r3, [r3, #0]
			sprintf((char*)req, "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 8002698:	4618      	mov	r0, r3
 800269a:	f7fd ff55 	bl	8000548 <__aeabi_f2d>
 800269e:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
					accel_data[0], accel_data[1], accel_data[2],
 80026a2:	4b68      	ldr	r3, [pc, #416]	@ (8002844 <main+0x318>)
 80026a4:	685b      	ldr	r3, [r3, #4]
			sprintf((char*)req, "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fd ff4e 	bl	8000548 <__aeabi_f2d>
 80026ac:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
					accel_data[0], accel_data[1], accel_data[2],
 80026b0:	4b64      	ldr	r3, [pc, #400]	@ (8002844 <main+0x318>)
 80026b2:	689b      	ldr	r3, [r3, #8]
			sprintf((char*)req, "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fd ff47 	bl	8000548 <__aeabi_f2d>
 80026ba:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
					mag_data[0], mag_data[1], mag_data[2],
 80026be:	4b62      	ldr	r3, [pc, #392]	@ (8002848 <main+0x31c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
			sprintf((char*)req, "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fd ff40 	bl	8000548 <__aeabi_f2d>
 80026c8:	e9c7 0108 	strd	r0, r1, [r7, #32]
					mag_data[0], mag_data[1], mag_data[2],
 80026cc:	4b5e      	ldr	r3, [pc, #376]	@ (8002848 <main+0x31c>)
 80026ce:	685b      	ldr	r3, [r3, #4]
			sprintf((char*)req, "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fd ff39 	bl	8000548 <__aeabi_f2d>
 80026d6:	e9c7 0106 	strd	r0, r1, [r7, #24]
					mag_data[0], mag_data[1], mag_data[2],
 80026da:	4b5b      	ldr	r3, [pc, #364]	@ (8002848 <main+0x31c>)
 80026dc:	689b      	ldr	r3, [r3, #8]
			sprintf((char*)req, "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fd ff32 	bl	8000548 <__aeabi_f2d>
 80026e4:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80026e8:	4b58      	ldr	r3, [pc, #352]	@ (800284c <main+0x320>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7fd ff2b 	bl	8000548 <__aeabi_f2d>
 80026f2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80026f6:	4b56      	ldr	r3, [pc, #344]	@ (8002850 <main+0x324>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fd ff24 	bl	8000548 <__aeabi_f2d>
 8002700:	e9c7 0100 	strd	r0, r1, [r7]
 8002704:	4b53      	ldr	r3, [pc, #332]	@ (8002854 <main+0x328>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f7fd ff1d 	bl	8000548 <__aeabi_f2d>
 800270e:	4682      	mov	sl, r0
 8002710:	468b      	mov	fp, r1
					pressure, humidity, temp,
					kalman_rpy[0], kalman_rpy[1], kalman_rpy[2]);
 8002712:	4b51      	ldr	r3, [pc, #324]	@ (8002858 <main+0x32c>)
 8002714:	681b      	ldr	r3, [r3, #0]
			sprintf((char*)req, "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 8002716:	4618      	mov	r0, r3
 8002718:	f7fd ff16 	bl	8000548 <__aeabi_f2d>
 800271c:	4680      	mov	r8, r0
 800271e:	4689      	mov	r9, r1
					kalman_rpy[0], kalman_rpy[1], kalman_rpy[2]);
 8002720:	4b4d      	ldr	r3, [pc, #308]	@ (8002858 <main+0x32c>)
 8002722:	685b      	ldr	r3, [r3, #4]
			sprintf((char*)req, "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 8002724:	4618      	mov	r0, r3
 8002726:	f7fd ff0f 	bl	8000548 <__aeabi_f2d>
 800272a:	4604      	mov	r4, r0
 800272c:	460d      	mov	r5, r1
					kalman_rpy[0], kalman_rpy[1], kalman_rpy[2]);
 800272e:	4b4a      	ldr	r3, [pc, #296]	@ (8002858 <main+0x32c>)
 8002730:	689b      	ldr	r3, [r3, #8]
			sprintf((char*)req, "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 8002732:	4618      	mov	r0, r3
 8002734:	f7fd ff08 	bl	8000548 <__aeabi_f2d>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	e9cd 231a 	strd	r2, r3, [sp, #104]	@ 0x68
 8002740:	e9cd 4518 	strd	r4, r5, [sp, #96]	@ 0x60
 8002744:	e9cd 8916 	strd	r8, r9, [sp, #88]	@ 0x58
 8002748:	e9cd ab14 	strd	sl, fp, [sp, #80]	@ 0x50
 800274c:	ed97 7b00 	vldr	d7, [r7]
 8002750:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 8002754:	ed97 7b02 	vldr	d7, [r7, #8]
 8002758:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 800275c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002760:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8002764:	ed97 7b06 	vldr	d7, [r7, #24]
 8002768:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800276c:	ed97 7b08 	vldr	d7, [r7, #32]
 8002770:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8002774:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8002778:	ed8d 7b08 	vstr	d7, [sp, #32]
 800277c:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8002780:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002784:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8002788:	ed8d 7b04 	vstr	d7, [sp, #16]
 800278c:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8002790:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002794:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8002798:	ed8d 7b00 	vstr	d7, [sp]
 800279c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80027a0:	492e      	ldr	r1, [pc, #184]	@ (800285c <main+0x330>)
 80027a2:	482f      	ldr	r0, [pc, #188]	@ (8002860 <main+0x334>)
 80027a4:	f009 ff84 	bl	800c6b0 <siprintf>
			WiFi_Stat = WIFI_SendData(1, req, (uint16_t)strlen((char*)req), &Datalen,WIFI_WRITE_TIMEOUT);
 80027a8:	482d      	ldr	r0, [pc, #180]	@ (8002860 <main+0x334>)
 80027aa:	f7fd fd61 	bl	8000270 <strlen>
 80027ae:	4603      	mov	r3, r0
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	2364      	movs	r3, #100	@ 0x64
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002864 <main+0x338>)
 80027b8:	4929      	ldr	r1, [pc, #164]	@ (8002860 <main+0x334>)
 80027ba:	2001      	movs	r0, #1
 80027bc:	f002 fb22 	bl	8004e04 <WIFI_SendData>
 80027c0:	4603      	mov	r3, r0
 80027c2:	461a      	mov	r2, r3
 80027c4:	4b15      	ldr	r3, [pc, #84]	@ (800281c <main+0x2f0>)
 80027c6:	701a      	strb	r2, [r3, #0]
			WiFi_Stat = WIFI_ReceiveData(1, resp, MAX_LENGTH, &Datalen, WIFI_READ_TIMEOUT); // Get response from the server.
 80027c8:	2364      	movs	r3, #100	@ 0x64
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	4b25      	ldr	r3, [pc, #148]	@ (8002864 <main+0x338>)
 80027ce:	2264      	movs	r2, #100	@ 0x64
 80027d0:	4925      	ldr	r1, [pc, #148]	@ (8002868 <main+0x33c>)
 80027d2:	2001      	movs	r0, #1
 80027d4:	f002 fb38 	bl	8004e48 <WIFI_ReceiveData>
 80027d8:	4603      	mov	r3, r0
 80027da:	461a      	mov	r2, r3
 80027dc:	4b0f      	ldr	r3, [pc, #60]	@ (800281c <main+0x2f0>)
 80027de:	701a      	strb	r2, [r3, #0]
			// char txt[10];
			// sprintf(txt, "%d\n", atoi(resp));
			// print_text(txt);
			MODE = atoi(resp);
 80027e0:	4821      	ldr	r0, [pc, #132]	@ (8002868 <main+0x33c>)
 80027e2:	f009 f953 	bl	800ba8c <atoi>
 80027e6:	4603      	mov	r3, r0
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	4b20      	ldr	r3, [pc, #128]	@ (800286c <main+0x340>)
 80027ec:	701a      	strb	r2, [r3, #0]
		}

		if (LAST_MODE != MODE) {
 80027ee:	4b20      	ldr	r3, [pc, #128]	@ (8002870 <main+0x344>)
 80027f0:	781a      	ldrb	r2, [r3, #0]
 80027f2:	4b1e      	ldr	r3, [pc, #120]	@ (800286c <main+0x340>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d002      	beq.n	8002800 <main+0x2d4>
			ssd1306_Fill(Black);
 80027fa:	2000      	movs	r0, #0
 80027fc:	f003 fc86 	bl	800610c <ssd1306_Fill>
		}

		//asynchronous non-blocking buzzer handler
		if (start_beep) {	//will get triggered once only
 8002800:	4b1c      	ldr	r3, [pc, #112]	@ (8002874 <main+0x348>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d039      	beq.n	800287c <main+0x350>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002808:	2100      	movs	r1, #0
 800280a:	4809      	ldr	r0, [pc, #36]	@ (8002830 <main+0x304>)
 800280c:	f006 ffc0 	bl	8009790 <HAL_TIM_PWM_Start>
			beep_start_tick = HAL_GetTick();
 8002810:	f003 ff3c 	bl	800668c <HAL_GetTick>
 8002814:	4603      	mov	r3, r0
 8002816:	4a18      	ldr	r2, [pc, #96]	@ (8002878 <main+0x34c>)
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	e03b      	b.n	8002894 <main+0x368>
 800281c:	20000732 	.word	0x20000732
 8002820:	2000007c 	.word	0x2000007c
 8002824:	20000080 	.word	0x20000080
 8002828:	20000084 	.word	0x20000084
 800282c:	080108c4 	.word	0x080108c4
 8002830:	20000530 	.word	0x20000530
 8002834:	200005d4 	.word	0x200005d4
 8002838:	20000400 	.word	0x20000400
 800283c:	080108cc 	.word	0x080108cc
 8002840:	200005e4 	.word	0x200005e4
 8002844:	200005f0 	.word	0x200005f0
 8002848:	200005fc 	.word	0x200005fc
 800284c:	200005e0 	.word	0x200005e0
 8002850:	200005dc 	.word	0x200005dc
 8002854:	200005d8 	.word	0x200005d8
 8002858:	20000630 	.word	0x20000630
 800285c:	080108e8 	.word	0x080108e8
 8002860:	20000668 	.word	0x20000668
 8002864:	20000730 	.word	0x20000730
 8002868:	200006cc 	.word	0x200006cc
 800286c:	200005c4 	.word	0x200005c4
 8002870:	20000733 	.word	0x20000733
 8002874:	20000644 	.word	0x20000644
 8002878:	20000648 	.word	0x20000648
		} else {
			if (HAL_GetTick() - beep_start_tick > 20) {
 800287c:	f003 ff06 	bl	800668c <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	4b8e      	ldr	r3, [pc, #568]	@ (8002abc <main+0x590>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b14      	cmp	r3, #20
 800288a:	d903      	bls.n	8002894 <main+0x368>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800288c:	2100      	movs	r1, #0
 800288e:	488c      	ldr	r0, [pc, #560]	@ (8002ac0 <main+0x594>)
 8002890:	f006 ffd6 	bl	8009840 <HAL_TIM_PWM_Stop>
			}
		}

		//asynchronous uart receive
		if (uart_recv) {
 8002894:	4b8b      	ldr	r3, [pc, #556]	@ (8002ac4 <main+0x598>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d018      	beq.n	80028d0 <main+0x3a4>
			MODE = atoi(input_buf);
 800289e:	488a      	ldr	r0, [pc, #552]	@ (8002ac8 <main+0x59c>)
 80028a0:	f009 f8f4 	bl	800ba8c <atoi>
 80028a4:	4603      	mov	r3, r0
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	4b88      	ldr	r3, [pc, #544]	@ (8002acc <main+0x5a0>)
 80028aa:	701a      	strb	r2, [r3, #0]
			char msg[20];
			sprintf(msg,"Received: %s\r\n\r\n", input_buf);
 80028ac:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80028b0:	4a85      	ldr	r2, [pc, #532]	@ (8002ac8 <main+0x59c>)
 80028b2:	4987      	ldr	r1, [pc, #540]	@ (8002ad0 <main+0x5a4>)
 80028b4:	4618      	mov	r0, r3
 80028b6:	f009 fefb 	bl	800c6b0 <siprintf>
			print_text(msg);
 80028ba:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80028be:	4618      	mov	r0, r3
 80028c0:	f001 fd2c 	bl	800431c <print_text>
			ssd1306_Fill(Black);
 80028c4:	2000      	movs	r0, #0
 80028c6:	f003 fc21 	bl	800610c <ssd1306_Fill>
			uart_recv = false;
 80028ca:	4b7e      	ldr	r3, [pc, #504]	@ (8002ac4 <main+0x598>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	701a      	strb	r2, [r3, #0]
		}

		//asynchronous reading of sensors
		if (HAL_GetTick() - readings_tick >= (dt*1000)) {
 80028d0:	f003 fedc 	bl	800668c <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	ee07 3a90 	vmov	s15, r3
 80028e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028e4:	4b7b      	ldr	r3, [pc, #492]	@ (8002ad4 <main+0x5a8>)
 80028e6:	edd3 7a00 	vldr	s15, [r3]
 80028ea:	eddf 6a7b 	vldr	s13, [pc, #492]	@ 8002ad8 <main+0x5ac>
 80028ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028fa:	db72      	blt.n	80029e2 <main+0x4b6>
			readings_tick = HAL_GetTick();
 80028fc:	f003 fec6 	bl	800668c <HAL_GetTick>
 8002900:	f8c7 01f4 	str.w	r0, [r7, #500]	@ 0x1f4
			get_imu_readings();
 8002904:	f001 fc32 	bl	800416c <get_imu_readings>
			get_pht_readings();
 8002908:	f001 fc10 	bl	800412c <get_pht_readings>

			kalman_update_angle(&kalman_roll, rpy[0], gyro_data[0], dt);
 800290c:	4b73      	ldr	r3, [pc, #460]	@ (8002adc <main+0x5b0>)
 800290e:	edd3 7a00 	vldr	s15, [r3]
 8002912:	4b73      	ldr	r3, [pc, #460]	@ (8002ae0 <main+0x5b4>)
 8002914:	ed93 7a00 	vldr	s14, [r3]
 8002918:	4b6e      	ldr	r3, [pc, #440]	@ (8002ad4 <main+0x5a8>)
 800291a:	edd3 6a00 	vldr	s13, [r3]
 800291e:	eeb0 1a66 	vmov.f32	s2, s13
 8002922:	eef0 0a47 	vmov.f32	s1, s14
 8002926:	eeb0 0a67 	vmov.f32	s0, s15
 800292a:	486e      	ldr	r0, [pc, #440]	@ (8002ae4 <main+0x5b8>)
 800292c:	f7ff fc2c 	bl	8002188 <kalman_update_angle>
			kalman_update_angle(&kalman_pitch, rpy[1], gyro_data[1], dt);
 8002930:	4b6a      	ldr	r3, [pc, #424]	@ (8002adc <main+0x5b0>)
 8002932:	edd3 7a01 	vldr	s15, [r3, #4]
 8002936:	4b6a      	ldr	r3, [pc, #424]	@ (8002ae0 <main+0x5b4>)
 8002938:	ed93 7a01 	vldr	s14, [r3, #4]
 800293c:	4b65      	ldr	r3, [pc, #404]	@ (8002ad4 <main+0x5a8>)
 800293e:	edd3 6a00 	vldr	s13, [r3]
 8002942:	eeb0 1a66 	vmov.f32	s2, s13
 8002946:	eef0 0a47 	vmov.f32	s1, s14
 800294a:	eeb0 0a67 	vmov.f32	s0, s15
 800294e:	4866      	ldr	r0, [pc, #408]	@ (8002ae8 <main+0x5bc>)
 8002950:	f7ff fc1a 	bl	8002188 <kalman_update_angle>
			rpy[2] = atan2(mag_data[1],mag_data[0])*RAD_TO_DEG;
 8002954:	4b65      	ldr	r3, [pc, #404]	@ (8002aec <main+0x5c0>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	4618      	mov	r0, r3
 800295a:	f7fd fdf5 	bl	8000548 <__aeabi_f2d>
 800295e:	4604      	mov	r4, r0
 8002960:	460d      	mov	r5, r1
 8002962:	4b62      	ldr	r3, [pc, #392]	@ (8002aec <main+0x5c0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f7fd fdee 	bl	8000548 <__aeabi_f2d>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	ec43 2b11 	vmov	d1, r2, r3
 8002974:	ec45 4b10 	vmov	d0, r4, r5
 8002978:	f00c f85e 	bl	800ea38 <atan2>
 800297c:	ec55 4b10 	vmov	r4, r5, d0
 8002980:	4b5b      	ldr	r3, [pc, #364]	@ (8002af0 <main+0x5c4>)
 8002982:	4618      	mov	r0, r3
 8002984:	f7fd fde0 	bl	8000548 <__aeabi_f2d>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4620      	mov	r0, r4
 800298e:	4629      	mov	r1, r5
 8002990:	f7fd fe32 	bl	80005f8 <__aeabi_dmul>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4610      	mov	r0, r2
 800299a:	4619      	mov	r1, r3
 800299c:	f7fe f904 	bl	8000ba8 <__aeabi_d2f>
 80029a0:	4603      	mov	r3, r0
 80029a2:	4a4e      	ldr	r2, [pc, #312]	@ (8002adc <main+0x5b0>)
 80029a4:	6093      	str	r3, [r2, #8]
			kalman_update_angle(&kalman_yaw, rpy[2], gyro_data[2], dt);
 80029a6:	4b4d      	ldr	r3, [pc, #308]	@ (8002adc <main+0x5b0>)
 80029a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80029ac:	4b4c      	ldr	r3, [pc, #304]	@ (8002ae0 <main+0x5b4>)
 80029ae:	ed93 7a02 	vldr	s14, [r3, #8]
 80029b2:	4b48      	ldr	r3, [pc, #288]	@ (8002ad4 <main+0x5a8>)
 80029b4:	edd3 6a00 	vldr	s13, [r3]
 80029b8:	eeb0 1a66 	vmov.f32	s2, s13
 80029bc:	eef0 0a47 	vmov.f32	s1, s14
 80029c0:	eeb0 0a67 	vmov.f32	s0, s15
 80029c4:	484b      	ldr	r0, [pc, #300]	@ (8002af4 <main+0x5c8>)
 80029c6:	f7ff fbdf 	bl	8002188 <kalman_update_angle>
			kalman_rpy[0] = kalman_roll.angle;
 80029ca:	4b46      	ldr	r3, [pc, #280]	@ (8002ae4 <main+0x5b8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a4a      	ldr	r2, [pc, #296]	@ (8002af8 <main+0x5cc>)
 80029d0:	6013      	str	r3, [r2, #0]
			kalman_rpy[1] = kalman_pitch.angle;
 80029d2:	4b45      	ldr	r3, [pc, #276]	@ (8002ae8 <main+0x5bc>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a48      	ldr	r2, [pc, #288]	@ (8002af8 <main+0x5cc>)
 80029d8:	6053      	str	r3, [r2, #4]
			kalman_rpy[2] = kalman_yaw.angle;
 80029da:	4b46      	ldr	r3, [pc, #280]	@ (8002af4 <main+0x5c8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a46      	ldr	r2, [pc, #280]	@ (8002af8 <main+0x5cc>)
 80029e0:	6093      	str	r3, [r2, #8]
		}

		/* STANDARD MODE */
		if (MODE == 0) {
 80029e2:	4b3a      	ldr	r3, [pc, #232]	@ (8002acc <main+0x5a0>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f040 8098 	bne.w	8002b1c <main+0x5f0>
			ssd1306_SetCursor(5, 5);
 80029ec:	2105      	movs	r1, #5
 80029ee:	2005      	movs	r0, #5
 80029f0:	f003 fcd8 	bl	80063a4 <ssd1306_SetCursor>
			char message_print[32];
			sprintf(message_print, "Steps: %d", step);
 80029f4:	4b41      	ldr	r3, [pc, #260]	@ (8002afc <main+0x5d0>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80029fc:	4940      	ldr	r1, [pc, #256]	@ (8002b00 <main+0x5d4>)
 80029fe:	4618      	mov	r0, r3
 8002a00:	f009 fe56 	bl	800c6b0 <siprintf>
			ssd1306_WriteString(message_print, Font_7x10, White);
 8002a04:	4b3f      	ldr	r3, [pc, #252]	@ (8002b04 <main+0x5d8>)
 8002a06:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	9200      	str	r2, [sp, #0]
 8002a0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a10:	f003 fca2 	bl	8006358 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8002a14:	f003 fb92 	bl	800613c <ssd1306_UpdateScreen>
			dt = 0.05;	//sample at 1 hz
 8002a18:	4b2e      	ldr	r3, [pc, #184]	@ (8002ad4 <main+0x5a8>)
 8002a1a:	4a3b      	ldr	r2, [pc, #236]	@ (8002b08 <main+0x5dc>)
 8002a1c:	601a      	str	r2, [r3, #0]
			if (HAL_GetTick() - start_tick >= 1000) { // print out readings every 1 second
 8002a1e:	f003 fe35 	bl	800668c <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a2e:	d30d      	bcc.n	8002a4c <main+0x520>
				start_tick = HAL_GetTick();
 8002a30:	f003 fe2c 	bl	800668c <HAL_GetTick>
 8002a34:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
				seconds_count++;
 8002a38:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	f8a7 31ea 	strh.w	r3, [r7, #490]	@ 0x1ea
				print_readings(seconds_count);
 8002a42:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 8002a46:	4618      	mov	r0, r3
 8002a48:	f001 fc7e 	bl	8004348 <print_readings>
			}
			if (button_counter == 2) {
 8002a4c:	4b2f      	ldr	r3, [pc, #188]	@ (8002b0c <main+0x5e0>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d11d      	bne.n	8002a92 <main+0x566>
				if (second_tick - first_tick <= 1000) { // button pressed twice within 1s, change to MODE=1
 8002a56:	4b2e      	ldr	r3, [pc, #184]	@ (8002b10 <main+0x5e4>)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	4b2e      	ldr	r3, [pc, #184]	@ (8002b14 <main+0x5e8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a64:	d810      	bhi.n	8002a88 <main+0x55c>
					char message_print[32];
					sprintf(message_print, "Entering Emergency Mode.\r\n");
 8002a66:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002a6a:	492b      	ldr	r1, [pc, #172]	@ (8002b18 <main+0x5ec>)
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f009 fe1f 	bl	800c6b0 <siprintf>
					print_text(message_print);
 8002a72:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002a76:	4618      	mov	r0, r3
 8002a78:	f001 fc50 	bl	800431c <print_text>
					ssd1306_Fill(Black);
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	f003 fb45 	bl	800610c <ssd1306_Fill>
					MODE = 1;
 8002a82:	4b12      	ldr	r3, [pc, #72]	@ (8002acc <main+0x5a0>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	701a      	strb	r2, [r3, #0]
				}
				button_counter = 0;
 8002a88:	4b20      	ldr	r3, [pc, #128]	@ (8002b0c <main+0x5e0>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	701a      	strb	r2, [r3, #0]
 8002a8e:	f000 bf56 	b.w	800393e <main+0x1412>
			} else if (button_counter == 1 && HAL_GetTick() - first_tick > 1000) {
 8002a92:	4b1e      	ldr	r3, [pc, #120]	@ (8002b0c <main+0x5e0>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	f040 8750 	bne.w	800393e <main+0x1412>
 8002a9e:	f003 fdf5 	bl	800668c <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b14 <main+0x5e8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002aae:	f240 8746 	bls.w	800393e <main+0x1412>
				button_counter= 0;	//reset counter if not pressed again after 1 sec
 8002ab2:	4b16      	ldr	r3, [pc, #88]	@ (8002b0c <main+0x5e0>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	701a      	strb	r2, [r3, #0]
 8002ab8:	f000 bf41 	b.w	800393e <main+0x1412>
 8002abc:	20000648 	.word	0x20000648
 8002ac0:	20000530 	.word	0x20000530
 8002ac4:	2000063c 	.word	0x2000063c
 8002ac8:	200005d4 	.word	0x200005d4
 8002acc:	200005c4 	.word	0x200005c4
 8002ad0:	08010934 	.word	0x08010934
 8002ad4:	20000078 	.word	0x20000078
 8002ad8:	447a0000 	.word	0x447a0000
 8002adc:	20000624 	.word	0x20000624
 8002ae0:	200005e4 	.word	0x200005e4
 8002ae4:	20000570 	.word	0x20000570
 8002ae8:	2000058c 	.word	0x2000058c
 8002aec:	200005fc 	.word	0x200005fc
 8002af0:	42652ee1 	.word	0x42652ee1
 8002af4:	200005a8 	.word	0x200005a8
 8002af8:	20000630 	.word	0x20000630
 8002afc:	20000664 	.word	0x20000664
 8002b00:	08010948 	.word	0x08010948
 8002b04:	080128f0 	.word	0x080128f0
 8002b08:	3d4ccccd 	.word	0x3d4ccccd
 8002b0c:	200005d0 	.word	0x200005d0
 8002b10:	200005cc 	.word	0x200005cc
 8002b14:	200005c8 	.word	0x200005c8
 8002b18:	08010954 	.word	0x08010954
			}
		}
		/* EMERGENCY MODE */
		else if (MODE == 1){
 8002b1c:	4b59      	ldr	r3, [pc, #356]	@ (8002c84 <main+0x758>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	f040 8430 	bne.w	8003386 <main+0xe5a>
			dt = 0.05; //sample at 20hz
 8002b26:	4b58      	ldr	r3, [pc, #352]	@ (8002c88 <main+0x75c>)
 8002b28:	4a58      	ldr	r2, [pc, #352]	@ (8002c8c <main+0x760>)
 8002b2a:	601a      	str	r2, [r3, #0]

			/* LED2 blinks at 1hz, 2hz or 3hz */
			if (HAL_GetTick() - start_tick >= blink_time) {
 8002b2c:	f003 fdae 	bl	800668c <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002b36:	1ad2      	subs	r2, r2, r3
 8002b38:	f8b7 31e8 	ldrh.w	r3, [r7, #488]	@ 0x1e8
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d306      	bcc.n	8002b4e <main+0x622>
				start_tick = HAL_GetTick();
 8002b40:	f003 fda4 	bl	800668c <HAL_GetTick>
 8002b44:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
				BSP_LED_Toggle(LED2);
 8002b48:	2000      	movs	r0, #0
 8002b4a:	f002 f9f9 	bl	8004f40 <BSP_LED_Toggle>
			}

			// check abnormal movement
			float gyro_magnitude = gyro_data[0]*gyro_data[0] + gyro_data[1]*gyro_data[1]+ gyro_data[2]*gyro_data[2];
 8002b4e:	4b50      	ldr	r3, [pc, #320]	@ (8002c90 <main+0x764>)
 8002b50:	ed93 7a00 	vldr	s14, [r3]
 8002b54:	4b4e      	ldr	r3, [pc, #312]	@ (8002c90 <main+0x764>)
 8002b56:	edd3 7a00 	vldr	s15, [r3]
 8002b5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b5e:	4b4c      	ldr	r3, [pc, #304]	@ (8002c90 <main+0x764>)
 8002b60:	edd3 6a01 	vldr	s13, [r3, #4]
 8002b64:	4b4a      	ldr	r3, [pc, #296]	@ (8002c90 <main+0x764>)
 8002b66:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b72:	4b47      	ldr	r3, [pc, #284]	@ (8002c90 <main+0x764>)
 8002b74:	edd3 6a02 	vldr	s13, [r3, #8]
 8002b78:	4b45      	ldr	r3, [pc, #276]	@ (8002c90 <main+0x764>)
 8002b7a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b86:	edc7 7a6e 	vstr	s15, [r7, #440]	@ 0x1b8
			if(gyro_magnitude>=GYRO_THRESHOLD_SQUARED) {
 8002b8a:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8002c94 <main+0x768>
 8002b8e:	edd7 7a6e 	vldr	s15, [r7, #440]	@ 0x1b8
 8002b92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9a:	db0e      	blt.n	8002bba <main+0x68e>
				if (!sudden_move_detect) {
 8002b9c:	4b3e      	ldr	r3, [pc, #248]	@ (8002c98 <main+0x76c>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	f083 0301 	eor.w	r3, r3, #1
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d007      	beq.n	8002bba <main+0x68e>
					sudden_move_detect = true;
 8002baa:	4b3b      	ldr	r3, [pc, #236]	@ (8002c98 <main+0x76c>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	701a      	strb	r2, [r3, #0]
					sudden_move_tick = HAL_GetTick();
 8002bb0:	f003 fd6c 	bl	800668c <HAL_GetTick>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	4a39      	ldr	r2, [pc, #228]	@ (8002c9c <main+0x770>)
 8002bb8:	6013      	str	r3, [r2, #0]
				}
			}

			// check improper posture (mag can only give yaw, so use yaw)
			float yaw = atan2(mag_data[1],mag_data[0])*RAD_TO_DEG;
 8002bba:	4b39      	ldr	r3, [pc, #228]	@ (8002ca0 <main+0x774>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fd fcc2 	bl	8000548 <__aeabi_f2d>
 8002bc4:	4604      	mov	r4, r0
 8002bc6:	460d      	mov	r5, r1
 8002bc8:	4b35      	ldr	r3, [pc, #212]	@ (8002ca0 <main+0x774>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fd fcbb 	bl	8000548 <__aeabi_f2d>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	ec43 2b11 	vmov	d1, r2, r3
 8002bda:	ec45 4b10 	vmov	d0, r4, r5
 8002bde:	f00b ff2b 	bl	800ea38 <atan2>
 8002be2:	ec55 4b10 	vmov	r4, r5, d0
 8002be6:	4b2f      	ldr	r3, [pc, #188]	@ (8002ca4 <main+0x778>)
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fd fcad 	bl	8000548 <__aeabi_f2d>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4620      	mov	r0, r4
 8002bf4:	4629      	mov	r1, r5
 8002bf6:	f7fd fcff 	bl	80005f8 <__aeabi_dmul>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4610      	mov	r0, r2
 8002c00:	4619      	mov	r1, r3
 8002c02:	f7fd ffd1 	bl	8000ba8 <__aeabi_d2f>
 8002c06:	4603      	mov	r3, r0
 8002c08:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
			float error = mod(yaw-yaw_offset, 360);
 8002c0c:	4b26      	ldr	r3, [pc, #152]	@ (8002ca8 <main+0x77c>)
 8002c0e:	edd3 7a00 	vldr	s15, [r3]
 8002c12:	ed97 7a6d 	vldr	s14, [r7, #436]	@ 0x1b4
 8002c16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c1a:	eddf 0a24 	vldr	s1, [pc, #144]	@ 8002cac <main+0x780>
 8002c1e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c22:	f001 fcab 	bl	800457c <mod>
 8002c26:	ed87 0a79 	vstr	s0, [r7, #484]	@ 0x1e4
			if (error > 180) error -= 360;
 8002c2a:	edd7 7a79 	vldr	s15, [r7, #484]	@ 0x1e4
 8002c2e:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8002cb0 <main+0x784>
 8002c32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3a:	dd07      	ble.n	8002c4c <main+0x720>
 8002c3c:	edd7 7a79 	vldr	s15, [r7, #484]	@ 0x1e4
 8002c40:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002cac <main+0x780>
 8002c44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c48:	edc7 7a79 	vstr	s15, [r7, #484]	@ 0x1e4
			if(fabs(error) > MAG_THRESHOLD) {
 8002c4c:	edd7 7a79 	vldr	s15, [r7, #484]	@ 0x1e4
 8002c50:	eef0 7ae7 	vabs.f32	s15, s15
 8002c54:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002cb4 <main+0x788>
 8002c58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c60:	dd40      	ble.n	8002ce4 <main+0x7b8>
				if (!posture_detect_first) {
 8002c62:	4b15      	ldr	r3, [pc, #84]	@ (8002cb8 <main+0x78c>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	f083 0301 	eor.w	r3, r3, #1
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d027      	beq.n	8002cc0 <main+0x794>
					posture_detect_first = true;
 8002c70:	4b11      	ldr	r3, [pc, #68]	@ (8002cb8 <main+0x78c>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	701a      	strb	r2, [r3, #0]
					posture_first_tick = HAL_GetTick();
 8002c76:	f003 fd09 	bl	800668c <HAL_GetTick>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	4a0f      	ldr	r2, [pc, #60]	@ (8002cbc <main+0x790>)
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	e030      	b.n	8002ce4 <main+0x7b8>
 8002c82:	bf00      	nop
 8002c84:	200005c4 	.word	0x200005c4
 8002c88:	20000078 	.word	0x20000078
 8002c8c:	3d4ccccd 	.word	0x3d4ccccd
 8002c90:	200005e4 	.word	0x200005e4
 8002c94:	47afc800 	.word	0x47afc800
 8002c98:	2000063e 	.word	0x2000063e
 8002c9c:	2000064c 	.word	0x2000064c
 8002ca0:	200005fc 	.word	0x200005fc
 8002ca4:	42652ee1 	.word	0x42652ee1
 8002ca8:	20000620 	.word	0x20000620
 8002cac:	43b40000 	.word	0x43b40000
 8002cb0:	43340000 	.word	0x43340000
 8002cb4:	42b40000 	.word	0x42b40000
 8002cb8:	2000063f 	.word	0x2000063f
 8002cbc:	20000654 	.word	0x20000654
				} else {	//initial improper posture detected
					if (HAL_GetTick() - posture_first_tick > 3000) {	//only consider improper posture after 5 secs continuous
 8002cc0:	f003 fce4 	bl	800668c <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	4bbe      	ldr	r3, [pc, #760]	@ (8002fc0 <main+0xa94>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d907      	bls.n	8002ce4 <main+0x7b8>
						posture_detect_second = true;
 8002cd4:	4bbb      	ldr	r3, [pc, #748]	@ (8002fc4 <main+0xa98>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	701a      	strb	r2, [r3, #0]
						posture_second_tick = HAL_GetTick();
 8002cda:	f003 fcd7 	bl	800668c <HAL_GetTick>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	4ab9      	ldr	r2, [pc, #740]	@ (8002fc8 <main+0xa9c>)
 8002ce2:	6013      	str	r3, [r2, #0]
					}
				}
			}

			//check fever
			if(temp >= TEMP_THRESHOLD) {
 8002ce4:	4bb9      	ldr	r3, [pc, #740]	@ (8002fcc <main+0xaa0>)
 8002ce6:	edd3 7a00 	vldr	s15, [r3]
 8002cea:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002cee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf6:	db07      	blt.n	8002d08 <main+0x7dc>
				fever_detect = true;
 8002cf8:	4bb5      	ldr	r3, [pc, #724]	@ (8002fd0 <main+0xaa4>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	701a      	strb	r2, [r3, #0]
				fever_tick = HAL_GetTick();
 8002cfe:	f003 fcc5 	bl	800668c <HAL_GetTick>
 8002d02:	4603      	mov	r3, r0
 8002d04:	4ab3      	ldr	r2, [pc, #716]	@ (8002fd4 <main+0xaa8>)
 8002d06:	6013      	str	r3, [r2, #0]
			}

			flags_detect = (fall_detect<<3) | (sudden_move_detect<<2) | (fever_detect << 1) | posture_detect_second;
 8002d08:	4bb3      	ldr	r3, [pc, #716]	@ (8002fd8 <main+0xaac>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	b25a      	sxtb	r2, r3
 8002d12:	4bb2      	ldr	r3, [pc, #712]	@ (8002fdc <main+0xab0>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	b25b      	sxtb	r3, r3
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	b25a      	sxtb	r2, r3
 8002d1e:	4bac      	ldr	r3, [pc, #688]	@ (8002fd0 <main+0xaa4>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	b25b      	sxtb	r3, r3
 8002d26:	4313      	orrs	r3, r2
 8002d28:	b25a      	sxtb	r2, r3
 8002d2a:	4ba6      	ldr	r3, [pc, #664]	@ (8002fc4 <main+0xa98>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	b25b      	sxtb	r3, r3
 8002d30:	4313      	orrs	r3, r2
 8002d32:	b25b      	sxtb	r3, r3
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	4baa      	ldr	r3, [pc, #680]	@ (8002fe0 <main+0xab4>)
 8002d38:	701a      	strb	r2, [r3, #0]

			// warnings handler to OLED & UART
			// OLED only updates for lower priority if its the only one activated
			/* Fall display takes priority */
			if (fall_detect) {
 8002d3a:	4ba7      	ldr	r3, [pc, #668]	@ (8002fd8 <main+0xaac>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d066      	beq.n	8002e12 <main+0x8e6>
				blink_time = 500;
 8002d44:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002d48:	f8a7 31e8 	strh.w	r3, [r7, #488]	@ 0x1e8
				if (HAL_GetTick()-warning_ticks.fall > warning_dt.fall) {	//print at same rate as blink
 8002d4c:	f003 fc9e 	bl	800668c <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002d56:	1ad2      	subs	r2, r2, r3
 8002d58:	4ba2      	ldr	r3, [pc, #648]	@ (8002fe4 <main+0xab8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d907      	bls.n	8002d70 <main+0x844>
					warning_ticks.fall = HAL_GetTick();
 8002d60:	f003 fc94 	bl	800668c <HAL_GetTick>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
					print_text("Falling detected!\r\n");
 8002d6a:	489f      	ldr	r0, [pc, #636]	@ (8002fe8 <main+0xabc>)
 8002d6c:	f001 fad6 	bl	800431c <print_text>
				}
				if (HAL_GetTick() - display_tick >= DISPLAY_DT) {
 8002d70:	f003 fc8c 	bl	800668c <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d32f      	bcc.n	8002de4 <main+0x8b8>
					ssd1306_Fill(Black);
 8002d84:	2000      	movs	r0, #0
 8002d86:	f003 f9c1 	bl	800610c <ssd1306_Fill>
					ssd1306_DrawBitmap(10, 10, warning_sign, 50, 50, White);
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	9301      	str	r3, [sp, #4]
 8002d8e:	2332      	movs	r3, #50	@ 0x32
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	2332      	movs	r3, #50	@ 0x32
 8002d94:	4a95      	ldr	r2, [pc, #596]	@ (8002fec <main+0xac0>)
 8002d96:	210a      	movs	r1, #10
 8002d98:	200a      	movs	r0, #10
 8002d9a:	f003 fb87 	bl	80064ac <ssd1306_DrawBitmap>
					ssd1306_SetCursor(70, 15);
 8002d9e:	210f      	movs	r1, #15
 8002da0:	2046      	movs	r0, #70	@ 0x46
 8002da2:	f003 faff 	bl	80063a4 <ssd1306_SetCursor>
					ssd1306_WriteString("WATCH", Font_7x10, White);
 8002da6:	4b92      	ldr	r3, [pc, #584]	@ (8002ff0 <main+0xac4>)
 8002da8:	2201      	movs	r2, #1
 8002daa:	9200      	str	r2, [sp, #0]
 8002dac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dae:	4891      	ldr	r0, [pc, #580]	@ (8002ff4 <main+0xac8>)
 8002db0:	f003 fad2 	bl	8006358 <ssd1306_WriteString>
					ssd1306_SetCursor(70, 28);
 8002db4:	211c      	movs	r1, #28
 8002db6:	2046      	movs	r0, #70	@ 0x46
 8002db8:	f003 faf4 	bl	80063a4 <ssd1306_SetCursor>
					ssd1306_WriteString("YOUR", Font_7x10, White);
 8002dbc:	4b8c      	ldr	r3, [pc, #560]	@ (8002ff0 <main+0xac4>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	9200      	str	r2, [sp, #0]
 8002dc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dc4:	488c      	ldr	r0, [pc, #560]	@ (8002ff8 <main+0xacc>)
 8002dc6:	f003 fac7 	bl	8006358 <ssd1306_WriteString>
					ssd1306_SetCursor(70, 42);
 8002dca:	212a      	movs	r1, #42	@ 0x2a
 8002dcc:	2046      	movs	r0, #70	@ 0x46
 8002dce:	f003 fae9 	bl	80063a4 <ssd1306_SetCursor>
					ssd1306_WriteString("STEP", Font_11x18, White);
 8002dd2:	4b8a      	ldr	r3, [pc, #552]	@ (8002ffc <main+0xad0>)
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	9200      	str	r2, [sp, #0]
 8002dd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dda:	4889      	ldr	r0, [pc, #548]	@ (8003000 <main+0xad4>)
 8002ddc:	f003 fabc 	bl	8006358 <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8002de0:	f003 f9ac 	bl	800613c <ssd1306_UpdateScreen>
				}
				if (HAL_GetTick() - display_tick >= 5000) { // stop display after 5s
 8002de4:	f003 fc52 	bl	800668c <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d90c      	bls.n	8002e12 <main+0x8e6>
					fall_tick = HAL_GetTick();
 8002df8:	f003 fc48 	bl	800668c <HAL_GetTick>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	4a81      	ldr	r2, [pc, #516]	@ (8003004 <main+0xad8>)
 8002e00:	6013      	str	r3, [r2, #0]
					ssd1306_Fill(Black);
 8002e02:	2000      	movs	r0, #0
 8002e04:	f003 f982 	bl	800610c <ssd1306_Fill>
					ssd1306_UpdateScreen();
 8002e08:	f003 f998 	bl	800613c <ssd1306_UpdateScreen>
					fall_detect = false;
 8002e0c:	4b72      	ldr	r3, [pc, #456]	@ (8002fd8 <main+0xaac>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	701a      	strb	r2, [r3, #0]
				}
			}
			/* Sudden Movement takes 2nd priority */
			if (sudden_move_detect) {
 8002e12:	4b72      	ldr	r3, [pc, #456]	@ (8002fdc <main+0xab0>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d06e      	beq.n	8002ef8 <main+0x9cc>
				blink_time = 500;
 8002e1a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002e1e:	f8a7 31e8 	strh.w	r3, [r7, #488]	@ 0x1e8
				if (HAL_GetTick()-warning_ticks.sudden_move > warning_dt.sudden_move) {	//print at same rate as blink
 8002e22:	f003 fc33 	bl	800668c <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002e2c:	1ad2      	subs	r2, r2, r3
 8002e2e:	4b6d      	ldr	r3, [pc, #436]	@ (8002fe4 <main+0xab8>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d907      	bls.n	8002e46 <main+0x91a>
					warning_ticks.sudden_move = HAL_GetTick();
 8002e36:	f003 fc29 	bl	800668c <HAL_GetTick>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
					print_text("Abnormal movement detected!\r\n");
 8002e40:	4871      	ldr	r0, [pc, #452]	@ (8003008 <main+0xadc>)
 8002e42:	f001 fa6b 	bl	800431c <print_text>
				}
				if (flags_detect < 0b1000) {
 8002e46:	4b66      	ldr	r3, [pc, #408]	@ (8002fe0 <main+0xab4>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b07      	cmp	r3, #7
 8002e4c:	d854      	bhi.n	8002ef8 <main+0x9cc>
					if (HAL_GetTick() - display_tick >= DISPLAY_DT) { // refresh display every 2s
 8002e4e:	f003 fc1d 	bl	800668c <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d333      	bcc.n	8002eca <main+0x99e>
						display_tick = HAL_GetTick();
 8002e62:	f003 fc13 	bl	800668c <HAL_GetTick>
 8002e66:	f8c7 01f0 	str.w	r0, [r7, #496]	@ 0x1f0
						ssd1306_Fill(Black);
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	f003 f94e 	bl	800610c <ssd1306_Fill>
						ssd1306_DrawBitmap(10, 10, abnormal_movement, 44, 60, White);
 8002e70:	2301      	movs	r3, #1
 8002e72:	9301      	str	r3, [sp, #4]
 8002e74:	233c      	movs	r3, #60	@ 0x3c
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	232c      	movs	r3, #44	@ 0x2c
 8002e7a:	4a64      	ldr	r2, [pc, #400]	@ (800300c <main+0xae0>)
 8002e7c:	210a      	movs	r1, #10
 8002e7e:	200a      	movs	r0, #10
 8002e80:	f003 fb14 	bl	80064ac <ssd1306_DrawBitmap>
						ssd1306_SetCursor(70, 15);
 8002e84:	210f      	movs	r1, #15
 8002e86:	2046      	movs	r0, #70	@ 0x46
 8002e88:	f003 fa8c 	bl	80063a4 <ssd1306_SetCursor>
						ssd1306_WriteString("SUDDEN", Font_7x10, White);
 8002e8c:	4b58      	ldr	r3, [pc, #352]	@ (8002ff0 <main+0xac4>)
 8002e8e:	2201      	movs	r2, #1
 8002e90:	9200      	str	r2, [sp, #0]
 8002e92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e94:	485e      	ldr	r0, [pc, #376]	@ (8003010 <main+0xae4>)
 8002e96:	f003 fa5f 	bl	8006358 <ssd1306_WriteString>
						ssd1306_SetCursor(70, 28);
 8002e9a:	211c      	movs	r1, #28
 8002e9c:	2046      	movs	r0, #70	@ 0x46
 8002e9e:	f003 fa81 	bl	80063a4 <ssd1306_SetCursor>
						ssd1306_WriteString("MOVEMENT", Font_7x10, White);
 8002ea2:	4b53      	ldr	r3, [pc, #332]	@ (8002ff0 <main+0xac4>)
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	9200      	str	r2, [sp, #0]
 8002ea8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eaa:	485a      	ldr	r0, [pc, #360]	@ (8003014 <main+0xae8>)
 8002eac:	f003 fa54 	bl	8006358 <ssd1306_WriteString>
						ssd1306_SetCursor(70, 38);
 8002eb0:	2126      	movs	r1, #38	@ 0x26
 8002eb2:	2046      	movs	r0, #70	@ 0x46
 8002eb4:	f003 fa76 	bl	80063a4 <ssd1306_SetCursor>
						ssd1306_WriteString("DETECTED!", Font_7x10, White);
 8002eb8:	4b4d      	ldr	r3, [pc, #308]	@ (8002ff0 <main+0xac4>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	9200      	str	r2, [sp, #0]
 8002ebe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ec0:	4855      	ldr	r0, [pc, #340]	@ (8003018 <main+0xaec>)
 8002ec2:	f003 fa49 	bl	8006358 <ssd1306_WriteString>
						ssd1306_UpdateScreen();
 8002ec6:	f003 f939 	bl	800613c <ssd1306_UpdateScreen>
					}
					if (HAL_GetTick() - sudden_move_tick >= 5000) { // clear after 5s
 8002eca:	f003 fbdf 	bl	800668c <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	4b52      	ldr	r3, [pc, #328]	@ (800301c <main+0xaf0>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d90c      	bls.n	8002ef8 <main+0x9cc>
						sudden_move_tick = HAL_GetTick();
 8002ede:	f003 fbd5 	bl	800668c <HAL_GetTick>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	4a4d      	ldr	r2, [pc, #308]	@ (800301c <main+0xaf0>)
 8002ee6:	6013      	str	r3, [r2, #0]
						ssd1306_Fill(Black);
 8002ee8:	2000      	movs	r0, #0
 8002eea:	f003 f90f 	bl	800610c <ssd1306_Fill>
						ssd1306_UpdateScreen();
 8002eee:	f003 f925 	bl	800613c <ssd1306_UpdateScreen>
						sudden_move_detect = false;
 8002ef2:	4b3a      	ldr	r3, [pc, #232]	@ (8002fdc <main+0xab0>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	701a      	strb	r2, [r3, #0]
					}
				}

			}
			/* Fever is 3rd priority */
			if (fever_detect){
 8002ef8:	4b35      	ldr	r3, [pc, #212]	@ (8002fd0 <main+0xaa4>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 809e 	beq.w	800303e <main+0xb12>
				blink_time = 333;
 8002f02:	f240 134d 	movw	r3, #333	@ 0x14d
 8002f06:	f8a7 31e8 	strh.w	r3, [r7, #488]	@ 0x1e8
				if (HAL_GetTick()-warning_ticks.fever > warning_dt.fever) {	//print at same rate as blink
 8002f0a:	f003 fbbf 	bl	800668c <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002f14:	1ad2      	subs	r2, r2, r3
 8002f16:	4b33      	ldr	r3, [pc, #204]	@ (8002fe4 <main+0xab8>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d907      	bls.n	8002f2e <main+0xa02>
					warning_ticks.fever = HAL_GetTick();
 8002f1e:	f003 fbb5 	bl	800668c <HAL_GetTick>
 8002f22:	4603      	mov	r3, r0
 8002f24:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
					print_text("Fever is detected!\r\n\r\n");
 8002f28:	483d      	ldr	r0, [pc, #244]	@ (8003020 <main+0xaf4>)
 8002f2a:	f001 f9f7 	bl	800431c <print_text>
				}
				if (flags_detect < 0b0100) {
 8002f2e:	4b2c      	ldr	r3, [pc, #176]	@ (8002fe0 <main+0xab4>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b03      	cmp	r3, #3
 8002f34:	f200 8083 	bhi.w	800303e <main+0xb12>
					if (HAL_GetTick() - display_tick >= DISPLAY_DT) {
 8002f38:	f003 fba8 	bl	800668c <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d328      	bcc.n	8002f9e <main+0xa72>
						display_tick = HAL_GetTick();
 8002f4c:	f003 fb9e 	bl	800668c <HAL_GetTick>
 8002f50:	f8c7 01f0 	str.w	r0, [r7, #496]	@ 0x1f0
						ssd1306_Fill(Black);
 8002f54:	2000      	movs	r0, #0
 8002f56:	f003 f8d9 	bl	800610c <ssd1306_Fill>
						ssd1306_DrawBitmap(5, 5, fever, 60, 56, White);
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	9301      	str	r3, [sp, #4]
 8002f5e:	2338      	movs	r3, #56	@ 0x38
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	233c      	movs	r3, #60	@ 0x3c
 8002f64:	4a2f      	ldr	r2, [pc, #188]	@ (8003024 <main+0xaf8>)
 8002f66:	2105      	movs	r1, #5
 8002f68:	2005      	movs	r0, #5
 8002f6a:	f003 fa9f 	bl	80064ac <ssd1306_DrawBitmap>
						ssd1306_SetCursor(70, 15);
 8002f6e:	210f      	movs	r1, #15
 8002f70:	2046      	movs	r0, #70	@ 0x46
 8002f72:	f003 fa17 	bl	80063a4 <ssd1306_SetCursor>
						ssd1306_WriteString("FEVER", Font_11x18, White);
 8002f76:	4b21      	ldr	r3, [pc, #132]	@ (8002ffc <main+0xad0>)
 8002f78:	2201      	movs	r2, #1
 8002f7a:	9200      	str	r2, [sp, #0]
 8002f7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f7e:	482a      	ldr	r0, [pc, #168]	@ (8003028 <main+0xafc>)
 8002f80:	f003 f9ea 	bl	8006358 <ssd1306_WriteString>
						ssd1306_SetCursor(70, 36);
 8002f84:	2124      	movs	r1, #36	@ 0x24
 8002f86:	2046      	movs	r0, #70	@ 0x46
 8002f88:	f003 fa0c 	bl	80063a4 <ssd1306_SetCursor>
						ssd1306_WriteString("Detected", Font_7x10, White);
 8002f8c:	4b18      	ldr	r3, [pc, #96]	@ (8002ff0 <main+0xac4>)
 8002f8e:	2201      	movs	r2, #1
 8002f90:	9200      	str	r2, [sp, #0]
 8002f92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f94:	4825      	ldr	r0, [pc, #148]	@ (800302c <main+0xb00>)
 8002f96:	f003 f9df 	bl	8006358 <ssd1306_WriteString>
						ssd1306_UpdateScreen();
 8002f9a:	f003 f8cf 	bl	800613c <ssd1306_UpdateScreen>
					}
					if (HAL_GetTick() - fever_tick >= 5000) {
 8002f9e:	f003 fb75 	bl	800668c <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd4 <main+0xaa8>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d945      	bls.n	800303e <main+0xb12>
						fever_tick = HAL_GetTick();
 8002fb2:	f003 fb6b 	bl	800668c <HAL_GetTick>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	4a06      	ldr	r2, [pc, #24]	@ (8002fd4 <main+0xaa8>)
 8002fba:	6013      	str	r3, [r2, #0]
						ssd1306_Fill(Black);
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	e037      	b.n	8003030 <main+0xb04>
 8002fc0:	20000654 	.word	0x20000654
 8002fc4:	20000640 	.word	0x20000640
 8002fc8:	20000658 	.word	0x20000658
 8002fcc:	200005d8 	.word	0x200005d8
 8002fd0:	20000641 	.word	0x20000641
 8002fd4:	2000065c 	.word	0x2000065c
 8002fd8:	2000063d 	.word	0x2000063d
 8002fdc:	2000063e 	.word	0x2000063e
 8002fe0:	20000642 	.word	0x20000642
 8002fe4:	20000000 	.word	0x20000000
 8002fe8:	08010970 	.word	0x08010970
 8002fec:	08010e38 	.word	0x08010e38
 8002ff0:	080128f0 	.word	0x080128f0
 8002ff4:	08010984 	.word	0x08010984
 8002ff8:	0801098c 	.word	0x0801098c
 8002ffc:	080128fc 	.word	0x080128fc
 8003000:	08010994 	.word	0x08010994
 8003004:	20000650 	.word	0x20000650
 8003008:	0801099c 	.word	0x0801099c
 800300c:	08010f98 	.word	0x08010f98
 8003010:	080109bc 	.word	0x080109bc
 8003014:	080109c4 	.word	0x080109c4
 8003018:	080109d0 	.word	0x080109d0
 800301c:	2000064c 	.word	0x2000064c
 8003020:	080109dc 	.word	0x080109dc
 8003024:	08011100 	.word	0x08011100
 8003028:	080109f4 	.word	0x080109f4
 800302c:	080109fc 	.word	0x080109fc
 8003030:	f003 f86c 	bl	800610c <ssd1306_Fill>
						ssd1306_UpdateScreen();
 8003034:	f003 f882 	bl	800613c <ssd1306_UpdateScreen>
						fever_detect = false;
 8003038:	4b6b      	ldr	r3, [pc, #428]	@ (80031e8 <main+0xcbc>)
 800303a:	2200      	movs	r2, #0
 800303c:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			// Improper posture is 4th priority
			if (posture_detect_second) {
 800303e:	4b6b      	ldr	r3, [pc, #428]	@ (80031ec <main+0xcc0>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d071      	beq.n	800312a <main+0xbfe>
				blink_time = 500;
 8003046:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800304a:	f8a7 31e8 	strh.w	r3, [r7, #488]	@ 0x1e8
				if (HAL_GetTick()-warning_ticks.posture > warning_dt.posture) {	//print at same rate as blink
 800304e:	f003 fb1d 	bl	800668c <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003058:	1ad2      	subs	r2, r2, r3
 800305a:	4b65      	ldr	r3, [pc, #404]	@ (80031f0 <main+0xcc4>)
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	429a      	cmp	r2, r3
 8003060:	d907      	bls.n	8003072 <main+0xb46>
					warning_ticks.posture = HAL_GetTick();
 8003062:	f003 fb13 	bl	800668c <HAL_GetTick>
 8003066:	4603      	mov	r3, r0
 8003068:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
					print_text("Improper posture detected!\r\n\r\n");
 800306c:	4861      	ldr	r0, [pc, #388]	@ (80031f4 <main+0xcc8>)
 800306e:	f001 f955 	bl	800431c <print_text>
				}
//				posture_detect_second = false;
				if (flags_detect < 0b0010) {
 8003072:	4b61      	ldr	r3, [pc, #388]	@ (80031f8 <main+0xccc>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d857      	bhi.n	800312a <main+0xbfe>
					if (HAL_GetTick() - display_tick >= DISPLAY_DT) {
 800307a:	f003 fb07 	bl	800668c <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800308a:	4293      	cmp	r3, r2
 800308c:	d333      	bcc.n	80030f6 <main+0xbca>
						display_tick = HAL_GetTick();
 800308e:	f003 fafd 	bl	800668c <HAL_GetTick>
 8003092:	f8c7 01f0 	str.w	r0, [r7, #496]	@ 0x1f0
						ssd1306_Fill(Black);
 8003096:	2000      	movs	r0, #0
 8003098:	f003 f838 	bl	800610c <ssd1306_Fill>
						ssd1306_DrawBitmap(15, 5, posture, 40, 55, White);
 800309c:	2301      	movs	r3, #1
 800309e:	9301      	str	r3, [sp, #4]
 80030a0:	2337      	movs	r3, #55	@ 0x37
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	2328      	movs	r3, #40	@ 0x28
 80030a6:	4a55      	ldr	r2, [pc, #340]	@ (80031fc <main+0xcd0>)
 80030a8:	2105      	movs	r1, #5
 80030aa:	200f      	movs	r0, #15
 80030ac:	f003 f9fe 	bl	80064ac <ssd1306_DrawBitmap>
						ssd1306_SetCursor(70, 15);
 80030b0:	210f      	movs	r1, #15
 80030b2:	2046      	movs	r0, #70	@ 0x46
 80030b4:	f003 f976 	bl	80063a4 <ssd1306_SetCursor>
						ssd1306_WriteString("IMPROPER", Font_7x10, White);
 80030b8:	4b51      	ldr	r3, [pc, #324]	@ (8003200 <main+0xcd4>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	9200      	str	r2, [sp, #0]
 80030be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030c0:	4850      	ldr	r0, [pc, #320]	@ (8003204 <main+0xcd8>)
 80030c2:	f003 f949 	bl	8006358 <ssd1306_WriteString>
						ssd1306_SetCursor(70, 28);
 80030c6:	211c      	movs	r1, #28
 80030c8:	2046      	movs	r0, #70	@ 0x46
 80030ca:	f003 f96b 	bl	80063a4 <ssd1306_SetCursor>
						ssd1306_WriteString("POSTURE", Font_7x10, White);
 80030ce:	4b4c      	ldr	r3, [pc, #304]	@ (8003200 <main+0xcd4>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	9200      	str	r2, [sp, #0]
 80030d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030d6:	484c      	ldr	r0, [pc, #304]	@ (8003208 <main+0xcdc>)
 80030d8:	f003 f93e 	bl	8006358 <ssd1306_WriteString>
						ssd1306_SetCursor(70, 38);
 80030dc:	2126      	movs	r1, #38	@ 0x26
 80030de:	2046      	movs	r0, #70	@ 0x46
 80030e0:	f003 f960 	bl	80063a4 <ssd1306_SetCursor>
						ssd1306_WriteString("DETECTED!", Font_7x10, White);
 80030e4:	4b46      	ldr	r3, [pc, #280]	@ (8003200 <main+0xcd4>)
 80030e6:	2201      	movs	r2, #1
 80030e8:	9200      	str	r2, [sp, #0]
 80030ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030ec:	4847      	ldr	r0, [pc, #284]	@ (800320c <main+0xce0>)
 80030ee:	f003 f933 	bl	8006358 <ssd1306_WriteString>
						ssd1306_UpdateScreen();
 80030f2:	f003 f823 	bl	800613c <ssd1306_UpdateScreen>
					}
					if (HAL_GetTick() - posture_second_tick >= 5000) {
 80030f6:	f003 fac9 	bl	800668c <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	4b44      	ldr	r3, [pc, #272]	@ (8003210 <main+0xce4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003106:	4293      	cmp	r3, r2
 8003108:	d90f      	bls.n	800312a <main+0xbfe>
						posture_second_tick = HAL_GetTick();
 800310a:	f003 fabf 	bl	800668c <HAL_GetTick>
 800310e:	4603      	mov	r3, r0
 8003110:	4a3f      	ldr	r2, [pc, #252]	@ (8003210 <main+0xce4>)
 8003112:	6013      	str	r3, [r2, #0]
						ssd1306_Fill(Black);
 8003114:	2000      	movs	r0, #0
 8003116:	f002 fff9 	bl	800610c <ssd1306_Fill>
						ssd1306_UpdateScreen();
 800311a:	f003 f80f 	bl	800613c <ssd1306_UpdateScreen>
						posture_detect_first = false;
 800311e:	4b3d      	ldr	r3, [pc, #244]	@ (8003214 <main+0xce8>)
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]
						posture_detect_second = false;
 8003124:	4b31      	ldr	r3, [pc, #196]	@ (80031ec <main+0xcc0>)
 8003126:	2200      	movs	r2, #0
 8003128:	701a      	strb	r2, [r3, #0]
					}
				}

			}
			//no warning detected
			if (!flags_detect){
 800312a:	4b33      	ldr	r3, [pc, #204]	@ (80031f8 <main+0xccc>)
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d150      	bne.n	80031d4 <main+0xca8>
				blink_time = 1000;
 8003132:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003136:	f8a7 31e8 	strh.w	r3, [r7, #488]	@ 0x1e8
				if (HAL_GetTick() - display_tick >= DISPLAY_DT) {
 800313a:	f003 faa7 	bl	800668c <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800314a:	4293      	cmp	r3, r2
 800314c:	d342      	bcc.n	80031d4 <main+0xca8>
					display_tick = HAL_GetTick();
 800314e:	f003 fa9d 	bl	800668c <HAL_GetTick>
 8003152:	f8c7 01f0 	str.w	r0, [r7, #496]	@ 0x1f0
					ssd1306_Reset();
 8003156:	f002 ff35 	bl	8005fc4 <ssd1306_Reset>
					ssd1306_Fill(Black);
 800315a:	2000      	movs	r0, #0
 800315c:	f002 ffd6 	bl	800610c <ssd1306_Fill>
					ssd1306_DrawBitmap(0, 0, smiley_face, 64, 64, White);
 8003160:	2301      	movs	r3, #1
 8003162:	9301      	str	r3, [sp, #4]
 8003164:	2340      	movs	r3, #64	@ 0x40
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	2340      	movs	r3, #64	@ 0x40
 800316a:	4a2b      	ldr	r2, [pc, #172]	@ (8003218 <main+0xcec>)
 800316c:	2100      	movs	r1, #0
 800316e:	2000      	movs	r0, #0
 8003170:	f003 f99c 	bl	80064ac <ssd1306_DrawBitmap>
					ssd1306_SetCursor(70, 15);
 8003174:	210f      	movs	r1, #15
 8003176:	2046      	movs	r0, #70	@ 0x46
 8003178:	f003 f914 	bl	80063a4 <ssd1306_SetCursor>
					ssd1306_WriteString("Normal", Font_7x10, White);
 800317c:	4b20      	ldr	r3, [pc, #128]	@ (8003200 <main+0xcd4>)
 800317e:	2201      	movs	r2, #1
 8003180:	9200      	str	r2, [sp, #0]
 8003182:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003184:	4825      	ldr	r0, [pc, #148]	@ (800321c <main+0xcf0>)
 8003186:	f003 f8e7 	bl	8006358 <ssd1306_WriteString>
					ssd1306_SetCursor(70, 28);
 800318a:	211c      	movs	r1, #28
 800318c:	2046      	movs	r0, #70	@ 0x46
 800318e:	f003 f909 	bl	80063a4 <ssd1306_SetCursor>
					ssd1306_WriteString("Temp:", Font_7x10, White);
 8003192:	4b1b      	ldr	r3, [pc, #108]	@ (8003200 <main+0xcd4>)
 8003194:	2201      	movs	r2, #1
 8003196:	9200      	str	r2, [sp, #0]
 8003198:	cb0e      	ldmia	r3, {r1, r2, r3}
 800319a:	4821      	ldr	r0, [pc, #132]	@ (8003220 <main+0xcf4>)
 800319c:	f003 f8dc 	bl	8006358 <ssd1306_WriteString>
					ssd1306_SetCursor(70, 38);
 80031a0:	2126      	movs	r1, #38	@ 0x26
 80031a2:	2046      	movs	r0, #70	@ 0x46
 80031a4:	f003 f8fe 	bl	80063a4 <ssd1306_SetCursor>
					char buffer[30];
					sprintf(buffer, "%0.2f", temp);
 80031a8:	4b1e      	ldr	r3, [pc, #120]	@ (8003224 <main+0xcf8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7fd f9cb 	bl	8000548 <__aeabi_f2d>
 80031b2:	4602      	mov	r2, r0
 80031b4:	460b      	mov	r3, r1
 80031b6:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 80031ba:	491b      	ldr	r1, [pc, #108]	@ (8003228 <main+0xcfc>)
 80031bc:	f009 fa78 	bl	800c6b0 <siprintf>
					ssd1306_WriteString(buffer, Font_7x10, White);
 80031c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003200 <main+0xcd4>)
 80031c2:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 80031c6:	2201      	movs	r2, #1
 80031c8:	9200      	str	r2, [sp, #0]
 80031ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031cc:	f003 f8c4 	bl	8006358 <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 80031d0:	f002 ffb4 	bl	800613c <ssd1306_UpdateScreen>
				}
			}

			//buzzer trigger
			if (flags_detect > last_flags_detect) {	//new warning added
 80031d4:	4b08      	ldr	r3, [pc, #32]	@ (80031f8 <main+0xccc>)
 80031d6:	781a      	ldrb	r2, [r3, #0]
 80031d8:	4b14      	ldr	r3, [pc, #80]	@ (800322c <main+0xd00>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d929      	bls.n	8003234 <main+0xd08>
				start_beep = true;
 80031e0:	4b13      	ldr	r3, [pc, #76]	@ (8003230 <main+0xd04>)
 80031e2:	2201      	movs	r2, #1
 80031e4:	701a      	strb	r2, [r3, #0]
 80031e6:	e028      	b.n	800323a <main+0xd0e>
 80031e8:	20000641 	.word	0x20000641
 80031ec:	20000640 	.word	0x20000640
 80031f0:	20000000 	.word	0x20000000
 80031f4:	08010a08 	.word	0x08010a08
 80031f8:	20000642 	.word	0x20000642
 80031fc:	080112c0 	.word	0x080112c0
 8003200:	080128f0 	.word	0x080128f0
 8003204:	08010a28 	.word	0x08010a28
 8003208:	08010a34 	.word	0x08010a34
 800320c:	080109d0 	.word	0x080109d0
 8003210:	20000658 	.word	0x20000658
 8003214:	2000063f 	.word	0x2000063f
 8003218:	08010c38 	.word	0x08010c38
 800321c:	08010a3c 	.word	0x08010a3c
 8003220:	08010a44 	.word	0x08010a44
 8003224:	200005d8 	.word	0x200005d8
 8003228:	08010a4c 	.word	0x08010a4c
 800322c:	20000643 	.word	0x20000643
 8003230:	20000644 	.word	0x20000644
			} else {
				start_beep = false;
 8003234:	4b6c      	ldr	r3, [pc, #432]	@ (80033e8 <main+0xebc>)
 8003236:	2200      	movs	r2, #0
 8003238:	701a      	strb	r2, [r3, #0]
			}
			last_flags_detect = flags_detect;
 800323a:	4b6c      	ldr	r3, [pc, #432]	@ (80033ec <main+0xec0>)
 800323c:	781a      	ldrb	r2, [r3, #0]
 800323e:	4b6c      	ldr	r3, [pc, #432]	@ (80033f0 <main+0xec4>)
 8003240:	701a      	strb	r2, [r3, #0]

			/* Readings Reporting */
			if (HAL_GetTick() - start_tick_emergency >= 5000) {
 8003242:	f003 fa23 	bl	800668c <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003252:	4293      	cmp	r3, r2
 8003254:	d97a      	bls.n	800334c <main+0xe20>
				start_tick_emergency = HAL_GetTick();
 8003256:	f003 fa19 	bl	800668c <HAL_GetTick>
 800325a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
				char msg[200];
				sprintf(msg, "TEMP: %0.2f\r\nGYRO: X:%0.2f, Y:%0.2f, Z:%0.2f\r\nACCEL: X:%0.2f, Y:%0.2f, Z:%0.2f\r\nMAG: X:%0.2f, Y:%0.2f, Z:%0.2f\r\n\r\n",
 800325e:	4b65      	ldr	r3, [pc, #404]	@ (80033f4 <main+0xec8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f7fd f970 	bl	8000548 <__aeabi_f2d>
 8003268:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
						temp,
						gyro_data[0],gyro_data[1],gyro_data[2],
 800326c:	4b62      	ldr	r3, [pc, #392]	@ (80033f8 <main+0xecc>)
 800326e:	681b      	ldr	r3, [r3, #0]
				sprintf(msg, "TEMP: %0.2f\r\nGYRO: X:%0.2f, Y:%0.2f, Z:%0.2f\r\nACCEL: X:%0.2f, Y:%0.2f, Z:%0.2f\r\nMAG: X:%0.2f, Y:%0.2f, Z:%0.2f\r\n\r\n",
 8003270:	4618      	mov	r0, r3
 8003272:	f7fd f969 	bl	8000548 <__aeabi_f2d>
 8003276:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
						gyro_data[0],gyro_data[1],gyro_data[2],
 800327a:	4b5f      	ldr	r3, [pc, #380]	@ (80033f8 <main+0xecc>)
 800327c:	685b      	ldr	r3, [r3, #4]
				sprintf(msg, "TEMP: %0.2f\r\nGYRO: X:%0.2f, Y:%0.2f, Z:%0.2f\r\nACCEL: X:%0.2f, Y:%0.2f, Z:%0.2f\r\nMAG: X:%0.2f, Y:%0.2f, Z:%0.2f\r\n\r\n",
 800327e:	4618      	mov	r0, r3
 8003280:	f7fd f962 	bl	8000548 <__aeabi_f2d>
 8003284:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
						gyro_data[0],gyro_data[1],gyro_data[2],
 8003288:	4b5b      	ldr	r3, [pc, #364]	@ (80033f8 <main+0xecc>)
 800328a:	689b      	ldr	r3, [r3, #8]
				sprintf(msg, "TEMP: %0.2f\r\nGYRO: X:%0.2f, Y:%0.2f, Z:%0.2f\r\nACCEL: X:%0.2f, Y:%0.2f, Z:%0.2f\r\nMAG: X:%0.2f, Y:%0.2f, Z:%0.2f\r\n\r\n",
 800328c:	4618      	mov	r0, r3
 800328e:	f7fd f95b 	bl	8000548 <__aeabi_f2d>
 8003292:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
						accel_data[0],accel_data[1],accel_data[2],
 8003296:	4b59      	ldr	r3, [pc, #356]	@ (80033fc <main+0xed0>)
 8003298:	681b      	ldr	r3, [r3, #0]
				sprintf(msg, "TEMP: %0.2f\r\nGYRO: X:%0.2f, Y:%0.2f, Z:%0.2f\r\nACCEL: X:%0.2f, Y:%0.2f, Z:%0.2f\r\nMAG: X:%0.2f, Y:%0.2f, Z:%0.2f\r\n\r\n",
 800329a:	4618      	mov	r0, r3
 800329c:	f7fd f954 	bl	8000548 <__aeabi_f2d>
 80032a0:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
						accel_data[0],accel_data[1],accel_data[2],
 80032a4:	4b55      	ldr	r3, [pc, #340]	@ (80033fc <main+0xed0>)
 80032a6:	685b      	ldr	r3, [r3, #4]
				sprintf(msg, "TEMP: %0.2f\r\nGYRO: X:%0.2f, Y:%0.2f, Z:%0.2f\r\nACCEL: X:%0.2f, Y:%0.2f, Z:%0.2f\r\nMAG: X:%0.2f, Y:%0.2f, Z:%0.2f\r\n\r\n",
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fd f94d 	bl	8000548 <__aeabi_f2d>
 80032ae:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
						accel_data[0],accel_data[1],accel_data[2],
 80032b2:	4b52      	ldr	r3, [pc, #328]	@ (80033fc <main+0xed0>)
 80032b4:	689b      	ldr	r3, [r3, #8]
				sprintf(msg, "TEMP: %0.2f\r\nGYRO: X:%0.2f, Y:%0.2f, Z:%0.2f\r\nACCEL: X:%0.2f, Y:%0.2f, Z:%0.2f\r\nMAG: X:%0.2f, Y:%0.2f, Z:%0.2f\r\n\r\n",
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fd f946 	bl	8000548 <__aeabi_f2d>
 80032bc:	4682      	mov	sl, r0
 80032be:	468b      	mov	fp, r1
						mag_data[0],mag_data[1],mag_data[2]);
 80032c0:	4b4f      	ldr	r3, [pc, #316]	@ (8003400 <main+0xed4>)
 80032c2:	681b      	ldr	r3, [r3, #0]
				sprintf(msg, "TEMP: %0.2f\r\nGYRO: X:%0.2f, Y:%0.2f, Z:%0.2f\r\nACCEL: X:%0.2f, Y:%0.2f, Z:%0.2f\r\nMAG: X:%0.2f, Y:%0.2f, Z:%0.2f\r\n\r\n",
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fd f93f 	bl	8000548 <__aeabi_f2d>
 80032ca:	4680      	mov	r8, r0
 80032cc:	4689      	mov	r9, r1
						mag_data[0],mag_data[1],mag_data[2]);
 80032ce:	4b4c      	ldr	r3, [pc, #304]	@ (8003400 <main+0xed4>)
 80032d0:	685b      	ldr	r3, [r3, #4]
				sprintf(msg, "TEMP: %0.2f\r\nGYRO: X:%0.2f, Y:%0.2f, Z:%0.2f\r\nACCEL: X:%0.2f, Y:%0.2f, Z:%0.2f\r\nMAG: X:%0.2f, Y:%0.2f, Z:%0.2f\r\n\r\n",
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fd f938 	bl	8000548 <__aeabi_f2d>
 80032d8:	4604      	mov	r4, r0
 80032da:	460d      	mov	r5, r1
						mag_data[0],mag_data[1],mag_data[2]);
 80032dc:	4b48      	ldr	r3, [pc, #288]	@ (8003400 <main+0xed4>)
 80032de:	689b      	ldr	r3, [r3, #8]
				sprintf(msg, "TEMP: %0.2f\r\nGYRO: X:%0.2f, Y:%0.2f, Z:%0.2f\r\nACCEL: X:%0.2f, Y:%0.2f, Z:%0.2f\r\nMAG: X:%0.2f, Y:%0.2f, Z:%0.2f\r\n\r\n",
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fd f931 	bl	8000548 <__aeabi_f2d>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 80032ee:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80032f2:	e9cd 450e 	strd	r4, r5, [sp, #56]	@ 0x38
 80032f6:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 80032fa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 80032fe:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8003302:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003306:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800330a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800330e:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8003312:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003316:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 800331a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800331e:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8003322:	ed8d 7b00 	vstr	d7, [sp]
 8003326:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800332a:	4936      	ldr	r1, [pc, #216]	@ (8003404 <main+0xed8>)
 800332c:	f009 f9c0 	bl	800c6b0 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) msg,strlen(msg), 0xFFFF);
 8003330:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003334:	4618      	mov	r0, r3
 8003336:	f7fc ff9b 	bl	8000270 <strlen>
 800333a:	4603      	mov	r3, r0
 800333c:	b29a      	uxth	r2, r3
 800333e:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 8003342:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003346:	4830      	ldr	r0, [pc, #192]	@ (8003408 <main+0xedc>)
 8003348:	f007 f9cc 	bl	800a6e4 <HAL_UART_Transmit>
			}

			if (button_counter == 1) {
 800334c:	4b2f      	ldr	r3, [pc, #188]	@ (800340c <main+0xee0>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b01      	cmp	r3, #1
 8003354:	f040 82f3 	bne.w	800393e <main+0x1412>
				char message_print[32];
				sprintf(message_print, "Entering Emergency Mode.\r\n");
 8003358:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800335c:	492c      	ldr	r1, [pc, #176]	@ (8003410 <main+0xee4>)
 800335e:	4618      	mov	r0, r3
 8003360:	f009 f9a6 	bl	800c6b0 <siprintf>
				print_text(message_print);
 8003364:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003368:	4618      	mov	r0, r3
 800336a:	f000 ffd7 	bl	800431c <print_text>
				button_counter = 0;
 800336e:	4b27      	ldr	r3, [pc, #156]	@ (800340c <main+0xee0>)
 8003370:	2200      	movs	r2, #0
 8003372:	701a      	strb	r2, [r3, #0]
				ssd1306_Reset();
 8003374:	f002 fe26 	bl	8005fc4 <ssd1306_Reset>
				ssd1306_Fill(Black);
 8003378:	2000      	movs	r0, #0
 800337a:	f002 fec7 	bl	800610c <ssd1306_Fill>
				MODE = 0;
 800337e:	4b25      	ldr	r3, [pc, #148]	@ (8003414 <main+0xee8>)
 8003380:	2200      	movs	r2, #0
 8003382:	701a      	strb	r2, [r3, #0]
 8003384:	e2db      	b.n	800393e <main+0x1412>
			}
		} else {	//MODE == 2
			dt=0.025;	//sample at 40 hz
 8003386:	4b24      	ldr	r3, [pc, #144]	@ (8003418 <main+0xeec>)
 8003388:	4a24      	ldr	r2, [pc, #144]	@ (800341c <main+0xef0>)
 800338a:	601a      	str	r2, [r3, #0]
			frame_timer1 = HAL_GetTick();
 800338c:	f003 f97e 	bl	800668c <HAL_GetTick>
 8003390:	4603      	mov	r3, r0
 8003392:	4a23      	ldr	r2, [pc, #140]	@ (8003420 <main+0xef4>)
 8003394:	6013      	str	r3, [r2, #0]
			ssd1306_Fill(Black);
 8003396:	2000      	movs	r0, #0
 8003398:	f002 feb8 	bl	800610c <ssd1306_Fill>
			float rpy_rad[3];
			rpy_rad[0] = -kalman_rpy[0] * DEG_TO_RAD;
 800339c:	4b21      	ldr	r3, [pc, #132]	@ (8003424 <main+0xef8>)
 800339e:	edd3 7a00 	vldr	s15, [r3]
 80033a2:	eef1 7a67 	vneg.f32	s15, s15
 80033a6:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8003428 <main+0xefc>
 80033aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033ae:	edc7 7a51 	vstr	s15, [r7, #324]	@ 0x144
			rpy_rad[1] = -kalman_rpy[1] * DEG_TO_RAD;
 80033b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003424 <main+0xef8>)
 80033b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80033b8:	eef1 7a67 	vneg.f32	s15, s15
 80033bc:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8003428 <main+0xefc>
 80033c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033c4:	edc7 7a52 	vstr	s15, [r7, #328]	@ 0x148
			rpy_rad[2] = -kalman_rpy[2] * DEG_TO_RAD;	//yaw is opposite
 80033c8:	4b16      	ldr	r3, [pc, #88]	@ (8003424 <main+0xef8>)
 80033ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80033ce:	eef1 7a67 	vneg.f32	s15, s15
 80033d2:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8003428 <main+0xefc>
 80033d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033da:	edc7 7a53 	vstr	s15, [r7, #332]	@ 0x14c

			for (int i=0; i<8; i++) {
 80033de:	2300      	movs	r3, #0
 80033e0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80033e4:	e252      	b.n	800388c <main+0x1360>
 80033e6:	bf00      	nop
 80033e8:	20000644 	.word	0x20000644
 80033ec:	20000642 	.word	0x20000642
 80033f0:	20000643 	.word	0x20000643
 80033f4:	200005d8 	.word	0x200005d8
 80033f8:	200005e4 	.word	0x200005e4
 80033fc:	200005f0 	.word	0x200005f0
 8003400:	200005fc 	.word	0x200005fc
 8003404:	08010a54 	.word	0x08010a54
 8003408:	20000400 	.word	0x20000400
 800340c:	200005d0 	.word	0x200005d0
 8003410:	08010954 	.word	0x08010954
 8003414:	200005c4 	.word	0x200005c4
 8003418:	20000078 	.word	0x20000078
 800341c:	3ccccccd 	.word	0x3ccccccd
 8003420:	20000734 	.word	0x20000734
 8003424:	20000630 	.word	0x20000630
 8003428:	3c8efa35 	.word	0x3c8efa35
			    // rotate 3d points around the Y axis (changing X and Z positions)
			    float rot_x = orig_points [i][0] * cos(rpy_rad[2]) - orig_points [i][2] * sin(rpy_rad[2]);
 800342c:	49ef      	ldr	r1, [pc, #956]	@ (80037ec <main+0x12c0>)
 800342e:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 8003432:	4613      	mov	r3, r2
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	4413      	add	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7fd f870 	bl	8000524 <__aeabi_i2d>
 8003444:	4604      	mov	r4, r0
 8003446:	460d      	mov	r5, r1
 8003448:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800344c:	4618      	mov	r0, r3
 800344e:	f7fd f87b 	bl	8000548 <__aeabi_f2d>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	ec43 2b10 	vmov	d0, r2, r3
 800345a:	f00b fb49 	bl	800eaf0 <cos>
 800345e:	ec53 2b10 	vmov	r2, r3, d0
 8003462:	4620      	mov	r0, r4
 8003464:	4629      	mov	r1, r5
 8003466:	f7fd f8c7 	bl	80005f8 <__aeabi_dmul>
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	4690      	mov	r8, r2
 8003470:	4699      	mov	r9, r3
 8003472:	49de      	ldr	r1, [pc, #888]	@ (80037ec <main+0x12c0>)
 8003474:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 8003478:	4613      	mov	r3, r2
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	4413      	add	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	3308      	adds	r3, #8
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f7fd f84c 	bl	8000524 <__aeabi_i2d>
 800348c:	4604      	mov	r4, r0
 800348e:	460d      	mov	r5, r1
 8003490:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003494:	4618      	mov	r0, r3
 8003496:	f7fd f857 	bl	8000548 <__aeabi_f2d>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	ec43 2b10 	vmov	d0, r2, r3
 80034a2:	f00b fb79 	bl	800eb98 <sin>
 80034a6:	ec53 2b10 	vmov	r2, r3, d0
 80034aa:	4620      	mov	r0, r4
 80034ac:	4629      	mov	r1, r5
 80034ae:	f7fd f8a3 	bl	80005f8 <__aeabi_dmul>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4640      	mov	r0, r8
 80034b8:	4649      	mov	r1, r9
 80034ba:	f7fc fee5 	bl	8000288 <__aeabi_dsub>
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	4610      	mov	r0, r2
 80034c4:	4619      	mov	r1, r3
 80034c6:	f7fd fb6f 	bl	8000ba8 <__aeabi_d2f>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
			    float rot_y = orig_points [i][1];
 80034d0:	49c6      	ldr	r1, [pc, #792]	@ (80037ec <main+0x12c0>)
 80034d2:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 80034d6:	4613      	mov	r3, r2
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	3304      	adds	r3, #4
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	ee07 3a90 	vmov	s15, r3
 80034e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034ec:	edc7 7a76 	vstr	s15, [r7, #472]	@ 0x1d8
			    float rot_z = orig_points [i][0] * sin(rpy_rad[2]) + orig_points [i][2] * cos(rpy_rad[2]);
 80034f0:	49be      	ldr	r1, [pc, #760]	@ (80037ec <main+0x12c0>)
 80034f2:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 80034f6:	4613      	mov	r3, r2
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	4413      	add	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f7fd f80e 	bl	8000524 <__aeabi_i2d>
 8003508:	4604      	mov	r4, r0
 800350a:	460d      	mov	r5, r1
 800350c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003510:	4618      	mov	r0, r3
 8003512:	f7fd f819 	bl	8000548 <__aeabi_f2d>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	ec43 2b10 	vmov	d0, r2, r3
 800351e:	f00b fb3b 	bl	800eb98 <sin>
 8003522:	ec53 2b10 	vmov	r2, r3, d0
 8003526:	4620      	mov	r0, r4
 8003528:	4629      	mov	r1, r5
 800352a:	f7fd f865 	bl	80005f8 <__aeabi_dmul>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4690      	mov	r8, r2
 8003534:	4699      	mov	r9, r3
 8003536:	49ad      	ldr	r1, [pc, #692]	@ (80037ec <main+0x12c0>)
 8003538:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 800353c:	4613      	mov	r3, r2
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	3308      	adds	r3, #8
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f7fc ffea 	bl	8000524 <__aeabi_i2d>
 8003550:	4604      	mov	r4, r0
 8003552:	460d      	mov	r5, r1
 8003554:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003558:	4618      	mov	r0, r3
 800355a:	f7fc fff5 	bl	8000548 <__aeabi_f2d>
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	ec43 2b10 	vmov	d0, r2, r3
 8003566:	f00b fac3 	bl	800eaf0 <cos>
 800356a:	ec53 2b10 	vmov	r2, r3, d0
 800356e:	4620      	mov	r0, r4
 8003570:	4629      	mov	r1, r5
 8003572:	f7fd f841 	bl	80005f8 <__aeabi_dmul>
 8003576:	4602      	mov	r2, r0
 8003578:	460b      	mov	r3, r1
 800357a:	4640      	mov	r0, r8
 800357c:	4649      	mov	r1, r9
 800357e:	f7fc fe85 	bl	800028c <__adddf3>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4610      	mov	r0, r2
 8003588:	4619      	mov	r1, r3
 800358a:	f7fd fb0d 	bl	8000ba8 <__aeabi_d2f>
 800358e:	4603      	mov	r3, r0
 8003590:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4

			    // rotate 3d points around the X axis (changing Y and Z positions)
			    float rot_xx = rot_x;
 8003594:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8003598:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
				float rot_yy = rot_y * cos(rpy_rad[0]) - rot_z * sin(rpy_rad[0]);
 800359c:	f8d7 01d8 	ldr.w	r0, [r7, #472]	@ 0x1d8
 80035a0:	f7fc ffd2 	bl	8000548 <__aeabi_f2d>
 80035a4:	4604      	mov	r4, r0
 80035a6:	460d      	mov	r5, r1
 80035a8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fc ffcb 	bl	8000548 <__aeabi_f2d>
 80035b2:	4602      	mov	r2, r0
 80035b4:	460b      	mov	r3, r1
 80035b6:	ec43 2b10 	vmov	d0, r2, r3
 80035ba:	f00b fa99 	bl	800eaf0 <cos>
 80035be:	ec53 2b10 	vmov	r2, r3, d0
 80035c2:	4620      	mov	r0, r4
 80035c4:	4629      	mov	r1, r5
 80035c6:	f7fd f817 	bl	80005f8 <__aeabi_dmul>
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	4690      	mov	r8, r2
 80035d0:	4699      	mov	r9, r3
 80035d2:	f8d7 01d4 	ldr.w	r0, [r7, #468]	@ 0x1d4
 80035d6:	f7fc ffb7 	bl	8000548 <__aeabi_f2d>
 80035da:	4604      	mov	r4, r0
 80035dc:	460d      	mov	r5, r1
 80035de:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fc ffb0 	bl	8000548 <__aeabi_f2d>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	ec43 2b10 	vmov	d0, r2, r3
 80035f0:	f00b fad2 	bl	800eb98 <sin>
 80035f4:	ec53 2b10 	vmov	r2, r3, d0
 80035f8:	4620      	mov	r0, r4
 80035fa:	4629      	mov	r1, r5
 80035fc:	f7fc fffc 	bl	80005f8 <__aeabi_dmul>
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	4640      	mov	r0, r8
 8003606:	4649      	mov	r1, r9
 8003608:	f7fc fe3e 	bl	8000288 <__aeabi_dsub>
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	4610      	mov	r0, r2
 8003612:	4619      	mov	r1, r3
 8003614:	f7fd fac8 	bl	8000ba8 <__aeabi_d2f>
 8003618:	4603      	mov	r3, r0
 800361a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
				float rot_zz = rot_y * sin(rpy_rad[0]) + rot_z * cos(rpy_rad[0]);
 800361e:	f8d7 01d8 	ldr.w	r0, [r7, #472]	@ 0x1d8
 8003622:	f7fc ff91 	bl	8000548 <__aeabi_f2d>
 8003626:	4604      	mov	r4, r0
 8003628:	460d      	mov	r5, r1
 800362a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800362e:	4618      	mov	r0, r3
 8003630:	f7fc ff8a 	bl	8000548 <__aeabi_f2d>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	ec43 2b10 	vmov	d0, r2, r3
 800363c:	f00b faac 	bl	800eb98 <sin>
 8003640:	ec53 2b10 	vmov	r2, r3, d0
 8003644:	4620      	mov	r0, r4
 8003646:	4629      	mov	r1, r5
 8003648:	f7fc ffd6 	bl	80005f8 <__aeabi_dmul>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4690      	mov	r8, r2
 8003652:	4699      	mov	r9, r3
 8003654:	f8d7 01d4 	ldr.w	r0, [r7, #468]	@ 0x1d4
 8003658:	f7fc ff76 	bl	8000548 <__aeabi_f2d>
 800365c:	4604      	mov	r4, r0
 800365e:	460d      	mov	r5, r1
 8003660:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003664:	4618      	mov	r0, r3
 8003666:	f7fc ff6f 	bl	8000548 <__aeabi_f2d>
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	ec43 2b10 	vmov	d0, r2, r3
 8003672:	f00b fa3d 	bl	800eaf0 <cos>
 8003676:	ec53 2b10 	vmov	r2, r3, d0
 800367a:	4620      	mov	r0, r4
 800367c:	4629      	mov	r1, r5
 800367e:	f7fc ffbb 	bl	80005f8 <__aeabi_dmul>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	4640      	mov	r0, r8
 8003688:	4649      	mov	r1, r9
 800368a:	f7fc fdff 	bl	800028c <__adddf3>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	4610      	mov	r0, r2
 8003694:	4619      	mov	r1, r3
 8003696:	f7fd fa87 	bl	8000ba8 <__aeabi_d2f>
 800369a:	4603      	mov	r3, r0
 800369c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8

				// rotate 3d points around the Z axis (changing X and Y positions)
				float rot_xxx = rot_xx * cos(rpy_rad[1]) - rot_yy * sin(rpy_rad[1]);
 80036a0:	f8d7 01d0 	ldr.w	r0, [r7, #464]	@ 0x1d0
 80036a4:	f7fc ff50 	bl	8000548 <__aeabi_f2d>
 80036a8:	4604      	mov	r4, r0
 80036aa:	460d      	mov	r5, r1
 80036ac:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fc ff49 	bl	8000548 <__aeabi_f2d>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	ec43 2b10 	vmov	d0, r2, r3
 80036be:	f00b fa17 	bl	800eaf0 <cos>
 80036c2:	ec53 2b10 	vmov	r2, r3, d0
 80036c6:	4620      	mov	r0, r4
 80036c8:	4629      	mov	r1, r5
 80036ca:	f7fc ff95 	bl	80005f8 <__aeabi_dmul>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	4690      	mov	r8, r2
 80036d4:	4699      	mov	r9, r3
 80036d6:	f8d7 01cc 	ldr.w	r0, [r7, #460]	@ 0x1cc
 80036da:	f7fc ff35 	bl	8000548 <__aeabi_f2d>
 80036de:	4604      	mov	r4, r0
 80036e0:	460d      	mov	r5, r1
 80036e2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fc ff2e 	bl	8000548 <__aeabi_f2d>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	ec43 2b10 	vmov	d0, r2, r3
 80036f4:	f00b fa50 	bl	800eb98 <sin>
 80036f8:	ec53 2b10 	vmov	r2, r3, d0
 80036fc:	4620      	mov	r0, r4
 80036fe:	4629      	mov	r1, r5
 8003700:	f7fc ff7a 	bl	80005f8 <__aeabi_dmul>
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	4640      	mov	r0, r8
 800370a:	4649      	mov	r1, r9
 800370c:	f7fc fdbc 	bl	8000288 <__aeabi_dsub>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4610      	mov	r0, r2
 8003716:	4619      	mov	r1, r3
 8003718:	f7fd fa46 	bl	8000ba8 <__aeabi_d2f>
 800371c:	4603      	mov	r3, r0
 800371e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
				float rot_yyy = rot_xx * sin(rpy_rad[1]) + rot_yy * cos(rpy_rad[1]);
 8003722:	f8d7 01d0 	ldr.w	r0, [r7, #464]	@ 0x1d0
 8003726:	f7fc ff0f 	bl	8000548 <__aeabi_f2d>
 800372a:	4604      	mov	r4, r0
 800372c:	460d      	mov	r5, r1
 800372e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8003732:	4618      	mov	r0, r3
 8003734:	f7fc ff08 	bl	8000548 <__aeabi_f2d>
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	ec43 2b10 	vmov	d0, r2, r3
 8003740:	f00b fa2a 	bl	800eb98 <sin>
 8003744:	ec53 2b10 	vmov	r2, r3, d0
 8003748:	4620      	mov	r0, r4
 800374a:	4629      	mov	r1, r5
 800374c:	f7fc ff54 	bl	80005f8 <__aeabi_dmul>
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	4690      	mov	r8, r2
 8003756:	4699      	mov	r9, r3
 8003758:	f8d7 01cc 	ldr.w	r0, [r7, #460]	@ 0x1cc
 800375c:	f7fc fef4 	bl	8000548 <__aeabi_f2d>
 8003760:	4604      	mov	r4, r0
 8003762:	460d      	mov	r5, r1
 8003764:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8003768:	4618      	mov	r0, r3
 800376a:	f7fc feed 	bl	8000548 <__aeabi_f2d>
 800376e:	4602      	mov	r2, r0
 8003770:	460b      	mov	r3, r1
 8003772:	ec43 2b10 	vmov	d0, r2, r3
 8003776:	f00b f9bb 	bl	800eaf0 <cos>
 800377a:	ec53 2b10 	vmov	r2, r3, d0
 800377e:	4620      	mov	r0, r4
 8003780:	4629      	mov	r1, r5
 8003782:	f7fc ff39 	bl	80005f8 <__aeabi_dmul>
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	4640      	mov	r0, r8
 800378c:	4649      	mov	r1, r9
 800378e:	f7fc fd7d 	bl	800028c <__adddf3>
 8003792:	4602      	mov	r2, r0
 8003794:	460b      	mov	r3, r1
 8003796:	4610      	mov	r0, r2
 8003798:	4619      	mov	r1, r3
 800379a:	f7fd fa05 	bl	8000ba8 <__aeabi_d2f>
 800379e:	4603      	mov	r3, r0
 80037a0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
				float rot_zzz = rot_zz + z_offset;
 80037a4:	4b12      	ldr	r3, [pc, #72]	@ (80037f0 <main+0x12c4>)
 80037a6:	edd3 7a00 	vldr	s15, [r3]
 80037aa:	ed97 7a72 	vldr	s14, [r7, #456]	@ 0x1c8
 80037ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037b2:	edc7 7a6f 	vstr	s15, [r7, #444]	@ 0x1bc

			    // project 3d points into 2d space with perspective divide -- 2D x = x/z,   2D y = y/z
			    points[i][0] = round(64 + rot_xxx / rot_zzz * cube_size);
 80037b6:	edd7 6a71 	vldr	s13, [r7, #452]	@ 0x1c4
 80037ba:	edd7 7a6f 	vldr	s15, [r7, #444]	@ 0x1bc
 80037be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037c2:	4b0c      	ldr	r3, [pc, #48]	@ (80037f4 <main+0x12c8>)
 80037c4:	edd3 7a00 	vldr	s15, [r3]
 80037c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037cc:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80037f8 <main+0x12cc>
 80037d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037d4:	ee17 0a90 	vmov	r0, s15
 80037d8:	f7fc feb6 	bl	8000548 <__aeabi_f2d>
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	ec43 2b10 	vmov	d0, r2, r3
 80037e4:	f00b fb06 	bl	800edf4 <round>
 80037e8:	e008      	b.n	80037fc <main+0x12d0>
 80037ea:	bf00      	nop
 80037ec:	20000010 	.word	0x20000010
 80037f0:	20000070 	.word	0x20000070
 80037f4:	20000074 	.word	0x20000074
 80037f8:	42800000 	.word	0x42800000
 80037fc:	ec53 2b10 	vmov	r2, r3, d0
 8003800:	4610      	mov	r0, r2
 8003802:	4619      	mov	r1, r3
 8003804:	f7fd f9a8 	bl	8000b58 <__aeabi_d2iz>
 8003808:	4602      	mov	r2, r0
 800380a:	4950      	ldr	r1, [pc, #320]	@ (800394c <main+0x1420>)
 800380c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003810:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			    points[i][1] = round(32 + rot_yyy / rot_zzz * cube_size);
 8003814:	edd7 6a70 	vldr	s13, [r7, #448]	@ 0x1c0
 8003818:	edd7 7a6f 	vldr	s15, [r7, #444]	@ 0x1bc
 800381c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003820:	4b4b      	ldr	r3, [pc, #300]	@ (8003950 <main+0x1424>)
 8003822:	edd3 7a00 	vldr	s15, [r3]
 8003826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800382a:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8003954 <main+0x1428>
 800382e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003832:	ee17 0a90 	vmov	r0, s15
 8003836:	f7fc fe87 	bl	8000548 <__aeabi_f2d>
 800383a:	4602      	mov	r2, r0
 800383c:	460b      	mov	r3, r1
 800383e:	ec43 2b10 	vmov	d0, r2, r3
 8003842:	f00b fad7 	bl	800edf4 <round>
 8003846:	ec53 2b10 	vmov	r2, r3, d0
 800384a:	4610      	mov	r0, r2
 800384c:	4619      	mov	r1, r3
 800384e:	f7fd f983 	bl	8000b58 <__aeabi_d2iz>
 8003852:	4602      	mov	r2, r0
 8003854:	493d      	ldr	r1, [pc, #244]	@ (800394c <main+0x1420>)
 8003856:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	440b      	add	r3, r1
 800385e:	605a      	str	r2, [r3, #4]
			    ssd1306_DrawPixel(points[i][0], points[i][1], White);
 8003860:	4a3a      	ldr	r2, [pc, #232]	@ (800394c <main+0x1420>)
 8003862:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003866:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800386a:	b2d8      	uxtb	r0, r3
 800386c:	4a37      	ldr	r2, [pc, #220]	@ (800394c <main+0x1420>)
 800386e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	4413      	add	r3, r2
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2201      	movs	r2, #1
 800387c:	4619      	mov	r1, r3
 800387e:	f002 fc85 	bl	800618c <ssd1306_DrawPixel>
			for (int i=0; i<8; i++) {
 8003882:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003886:	3301      	adds	r3, #1
 8003888:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800388c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003890:	2b07      	cmp	r3, #7
 8003892:	f77f adcb 	ble.w	800342c <main+0xf00>
			}
			draw_wireframe();
 8003896:	f000 fea5 	bl	80045e4 <draw_wireframe>
			ssd1306_UpdateScreen();
 800389a:	f002 fc4f 	bl	800613c <ssd1306_UpdateScreen>
			frame_timer2 = HAL_GetTick();
 800389e:	f002 fef5 	bl	800668c <HAL_GetTick>
 80038a2:	4603      	mov	r3, r0
 80038a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003958 <main+0x142c>)
 80038a6:	6013      	str	r3, [r2, #0]
			if (HAL_GetTick() - cube_tick > 1000) {
 80038a8:	f002 fef0 	bl	800668c <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	4b2b      	ldr	r3, [pc, #172]	@ (800395c <main+0x1430>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038b8:	d941      	bls.n	800393e <main+0x1412>
				cube_tick = HAL_GetTick();
 80038ba:	f002 fee7 	bl	800668c <HAL_GetTick>
 80038be:	4603      	mov	r3, r0
 80038c0:	4a26      	ldr	r2, [pc, #152]	@ (800395c <main+0x1430>)
 80038c2:	6013      	str	r3, [r2, #0]
				char msg[100];
				sprintf(msg,"Kalman Roll, Pitch, Yaw: %.2f, %.2f, %.2f\r\nFrame rate: %.2f\r\n\r\n",kalman_rpy[0],kalman_rpy[1],kalman_rpy[2], 1000.0/(float)(frame_timer2-frame_timer1));
 80038c4:	4b26      	ldr	r3, [pc, #152]	@ (8003960 <main+0x1434>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fc fe3d 	bl	8000548 <__aeabi_f2d>
 80038ce:	4682      	mov	sl, r0
 80038d0:	468b      	mov	fp, r1
 80038d2:	4b23      	ldr	r3, [pc, #140]	@ (8003960 <main+0x1434>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fc fe36 	bl	8000548 <__aeabi_f2d>
 80038dc:	4604      	mov	r4, r0
 80038de:	460d      	mov	r5, r1
 80038e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003960 <main+0x1434>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fc fe2f 	bl	8000548 <__aeabi_f2d>
 80038ea:	4680      	mov	r8, r0
 80038ec:	4689      	mov	r9, r1
 80038ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003958 <main+0x142c>)
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003964 <main+0x1438>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	ee07 3a90 	vmov	s15, r3
 80038fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003900:	ee17 0a90 	vmov	r0, s15
 8003904:	f7fc fe20 	bl	8000548 <__aeabi_f2d>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	f04f 0000 	mov.w	r0, #0
 8003910:	4915      	ldr	r1, [pc, #84]	@ (8003968 <main+0x143c>)
 8003912:	f7fc ff9b 	bl	800084c <__aeabi_ddiv>
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 800391e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003922:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003926:	e9cd 4500 	strd	r4, r5, [sp]
 800392a:	4652      	mov	r2, sl
 800392c:	465b      	mov	r3, fp
 800392e:	490f      	ldr	r1, [pc, #60]	@ (800396c <main+0x1440>)
 8003930:	f008 febe 	bl	800c6b0 <siprintf>
				print_text(msg);
 8003934:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003938:	4618      	mov	r0, r3
 800393a:	f000 fcef 	bl	800431c <print_text>
			}
		}
		LAST_MODE = MODE;
 800393e:	4b0c      	ldr	r3, [pc, #48]	@ (8003970 <main+0x1444>)
 8003940:	781a      	ldrb	r2, [r3, #0]
 8003942:	4b0c      	ldr	r3, [pc, #48]	@ (8003974 <main+0x1448>)
 8003944:	701a      	strb	r2, [r3, #0]
		if(HAL_GetTick()-wifi_tick >= 250) {
 8003946:	f7fe be83 	b.w	8002650 <main+0x124>
 800394a:	bf00      	nop
 800394c:	200003c0 	.word	0x200003c0
 8003950:	20000074 	.word	0x20000074
 8003954:	42000000 	.word	0x42000000
 8003958:	20000738 	.word	0x20000738
 800395c:	20000660 	.word	0x20000660
 8003960:	20000630 	.word	0x20000630
 8003964:	20000734 	.word	0x20000734
 8003968:	408f4000 	.word	0x408f4000
 800396c:	08010ac8 	.word	0x08010ac8
 8003970:	200005c4 	.word	0x200005c4
 8003974:	20000733 	.word	0x20000733

08003978 <SystemClock_Config>:
}

//------------------------SYSTEM INIT FUNCTIONS------------------------

void SystemClock_Config(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b096      	sub	sp, #88	@ 0x58
 800397c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800397e:	f107 0314 	add.w	r3, r7, #20
 8003982:	2244      	movs	r2, #68	@ 0x44
 8003984:	2100      	movs	r1, #0
 8003986:	4618      	mov	r0, r3
 8003988:	f008 ff9a 	bl	800c8c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800398c:	463b      	mov	r3, r7
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	605a      	str	r2, [r3, #4]
 8003994:	609a      	str	r2, [r3, #8]
 8003996:	60da      	str	r2, [r3, #12]
 8003998:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800399a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800399e:	f004 f867 	bl	8007a70 <HAL_PWREx_ControlVoltageScaling>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80039a8:	f000 fa24 	bl	8003df4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80039ac:	f004 f842 	bl	8007a34 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80039b0:	4b21      	ldr	r3, [pc, #132]	@ (8003a38 <SystemClock_Config+0xc0>)
 80039b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039b6:	4a20      	ldr	r2, [pc, #128]	@ (8003a38 <SystemClock_Config+0xc0>)
 80039b8:	f023 0318 	bic.w	r3, r3, #24
 80039bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80039c0:	2314      	movs	r3, #20
 80039c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80039c4:	2301      	movs	r3, #1
 80039c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80039c8:	2301      	movs	r3, #1
 80039ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80039cc:	2300      	movs	r3, #0
 80039ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80039d0:	2360      	movs	r3, #96	@ 0x60
 80039d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039d4:	2302      	movs	r3, #2
 80039d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80039d8:	2301      	movs	r3, #1
 80039da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80039dc:	2301      	movs	r3, #1
 80039de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80039e0:	2328      	movs	r3, #40	@ 0x28
 80039e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80039e4:	2307      	movs	r3, #7
 80039e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80039e8:	2302      	movs	r3, #2
 80039ea:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80039ec:	2302      	movs	r3, #2
 80039ee:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80039f0:	f107 0314 	add.w	r3, r7, #20
 80039f4:	4618      	mov	r0, r3
 80039f6:	f004 f891 	bl	8007b1c <HAL_RCC_OscConfig>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <SystemClock_Config+0x8c>
    Error_Handler();
 8003a00:	f000 f9f8 	bl	8003df4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a04:	230f      	movs	r3, #15
 8003a06:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a10:	2300      	movs	r3, #0
 8003a12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a14:	2300      	movs	r3, #0
 8003a16:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003a18:	463b      	mov	r3, r7
 8003a1a:	2104      	movs	r1, #4
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f004 fc65 	bl	80082ec <HAL_RCC_ClockConfig>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003a28:	f000 f9e4 	bl	8003df4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8003a2c:	f004 fe64 	bl	80086f8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8003a30:	bf00      	nop
 8003a32:	3758      	adds	r7, #88	@ 0x58
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40021000 	.word	0x40021000

08003a3c <MX_TIM3_Init>:

static void MX_TIM3_Init(void) {
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08e      	sub	sp, #56	@ 0x38
 8003a40:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003a46:	2200      	movs	r2, #0
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	605a      	str	r2, [r3, #4]
 8003a4c:	609a      	str	r2, [r3, #8]
 8003a4e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a50:	f107 031c 	add.w	r3, r7, #28
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	605a      	str	r2, [r3, #4]
 8003a5a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8003a5c:	463b      	mov	r3, r7
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	605a      	str	r2, [r3, #4]
 8003a64:	609a      	str	r2, [r3, #8]
 8003a66:	60da      	str	r2, [r3, #12]
 8003a68:	611a      	str	r2, [r3, #16]
 8003a6a:	615a      	str	r2, [r3, #20]
 8003a6c:	619a      	str	r2, [r3, #24]

	htim3.Instance = TIM3;
 8003a6e:	4b2d      	ldr	r3, [pc, #180]	@ (8003b24 <MX_TIM3_Init+0xe8>)
 8003a70:	4a2d      	ldr	r2, [pc, #180]	@ (8003b28 <MX_TIM3_Init+0xec>)
 8003a72:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8003a74:	4b2b      	ldr	r3, [pc, #172]	@ (8003b24 <MX_TIM3_Init+0xe8>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a7a:	4b2a      	ldr	r3, [pc, #168]	@ (8003b24 <MX_TIM3_Init+0xe8>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000;
 8003a80:	4b28      	ldr	r3, [pc, #160]	@ (8003b24 <MX_TIM3_Init+0xe8>)
 8003a82:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003a86:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a88:	4b26      	ldr	r3, [pc, #152]	@ (8003b24 <MX_TIM3_Init+0xe8>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a8e:	4b25      	ldr	r3, [pc, #148]	@ (8003b24 <MX_TIM3_Init+0xe8>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8003a94:	4823      	ldr	r0, [pc, #140]	@ (8003b24 <MX_TIM3_Init+0xe8>)
 8003a96:	f005 fe1b 	bl	80096d0 <HAL_TIM_Base_Init>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <MX_TIM3_Init+0x68>
		Error_Handler();
 8003aa0:	f000 f9a8 	bl	8003df4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003aa4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8003aaa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003aae:	4619      	mov	r1, r3
 8003ab0:	481c      	ldr	r0, [pc, #112]	@ (8003b24 <MX_TIM3_Init+0xe8>)
 8003ab2:	f006 f84b 	bl	8009b4c <HAL_TIM_ConfigClockSource>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <MX_TIM3_Init+0x84>
		Error_Handler();
 8003abc:	f000 f99a 	bl	8003df4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8003ac0:	4818      	ldr	r0, [pc, #96]	@ (8003b24 <MX_TIM3_Init+0xe8>)
 8003ac2:	f005 fe30 	bl	8009726 <HAL_TIM_PWM_Init>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <MX_TIM3_Init+0x94>
		Error_Handler();
 8003acc:	f000 f992 	bl	8003df4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8003ad8:	f107 031c 	add.w	r3, r7, #28
 8003adc:	4619      	mov	r1, r3
 8003ade:	4811      	ldr	r0, [pc, #68]	@ (8003b24 <MX_TIM3_Init+0xe8>)
 8003ae0:	f006 fd2a 	bl	800a538 <HAL_TIMEx_MasterConfigSynchronization>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <MX_TIM3_Init+0xb2>
		Error_Handler();
 8003aea:	f000 f983 	bl	8003df4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003aee:	2360      	movs	r3, #96	@ 0x60
 8003af0:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 500;
 8003af2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003af6:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003af8:	2300      	movs	r3, #0
 8003afa:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003afc:	2300      	movs	r3, #0
 8003afe:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8003b00:	463b      	mov	r3, r7
 8003b02:	2200      	movs	r2, #0
 8003b04:	4619      	mov	r1, r3
 8003b06:	4807      	ldr	r0, [pc, #28]	@ (8003b24 <MX_TIM3_Init+0xe8>)
 8003b08:	f005 ff08 	bl	800991c <HAL_TIM_PWM_ConfigChannel>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <MX_TIM3_Init+0xda>
		Error_Handler();
 8003b12:	f000 f96f 	bl	8003df4 <Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim3);
 8003b16:	4803      	ldr	r0, [pc, #12]	@ (8003b24 <MX_TIM3_Init+0xe8>)
 8003b18:	f000 ffe6 	bl	8004ae8 <HAL_TIM_MspPostInit>

}
 8003b1c:	bf00      	nop
 8003b1e:	3738      	adds	r7, #56	@ 0x38
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	20000530 	.word	0x20000530
 8003b28:	40000400 	.word	0x40000400

08003b2c <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b088      	sub	sp, #32
 8003b30:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();  // Enable AHB2 Bus for GPIOC
 8003b32:	4b1c      	ldr	r3, [pc, #112]	@ (8003ba4 <MX_GPIO_Init+0x78>)
 8003b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b36:	4a1b      	ldr	r2, [pc, #108]	@ (8003ba4 <MX_GPIO_Init+0x78>)
 8003b38:	f043 0304 	orr.w	r3, r3, #4
 8003b3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b3e:	4b19      	ldr	r3, [pc, #100]	@ (8003ba4 <MX_GPIO_Init+0x78>)
 8003b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b42:	f003 0304 	and.w	r3, r3, #4
 8003b46:	60bb      	str	r3, [r7, #8]
 8003b48:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003b4a:	4b16      	ldr	r3, [pc, #88]	@ (8003ba4 <MX_GPIO_Init+0x78>)
 8003b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b4e:	4a15      	ldr	r2, [pc, #84]	@ (8003ba4 <MX_GPIO_Init+0x78>)
 8003b50:	f043 0302 	orr.w	r3, r3, #2
 8003b54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b56:	4b13      	ldr	r3, [pc, #76]	@ (8003ba4 <MX_GPIO_Init+0x78>)
 8003b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	607b      	str	r3, [r7, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003b62:	f107 030c 	add.w	r3, r7, #12
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	605a      	str	r2, [r3, #4]
 8003b6c:	609a      	str	r2, [r3, #8]
 8003b6e:	60da      	str	r2, [r3, #12]
 8003b70:	611a      	str	r2, [r3, #16]

	// Configuration of BUTTON_EXTI13_Pin (GPIO-C Pin-13) as AF,
	GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8003b72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b76:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003b78:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba8 <MX_GPIO_Init+0x7c>)
 8003b7a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b80:	f107 030c 	add.w	r3, r7, #12
 8003b84:	4619      	mov	r1, r3
 8003b86:	4809      	ldr	r0, [pc, #36]	@ (8003bac <MX_GPIO_Init+0x80>)
 8003b88:	f002 ff00 	bl	800698c <HAL_GPIO_Init>

	// Enable NVIC EXTI line 13
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0x00, 0x00);
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	2100      	movs	r1, #0
 8003b90:	2028      	movs	r0, #40	@ 0x28
 8003b92:	f002 fe84 	bl	800689e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003b96:	2028      	movs	r0, #40	@ 0x28
 8003b98:	f002 fe9d 	bl	80068d6 <HAL_NVIC_EnableIRQ>
}
 8003b9c:	bf00      	nop
 8003b9e:	3720      	adds	r7, #32
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	10210000 	.word	0x10210000
 8003bac:	48000800 	.word	0x48000800

08003bb0 <UART1_Init>:

static void UART1_Init(void) {
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
	/* Pin configuration for UART. BSP_COM_Init() can do this automatically */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003bb6:	4b2a      	ldr	r3, [pc, #168]	@ (8003c60 <UART1_Init+0xb0>)
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bba:	4a29      	ldr	r2, [pc, #164]	@ (8003c60 <UART1_Init+0xb0>)
 8003bbc:	f043 0302 	orr.w	r3, r3, #2
 8003bc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bc2:	4b27      	ldr	r3, [pc, #156]	@ (8003c60 <UART1_Init+0xb0>)
 8003bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003bce:	1d3b      	adds	r3, r7, #4
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	605a      	str	r2, [r3, #4]
 8003bd6:	609a      	str	r2, [r3, #8]
 8003bd8:	60da      	str	r2, [r3, #12]
 8003bda:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003bdc:	2307      	movs	r3, #7
 8003bde:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_6;
 8003be0:	23c0      	movs	r3, #192	@ 0xc0
 8003be2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be4:	2302      	movs	r3, #2
 8003be6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bec:	2303      	movs	r3, #3
 8003bee:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bf0:	1d3b      	adds	r3, r7, #4
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	481b      	ldr	r0, [pc, #108]	@ (8003c64 <UART1_Init+0xb4>)
 8003bf6:	f002 fec9 	bl	800698c <HAL_GPIO_Init>

	/* Configuring UART1, can be used in project (copy and paste) since we only can use UART1*/
	huart1.Instance = USART1;
 8003bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8003c68 <UART1_Init+0xb8>)
 8003bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8003c6c <UART1_Init+0xbc>)
 8003bfe:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8003c00:	4b19      	ldr	r3, [pc, #100]	@ (8003c68 <UART1_Init+0xb8>)
 8003c02:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003c06:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c08:	4b17      	ldr	r3, [pc, #92]	@ (8003c68 <UART1_Init+0xb8>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8003c0e:	4b16      	ldr	r3, [pc, #88]	@ (8003c68 <UART1_Init+0xb8>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8003c14:	4b14      	ldr	r3, [pc, #80]	@ (8003c68 <UART1_Init+0xb8>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003c1a:	4b13      	ldr	r3, [pc, #76]	@ (8003c68 <UART1_Init+0xb8>)
 8003c1c:	220c      	movs	r2, #12
 8003c1e:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c20:	4b11      	ldr	r3, [pc, #68]	@ (8003c68 <UART1_Init+0xb8>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c26:	4b10      	ldr	r3, [pc, #64]	@ (8003c68 <UART1_Init+0xb8>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8003c68 <UART1_Init+0xb8>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c32:	4b0d      	ldr	r3, [pc, #52]	@ (8003c68 <UART1_Init+0xb8>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8003c38:	480b      	ldr	r0, [pc, #44]	@ (8003c68 <UART1_Init+0xb8>)
 8003c3a:	f006 fd05 	bl	800a648 <HAL_UART_Init>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <UART1_Init+0x98>
		while (1);
 8003c44:	bf00      	nop
 8003c46:	e7fd      	b.n	8003c44 <UART1_Init+0x94>
	}
	HAL_NVIC_SetPriority(USART1_IRQn, 0x02, 0x00);
 8003c48:	2200      	movs	r2, #0
 8003c4a:	2102      	movs	r1, #2
 8003c4c:	2025      	movs	r0, #37	@ 0x25
 8003c4e:	f002 fe26 	bl	800689e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c52:	2025      	movs	r0, #37	@ 0x25
 8003c54:	f002 fe3f 	bl	80068d6 <HAL_NVIC_EnableIRQ>
}
 8003c58:	bf00      	nop
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40021000 	.word	0x40021000
 8003c64:	48000400 	.word	0x48000400
 8003c68:	20000400 	.word	0x20000400
 8003c6c:	40013800 	.word	0x40013800

08003c70 <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c76:	f107 030c 	add.w	r3, r7, #12
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	605a      	str	r2, [r3, #4]
 8003c80:	609a      	str	r2, [r3, #8]
 8003c82:	60da      	str	r2, [r3, #12]
 8003c84:	611a      	str	r2, [r3, #16]
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003c86:	4b28      	ldr	r3, [pc, #160]	@ (8003d28 <MX_I2C1_Init+0xb8>)
 8003c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c8a:	4a27      	ldr	r2, [pc, #156]	@ (8003d28 <MX_I2C1_Init+0xb8>)
 8003c8c:	f043 0302 	orr.w	r3, r3, #2
 8003c90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c92:	4b25      	ldr	r3, [pc, #148]	@ (8003d28 <MX_I2C1_Init+0xb8>)
 8003c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	60bb      	str	r3, [r7, #8]
 8003c9c:	68bb      	ldr	r3, [r7, #8]

	// Configure GPIO PB8 and PB9
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c9e:	2304      	movs	r3, #4
 8003ca0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003ca2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003ca6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ca8:	2312      	movs	r3, #18
 8003caa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cac:	2301      	movs	r3, #1
 8003cae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cb4:	f107 030c 	add.w	r3, r7, #12
 8003cb8:	4619      	mov	r1, r3
 8003cba:	481c      	ldr	r0, [pc, #112]	@ (8003d2c <MX_I2C1_Init+0xbc>)
 8003cbc:	f002 fe66 	bl	800698c <HAL_GPIO_Init>

	// Configure I2C1
	hi2c1.Instance = I2C1;
 8003cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d30 <MX_I2C1_Init+0xc0>)
 8003cc2:	4a1c      	ldr	r2, [pc, #112]	@ (8003d34 <MX_I2C1_Init+0xc4>)
 8003cc4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.OwnAddress1 = 0;
 8003cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d30 <MX_I2C1_Init+0xc0>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	609a      	str	r2, [r3, #8]
	hi2c1.Init.Timing = 0x00C0216C;	//400khz
 8003ccc:	4b18      	ldr	r3, [pc, #96]	@ (8003d30 <MX_I2C1_Init+0xc0>)
 8003cce:	4a1a      	ldr	r2, [pc, #104]	@ (8003d38 <MX_I2C1_Init+0xc8>)
 8003cd0:	605a      	str	r2, [r3, #4]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003cd2:	4b17      	ldr	r3, [pc, #92]	@ (8003d30 <MX_I2C1_Init+0xc0>)
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003cd8:	4b15      	ldr	r3, [pc, #84]	@ (8003d30 <MX_I2C1_Init+0xc0>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8003cde:	4b14      	ldr	r3, [pc, #80]	@ (8003d30 <MX_I2C1_Init+0xc0>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003ce4:	4b12      	ldr	r3, [pc, #72]	@ (8003d30 <MX_I2C1_Init+0xc0>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003cea:	4b11      	ldr	r3, [pc, #68]	@ (8003d30 <MX_I2C1_Init+0xc0>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8003d30 <MX_I2C1_Init+0xc0>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	621a      	str	r2, [r3, #32]

	__HAL_RCC_I2C1_CLK_ENABLE();
 8003cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8003d28 <MX_I2C1_Init+0xb8>)
 8003cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cfa:	4a0b      	ldr	r2, [pc, #44]	@ (8003d28 <MX_I2C1_Init+0xb8>)
 8003cfc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003d00:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d02:	4b09      	ldr	r3, [pc, #36]	@ (8003d28 <MX_I2C1_Init+0xb8>)
 8003d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d0a:	607b      	str	r3, [r7, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]

	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003d0e:	4808      	ldr	r0, [pc, #32]	@ (8003d30 <MX_I2C1_Init+0xc0>)
 8003d10:	f003 f93c 	bl	8006f8c <HAL_I2C_Init>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <MX_I2C1_Init+0xae>
	{
		Error_Handler();
 8003d1a:	f000 f86b 	bl	8003df4 <Error_Handler>
	}
}
 8003d1e:	bf00      	nop
 8003d20:	3720      	adds	r7, #32
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	48000400 	.word	0x48000400
 8003d30:	20000480 	.word	0x20000480
 8003d34:	40005400 	.word	0x40005400
 8003d38:	00c0216c 	.word	0x00c0216c

08003d3c <ACC_EXTI11_Init>:

void ACC_EXTI11_Init(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d42:	1d3b      	adds	r3, r7, #4
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	605a      	str	r2, [r3, #4]
 8003d4a:	609a      	str	r2, [r3, #8]
 8003d4c:	60da      	str	r2, [r3, #12]
 8003d4e:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003d50:	4b25      	ldr	r3, [pc, #148]	@ (8003de8 <ACC_EXTI11_Init+0xac>)
 8003d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d54:	4a24      	ldr	r2, [pc, #144]	@ (8003de8 <ACC_EXTI11_Init+0xac>)
 8003d56:	f043 0308 	orr.w	r3, r3, #8
 8003d5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d5c:	4b22      	ldr	r3, [pc, #136]	@ (8003de8 <ACC_EXTI11_Init+0xac>)
 8003d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d60:	f003 0308 	and.w	r3, r3, #8
 8003d64:	603b      	str	r3, [r7, #0]
 8003d66:	683b      	ldr	r3, [r7, #0]

	// Configuration of LSM6DSL_INT1_EXTI11_Pin (GPIO-D Pin-11) as AF,
	GPIO_InitStruct.Pin = LSM6DSL_INT1_EXTI11_Pin;
 8003d68:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003d6c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003d6e:	4b1f      	ldr	r3, [pc, #124]	@ (8003dec <ACC_EXTI11_Init+0xb0>)
 8003d70:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d76:	1d3b      	adds	r3, r7, #4
 8003d78:	4619      	mov	r1, r3
 8003d7a:	481d      	ldr	r0, [pc, #116]	@ (8003df0 <ACC_EXTI11_Init+0xb4>)
 8003d7c:	f002 fe06 	bl	800698c <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0x01, 0x00);
 8003d80:	2200      	movs	r2, #0
 8003d82:	2101      	movs	r1, #1
 8003d84:	2028      	movs	r0, #40	@ 0x28
 8003d86:	f002 fd8a 	bl	800689e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003d8a:	2028      	movs	r0, #40	@ 0x28
 8003d8c:	f002 fda3 	bl	80068d6 <HAL_NVIC_EnableIRQ>

	SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, 0x60); // initialise and set accelerometer
 8003d90:	2260      	movs	r2, #96	@ 0x60
 8003d92:	2110      	movs	r1, #16
 8003d94:	20d4      	movs	r0, #212	@ 0xd4
 8003d96:	f001 f9e3 	bl	8005160 <SENSOR_IO_Write>
	SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_TAP_CFG1, 0x80); // enable freefall
 8003d9a:	2280      	movs	r2, #128	@ 0x80
 8003d9c:	2158      	movs	r1, #88	@ 0x58
 8003d9e:	20d4      	movs	r0, #212	@ 0xd4
 8003da0:	f001 f9de 	bl	8005160 <SENSOR_IO_Write>
	SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WAKE_UP_DUR, 0xF8); // set ff duration
 8003da4:	22f8      	movs	r2, #248	@ 0xf8
 8003da6:	215c      	movs	r1, #92	@ 0x5c
 8003da8:	20d4      	movs	r0, #212	@ 0xd4
 8003daa:	f001 f9d9 	bl	8005160 <SENSOR_IO_Write>
	SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_FREE_FALL, 0x02); // set ff threshold
 8003dae:	2202      	movs	r2, #2
 8003db0:	215d      	movs	r1, #93	@ 0x5d
 8003db2:	20d4      	movs	r0, #212	@ 0xd4
 8003db4:	f001 f9d4 	bl	8005160 <SENSOR_IO_Write>
	SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MD1_CFG, 0x10); // route free fall event on INT1
 8003db8:	2210      	movs	r2, #16
 8003dba:	215e      	movs	r1, #94	@ 0x5e
 8003dbc:	20d4      	movs	r0, #212	@ 0xd4
 8003dbe:	f001 f9cf 	bl	8005160 <SENSOR_IO_Write>

	// Pedo interrupt
	SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL10_C, 0X16); // enable pedo and func
 8003dc2:	2216      	movs	r2, #22
 8003dc4:	2119      	movs	r1, #25
 8003dc6:	20d4      	movs	r0, #212	@ 0xd4
 8003dc8:	f001 f9ca 	bl	8005160 <SENSOR_IO_Write>
	SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_FIFO_CTRL2, 0xC0); // Enable pedometer step counter and write mode at every step
 8003dcc:	22c0      	movs	r2, #192	@ 0xc0
 8003dce:	2107      	movs	r1, #7
 8003dd0:	20d4      	movs	r0, #212	@ 0xd4
 8003dd2:	f001 f9c5 	bl	8005160 <SENSOR_IO_Write>
	SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL, 0x80); // route step detector interrupt on INT1
 8003dd6:	2280      	movs	r2, #128	@ 0x80
 8003dd8:	210d      	movs	r1, #13
 8003dda:	20d4      	movs	r0, #212	@ 0xd4
 8003ddc:	f001 f9c0 	bl	8005160 <SENSOR_IO_Write>
}
 8003de0:	bf00      	nop
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40021000 	.word	0x40021000
 8003dec:	10210000 	.word	0x10210000
 8003df0:	48000c00 	.word	0x48000c00

08003df4 <Error_Handler>:
    	Error_Handler();
	}
}

void Error_Handler(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
	printf("ERROR");
 8003df8:	4802      	ldr	r0, [pc, #8]	@ (8003e04 <Error_Handler+0x10>)
 8003dfa:	f008 fbe9 	bl	800c5d0 <iprintf>
}
 8003dfe:	bf00      	nop
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	08010b08 	.word	0x08010b08

08003e08 <IMU_calib>:

//------------------------CUSTOM FUNCTIONS------------------------

void IMU_calib(void) {
 8003e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e0c:	b0ce      	sub	sp, #312	@ 0x138
 8003e0e:	af0c      	add	r7, sp, #48	@ 0x30
	//calibrate initial offsets, assumes board pointing north for the raw mag threshold
	char msg[] = "Calibrating IMU, do not move!\r\n";
 8003e10:	4bbd      	ldr	r3, [pc, #756]	@ (8004108 <IMU_calib+0x300>)
 8003e12:	f107 04d8 	add.w	r4, r7, #216	@ 0xd8
 8003e16:	461d      	mov	r5, r3
 8003e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003e20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen(msg),0xFFFF);
 8003e24:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7fc fa21 	bl	8000270 <strlen>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 8003e36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e3a:	48b4      	ldr	r0, [pc, #720]	@ (800410c <IMU_calib+0x304>)
 8003e3c:	f006 fc52 	bl	800a6e4 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8003e40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003e44:	f002 fc2e 	bl	80066a4 <HAL_Delay>
	float gyro_raw[3], accel_raw[3], mag_raw[3];
	int num = 50;
 8003e48:	2332      	movs	r3, #50	@ 0x32
 8003e4a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
	for (int i=0; i<num; ++i) {
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003e54:	e08b      	b.n	8003f6e <IMU_calib+0x166>
		BSP_GYRO_GetXYZ(gyro_raw);
 8003e56:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f001 fa6e 	bl	800533c <BSP_GYRO_GetXYZ>
		BSP_ACCELERO_AccGetXYZ(accel_raw);
 8003e60:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8003e64:	4618      	mov	r0, r3
 8003e66:	f001 fa0f 	bl	8005288 <BSP_ACCELERO_AccGetXYZ>
		BSP_MAGNETO_GetXYZ(mag_raw);
 8003e6a:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f001 fad6 	bl	8005420 <BSP_MAGNETO_GetXYZ>
		for (int j=0; j<3; ++j) {
 8003e74:	2300      	movs	r3, #0
 8003e76:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003e7a:	e038      	b.n	8003eee <IMU_calib+0xe6>
			gyro_offset[j] += gyro_raw[j];	//sum up gyro errors
 8003e7c:	4aa4      	ldr	r2, [pc, #656]	@ (8004110 <IMU_calib+0x308>)
 8003e7e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	ed93 7a00 	vldr	s14, [r3]
 8003e8a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	33f0      	adds	r3, #240	@ 0xf0
 8003e92:	f107 0218 	add.w	r2, r7, #24
 8003e96:	4413      	add	r3, r2
 8003e98:	3b3c      	subs	r3, #60	@ 0x3c
 8003e9a:	edd3 7a00 	vldr	s15, [r3]
 8003e9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ea2:	4a9b      	ldr	r2, [pc, #620]	@ (8004110 <IMU_calib+0x308>)
 8003ea4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	edc3 7a00 	vstr	s15, [r3]
			accel_offset[j] += accel_raw[j];	//sum up accel errors
 8003eb0:	4a98      	ldr	r2, [pc, #608]	@ (8004114 <IMU_calib+0x30c>)
 8003eb2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	ed93 7a00 	vldr	s14, [r3]
 8003ebe:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	33f0      	adds	r3, #240	@ 0xf0
 8003ec6:	f107 0218 	add.w	r2, r7, #24
 8003eca:	4413      	add	r3, r2
 8003ecc:	3b48      	subs	r3, #72	@ 0x48
 8003ece:	edd3 7a00 	vldr	s15, [r3]
 8003ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ed6:	4a8f      	ldr	r2, [pc, #572]	@ (8004114 <IMU_calib+0x30c>)
 8003ed8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4413      	add	r3, r2
 8003ee0:	edc3 7a00 	vstr	s15, [r3]
		for (int j=0; j<3; ++j) {
 8003ee4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003ee8:	3301      	adds	r3, #1
 8003eea:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003eee:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	ddc2      	ble.n	8003e7c <IMU_calib+0x74>
		}
		yaw_offset += atan2(mag_raw[1]-mag_offset[1],mag_raw[0]-mag_offset[0]);
 8003ef6:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003efa:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 8004118 <IMU_calib+0x310>
 8003efe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003f02:	ee17 0a90 	vmov	r0, s15
 8003f06:	f7fc fb1f 	bl	8000548 <__aeabi_f2d>
 8003f0a:	4604      	mov	r4, r0
 8003f0c:	460d      	mov	r5, r1
 8003f0e:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003f12:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 800411c <IMU_calib+0x314>
 8003f16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003f1a:	ee17 0a90 	vmov	r0, s15
 8003f1e:	f7fc fb13 	bl	8000548 <__aeabi_f2d>
 8003f22:	4602      	mov	r2, r0
 8003f24:	460b      	mov	r3, r1
 8003f26:	ec43 2b11 	vmov	d1, r2, r3
 8003f2a:	ec45 4b10 	vmov	d0, r4, r5
 8003f2e:	f00a fd83 	bl	800ea38 <atan2>
 8003f32:	ec55 4b10 	vmov	r4, r5, d0
 8003f36:	4b7a      	ldr	r3, [pc, #488]	@ (8004120 <IMU_calib+0x318>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fc fb04 	bl	8000548 <__aeabi_f2d>
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	4620      	mov	r0, r4
 8003f46:	4629      	mov	r1, r5
 8003f48:	f7fc f9a0 	bl	800028c <__adddf3>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4610      	mov	r0, r2
 8003f52:	4619      	mov	r1, r3
 8003f54:	f7fc fe28 	bl	8000ba8 <__aeabi_d2f>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	4a71      	ldr	r2, [pc, #452]	@ (8004120 <IMU_calib+0x318>)
 8003f5c:	6013      	str	r3, [r2, #0]
		HAL_Delay(5);
 8003f5e:	2005      	movs	r0, #5
 8003f60:	f002 fba0 	bl	80066a4 <HAL_Delay>
	for (int i=0; i<num; ++i) {
 8003f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f68:	3301      	adds	r3, #1
 8003f6a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003f6e:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8003f72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003f76:	429a      	cmp	r2, r3
 8003f78:	f6ff af6d 	blt.w	8003e56 <IMU_calib+0x4e>
	}
	for (int i=0; i<3; ++i) {
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003f82:	e04f      	b.n	8004024 <IMU_calib+0x21c>
		gyro_offset[i] /= (float)num;
 8003f84:	4a62      	ldr	r2, [pc, #392]	@ (8004110 <IMU_calib+0x308>)
 8003f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	edd3 6a00 	vldr	s13, [r3]
 8003f92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003f96:	ee07 3a90 	vmov	s15, r3
 8003f9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fa2:	4a5b      	ldr	r2, [pc, #364]	@ (8004110 <IMU_calib+0x308>)
 8003fa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	edc3 7a00 	vstr	s15, [r3]
		if (i==2) accel_offset[i] = accel_offset[i]/(float)num - 1.0;	//z will be reading g normally (1.0)
 8003fb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d11a      	bne.n	8003fee <IMU_calib+0x1e6>
 8003fb8:	4a56      	ldr	r2, [pc, #344]	@ (8004114 <IMU_calib+0x30c>)
 8003fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	edd3 6a00 	vldr	s13, [r3]
 8003fc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003fca:	ee07 3a90 	vmov	s15, r3
 8003fce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003fda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003fde:	4a4d      	ldr	r2, [pc, #308]	@ (8004114 <IMU_calib+0x30c>)
 8003fe0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	edc3 7a00 	vstr	s15, [r3]
 8003fec:	e015      	b.n	800401a <IMU_calib+0x212>
		else accel_offset[i] /= (float)num;
 8003fee:	4a49      	ldr	r2, [pc, #292]	@ (8004114 <IMU_calib+0x30c>)
 8003ff0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	edd3 6a00 	vldr	s13, [r3]
 8003ffc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004000:	ee07 3a90 	vmov	s15, r3
 8004004:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004008:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800400c:	4a41      	ldr	r2, [pc, #260]	@ (8004114 <IMU_calib+0x30c>)
 800400e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	edc3 7a00 	vstr	s15, [r3]
	for (int i=0; i<3; ++i) {
 800401a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800401e:	3301      	adds	r3, #1
 8004020:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004024:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004028:	2b02      	cmp	r3, #2
 800402a:	ddab      	ble.n	8003f84 <IMU_calib+0x17c>
	}
	yaw_offset = yaw_offset/(float)num *RAD_TO_DEG;
 800402c:	4b3c      	ldr	r3, [pc, #240]	@ (8004120 <IMU_calib+0x318>)
 800402e:	edd3 6a00 	vldr	s13, [r3]
 8004032:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004036:	ee07 3a90 	vmov	s15, r3
 800403a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800403e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004042:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8004124 <IMU_calib+0x31c>
 8004046:	ee67 7a87 	vmul.f32	s15, s15, s14
 800404a:	4b35      	ldr	r3, [pc, #212]	@ (8004120 <IMU_calib+0x318>)
 800404c:	edc3 7a00 	vstr	s15, [r3]
	char offsets_msg[150];
	sprintf(offsets_msg,"Offsets:\r\nGyro -> X:%f, Y:%f, Z:%f\r\nAcc -> X:%f, Y:%f, Z:%f\r\nYaw -> %f\r\n", gyro_offset[0],gyro_offset[1],gyro_offset[2],accel_offset[0],accel_offset[1],accel_offset[2],yaw_offset);
 8004050:	4b2f      	ldr	r3, [pc, #188]	@ (8004110 <IMU_calib+0x308>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f7fc fa77 	bl	8000548 <__aeabi_f2d>
 800405a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800405e:	4b2c      	ldr	r3, [pc, #176]	@ (8004110 <IMU_calib+0x308>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	4618      	mov	r0, r3
 8004064:	f7fc fa70 	bl	8000548 <__aeabi_f2d>
 8004068:	4680      	mov	r8, r0
 800406a:	4689      	mov	r9, r1
 800406c:	4b28      	ldr	r3, [pc, #160]	@ (8004110 <IMU_calib+0x308>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	4618      	mov	r0, r3
 8004072:	f7fc fa69 	bl	8000548 <__aeabi_f2d>
 8004076:	4682      	mov	sl, r0
 8004078:	468b      	mov	fp, r1
 800407a:	4b26      	ldr	r3, [pc, #152]	@ (8004114 <IMU_calib+0x30c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f7fc fa62 	bl	8000548 <__aeabi_f2d>
 8004084:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004088:	4b22      	ldr	r3, [pc, #136]	@ (8004114 <IMU_calib+0x30c>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	4618      	mov	r0, r3
 800408e:	f7fc fa5b 	bl	8000548 <__aeabi_f2d>
 8004092:	e9c7 0100 	strd	r0, r1, [r7]
 8004096:	4b1f      	ldr	r3, [pc, #124]	@ (8004114 <IMU_calib+0x30c>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	4618      	mov	r0, r3
 800409c:	f7fc fa54 	bl	8000548 <__aeabi_f2d>
 80040a0:	4604      	mov	r4, r0
 80040a2:	460d      	mov	r5, r1
 80040a4:	4b1e      	ldr	r3, [pc, #120]	@ (8004120 <IMU_calib+0x318>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7fc fa4d 	bl	8000548 <__aeabi_f2d>
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	f107 001c 	add.w	r0, r7, #28
 80040b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80040ba:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80040be:	ed97 7b00 	vldr	d7, [r7]
 80040c2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80040c6:	ed97 7b02 	vldr	d7, [r7, #8]
 80040ca:	ed8d 7b04 	vstr	d7, [sp, #16]
 80040ce:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80040d2:	e9cd 8900 	strd	r8, r9, [sp]
 80040d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80040da:	4913      	ldr	r1, [pc, #76]	@ (8004128 <IMU_calib+0x320>)
 80040dc:	f008 fae8 	bl	800c6b0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) offsets_msg, strlen(offsets_msg),0xFFFF);
 80040e0:	f107 031c 	add.w	r3, r7, #28
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7fc f8c3 	bl	8000270 <strlen>
 80040ea:	4603      	mov	r3, r0
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	f107 011c 	add.w	r1, r7, #28
 80040f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80040f6:	4805      	ldr	r0, [pc, #20]	@ (800410c <IMU_calib+0x304>)
 80040f8:	f006 faf4 	bl	800a6e4 <HAL_UART_Transmit>
}
 80040fc:	bf00      	nop
 80040fe:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8004102:	46bd      	mov	sp, r7
 8004104:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004108:	08010b5c 	.word	0x08010b5c
 800410c:	20000400 	.word	0x20000400
 8004110:	20000608 	.word	0x20000608
 8004114:	20000614 	.word	0x20000614
 8004118:	c327f333 	.word	0xc327f333
 800411c:	41b50000 	.word	0x41b50000
 8004120:	20000620 	.word	0x20000620
 8004124:	42652ee1 	.word	0x42652ee1
 8004128:	08010b10 	.word	0x08010b10

0800412c <get_pht_readings>:

void get_pht_readings(void) {
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
	//pht readings
	pressure = BSP_PSENSOR_ReadPressure();
 8004130:	f001 f9ae 	bl	8005490 <BSP_PSENSOR_ReadPressure>
 8004134:	eef0 7a40 	vmov.f32	s15, s0
 8004138:	4b09      	ldr	r3, [pc, #36]	@ (8004160 <get_pht_readings+0x34>)
 800413a:	edc3 7a00 	vstr	s15, [r3]
	humidity = BSP_HSENSOR_ReadHumidity();
 800413e:	f001 f935 	bl	80053ac <BSP_HSENSOR_ReadHumidity>
 8004142:	eef0 7a40 	vmov.f32	s15, s0
 8004146:	4b07      	ldr	r3, [pc, #28]	@ (8004164 <get_pht_readings+0x38>)
 8004148:	edc3 7a00 	vstr	s15, [r3]
	temp = BSP_TSENSOR_ReadTemp();
 800414c:	f001 f9ca 	bl	80054e4 <BSP_TSENSOR_ReadTemp>
 8004150:	eef0 7a40 	vmov.f32	s15, s0
 8004154:	4b04      	ldr	r3, [pc, #16]	@ (8004168 <get_pht_readings+0x3c>)
 8004156:	edc3 7a00 	vstr	s15, [r3]
}
 800415a:	bf00      	nop
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	200005e0 	.word	0x200005e0
 8004164:	200005dc 	.word	0x200005dc
 8004168:	200005d8 	.word	0x200005d8

0800416c <get_imu_readings>:

void get_imu_readings(void) {
 800416c:	b5b0      	push	{r4, r5, r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
	// imu readings
	BSP_GYRO_GetXYZ(gyro_data);	// units of deg/sec
 8004172:	4862      	ldr	r0, [pc, #392]	@ (80042fc <get_imu_readings+0x190>)
 8004174:	f001 f8e2 	bl	800533c <BSP_GYRO_GetXYZ>
	BSP_ACCELERO_AccGetXYZ(accel_data);	//units of g
 8004178:	4861      	ldr	r0, [pc, #388]	@ (8004300 <get_imu_readings+0x194>)
 800417a:	f001 f885 	bl	8005288 <BSP_ACCELERO_AccGetXYZ>
	BSP_MAGNETO_GetXYZ(mag_data);	//units of uT (micro Tesla)
 800417e:	4861      	ldr	r0, [pc, #388]	@ (8004304 <get_imu_readings+0x198>)
 8004180:	f001 f94e 	bl	8005420 <BSP_MAGNETO_GetXYZ>
	for (int i=0; i<3; ++i) {
 8004184:	2300      	movs	r3, #0
 8004186:	607b      	str	r3, [r7, #4]
 8004188:	e03e      	b.n	8004208 <get_imu_readings+0x9c>
		gyro_data[i] -= gyro_offset[i];
 800418a:	4a5c      	ldr	r2, [pc, #368]	@ (80042fc <get_imu_readings+0x190>)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	ed93 7a00 	vldr	s14, [r3]
 8004196:	4a5c      	ldr	r2, [pc, #368]	@ (8004308 <get_imu_readings+0x19c>)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	edd3 7a00 	vldr	s15, [r3]
 80041a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041a6:	4a55      	ldr	r2, [pc, #340]	@ (80042fc <get_imu_readings+0x190>)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	edc3 7a00 	vstr	s15, [r3]
		accel_data[i] -= accel_offset[i];
 80041b2:	4a53      	ldr	r2, [pc, #332]	@ (8004300 <get_imu_readings+0x194>)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	ed93 7a00 	vldr	s14, [r3]
 80041be:	4a53      	ldr	r2, [pc, #332]	@ (800430c <get_imu_readings+0x1a0>)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	edd3 7a00 	vldr	s15, [r3]
 80041ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041ce:	4a4c      	ldr	r2, [pc, #304]	@ (8004300 <get_imu_readings+0x194>)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	edc3 7a00 	vstr	s15, [r3]
		mag_data[i] -= mag_offset[i];
 80041da:	4a4a      	ldr	r2, [pc, #296]	@ (8004304 <get_imu_readings+0x198>)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	ed93 7a00 	vldr	s14, [r3]
 80041e6:	4a4a      	ldr	r2, [pc, #296]	@ (8004310 <get_imu_readings+0x1a4>)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	edd3 7a00 	vldr	s15, [r3]
 80041f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041f6:	4a43      	ldr	r2, [pc, #268]	@ (8004304 <get_imu_readings+0x198>)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4413      	add	r3, r2
 80041fe:	edc3 7a00 	vstr	s15, [r3]
	for (int i=0; i<3; ++i) {
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3301      	adds	r3, #1
 8004206:	607b      	str	r3, [r7, #4]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b02      	cmp	r3, #2
 800420c:	ddbd      	ble.n	800418a <get_imu_readings+0x1e>
	}

	rpy[0] = atan2(accel_data[1],sqrt(accel_data[0]*accel_data[0] + accel_data[2]*accel_data[2])) * RAD_TO_DEG;
 800420e:	4b3c      	ldr	r3, [pc, #240]	@ (8004300 <get_imu_readings+0x194>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	4618      	mov	r0, r3
 8004214:	f7fc f998 	bl	8000548 <__aeabi_f2d>
 8004218:	4604      	mov	r4, r0
 800421a:	460d      	mov	r5, r1
 800421c:	4b38      	ldr	r3, [pc, #224]	@ (8004300 <get_imu_readings+0x194>)
 800421e:	ed93 7a00 	vldr	s14, [r3]
 8004222:	4b37      	ldr	r3, [pc, #220]	@ (8004300 <get_imu_readings+0x194>)
 8004224:	edd3 7a00 	vldr	s15, [r3]
 8004228:	ee27 7a27 	vmul.f32	s14, s14, s15
 800422c:	4b34      	ldr	r3, [pc, #208]	@ (8004300 <get_imu_readings+0x194>)
 800422e:	edd3 6a02 	vldr	s13, [r3, #8]
 8004232:	4b33      	ldr	r3, [pc, #204]	@ (8004300 <get_imu_readings+0x194>)
 8004234:	edd3 7a02 	vldr	s15, [r3, #8]
 8004238:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800423c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004240:	ee17 0a90 	vmov	r0, s15
 8004244:	f7fc f980 	bl	8000548 <__aeabi_f2d>
 8004248:	4602      	mov	r2, r0
 800424a:	460b      	mov	r3, r1
 800424c:	ec43 2b10 	vmov	d0, r2, r3
 8004250:	f00a fc22 	bl	800ea98 <sqrt>
 8004254:	eeb0 7a40 	vmov.f32	s14, s0
 8004258:	eef0 7a60 	vmov.f32	s15, s1
 800425c:	eeb0 1a47 	vmov.f32	s2, s14
 8004260:	eef0 1a67 	vmov.f32	s3, s15
 8004264:	ec45 4b10 	vmov	d0, r4, r5
 8004268:	f00a fbe6 	bl	800ea38 <atan2>
 800426c:	ec55 4b10 	vmov	r4, r5, d0
 8004270:	4b28      	ldr	r3, [pc, #160]	@ (8004314 <get_imu_readings+0x1a8>)
 8004272:	4618      	mov	r0, r3
 8004274:	f7fc f968 	bl	8000548 <__aeabi_f2d>
 8004278:	4602      	mov	r2, r0
 800427a:	460b      	mov	r3, r1
 800427c:	4620      	mov	r0, r4
 800427e:	4629      	mov	r1, r5
 8004280:	f7fc f9ba 	bl	80005f8 <__aeabi_dmul>
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	4610      	mov	r0, r2
 800428a:	4619      	mov	r1, r3
 800428c:	f7fc fc8c 	bl	8000ba8 <__aeabi_d2f>
 8004290:	4603      	mov	r3, r0
 8004292:	4a21      	ldr	r2, [pc, #132]	@ (8004318 <get_imu_readings+0x1ac>)
 8004294:	6013      	str	r3, [r2, #0]
	rpy[1] = atan2(-accel_data[0],accel_data[2]) * RAD_TO_DEG;
 8004296:	4b1a      	ldr	r3, [pc, #104]	@ (8004300 <get_imu_readings+0x194>)
 8004298:	edd3 7a00 	vldr	s15, [r3]
 800429c:	eef1 7a67 	vneg.f32	s15, s15
 80042a0:	ee17 3a90 	vmov	r3, s15
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fc f94f 	bl	8000548 <__aeabi_f2d>
 80042aa:	4604      	mov	r4, r0
 80042ac:	460d      	mov	r5, r1
 80042ae:	4b14      	ldr	r3, [pc, #80]	@ (8004300 <get_imu_readings+0x194>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fc f948 	bl	8000548 <__aeabi_f2d>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	ec43 2b11 	vmov	d1, r2, r3
 80042c0:	ec45 4b10 	vmov	d0, r4, r5
 80042c4:	f00a fbb8 	bl	800ea38 <atan2>
 80042c8:	ec55 4b10 	vmov	r4, r5, d0
 80042cc:	4b11      	ldr	r3, [pc, #68]	@ (8004314 <get_imu_readings+0x1a8>)
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fc f93a 	bl	8000548 <__aeabi_f2d>
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	4620      	mov	r0, r4
 80042da:	4629      	mov	r1, r5
 80042dc:	f7fc f98c 	bl	80005f8 <__aeabi_dmul>
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	4610      	mov	r0, r2
 80042e6:	4619      	mov	r1, r3
 80042e8:	f7fc fc5e 	bl	8000ba8 <__aeabi_d2f>
 80042ec:	4603      	mov	r3, r0
 80042ee:	4a0a      	ldr	r2, [pc, #40]	@ (8004318 <get_imu_readings+0x1ac>)
 80042f0:	6053      	str	r3, [r2, #4]
}
 80042f2:	bf00      	nop
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bdb0      	pop	{r4, r5, r7, pc}
 80042fa:	bf00      	nop
 80042fc:	200005e4 	.word	0x200005e4
 8004300:	200005f0 	.word	0x200005f0
 8004304:	200005fc 	.word	0x200005fc
 8004308:	20000608 	.word	0x20000608
 800430c:	20000614 	.word	0x20000614
 8004310:	080113d4 	.word	0x080113d4
 8004314:	42652ee1 	.word	0x42652ee1
 8004318:	20000624 	.word	0x20000624

0800431c <print_text>:

void print_text(char msg[]) {
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) msg,strlen(msg), 0xFFFF);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7fb ffa3 	bl	8000270 <strlen>
 800432a:	4603      	mov	r3, r0
 800432c:	b29a      	uxth	r2, r3
 800432e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004332:	6879      	ldr	r1, [r7, #4]
 8004334:	4803      	ldr	r0, [pc, #12]	@ (8004344 <print_text+0x28>)
 8004336:	f006 f9d5 	bl	800a6e4 <HAL_UART_Transmit>
}
 800433a:	bf00      	nop
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	20000400 	.word	0x20000400

08004348 <print_readings>:

void print_readings(int seconds_count) {
 8004348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800434c:	f5ad 7d3b 	sub.w	sp, sp, #748	@ 0x2ec
 8004350:	af1e      	add	r7, sp, #120	@ 0x78
 8004352:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8004356:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800435a:	6018      	str	r0, [r3, #0]
	char message_print1[500];
	sprintf(message_print1,
			"%03d: GYRO -> %0.4f, %0.4f, %0.4f\r\n%03d: ACCEL -> %0.4f, %0.4f, %0.4f\r\n%03d: MAG -> %0.4f, %0.4f, %0.4f\r\n%03d: BARO -> %0.4f; HUMIDITY -> %0.4f; TEMP -> %0.4f;\r\n\r\n",
			seconds_count,  gyro_data[0], gyro_data[1], gyro_data[2],
 800435c:	4b7b      	ldr	r3, [pc, #492]	@ (800454c <print_readings+0x204>)
 800435e:	681b      	ldr	r3, [r3, #0]
	sprintf(message_print1,
 8004360:	4618      	mov	r0, r3
 8004362:	f7fc f8f1 	bl	8000548 <__aeabi_f2d>
 8004366:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
			seconds_count,  gyro_data[0], gyro_data[1], gyro_data[2],
 800436a:	4b78      	ldr	r3, [pc, #480]	@ (800454c <print_readings+0x204>)
 800436c:	685b      	ldr	r3, [r3, #4]
	sprintf(message_print1,
 800436e:	4618      	mov	r0, r3
 8004370:	f7fc f8ea 	bl	8000548 <__aeabi_f2d>
 8004374:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
			seconds_count,  gyro_data[0], gyro_data[1], gyro_data[2],
 8004378:	4b74      	ldr	r3, [pc, #464]	@ (800454c <print_readings+0x204>)
 800437a:	689b      	ldr	r3, [r3, #8]
	sprintf(message_print1,
 800437c:	4618      	mov	r0, r3
 800437e:	f7fc f8e3 	bl	8000548 <__aeabi_f2d>
 8004382:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
			seconds_count,  accel_data[0], accel_data[1], accel_data[2],
 8004386:	4b72      	ldr	r3, [pc, #456]	@ (8004550 <print_readings+0x208>)
 8004388:	681b      	ldr	r3, [r3, #0]
	sprintf(message_print1,
 800438a:	4618      	mov	r0, r3
 800438c:	f7fc f8dc 	bl	8000548 <__aeabi_f2d>
 8004390:	e9c7 0108 	strd	r0, r1, [r7, #32]
			seconds_count,  accel_data[0], accel_data[1], accel_data[2],
 8004394:	4b6e      	ldr	r3, [pc, #440]	@ (8004550 <print_readings+0x208>)
 8004396:	685b      	ldr	r3, [r3, #4]
	sprintf(message_print1,
 8004398:	4618      	mov	r0, r3
 800439a:	f7fc f8d5 	bl	8000548 <__aeabi_f2d>
 800439e:	e9c7 0106 	strd	r0, r1, [r7, #24]
			seconds_count,  accel_data[0], accel_data[1], accel_data[2],
 80043a2:	4b6b      	ldr	r3, [pc, #428]	@ (8004550 <print_readings+0x208>)
 80043a4:	689b      	ldr	r3, [r3, #8]
	sprintf(message_print1,
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fc f8ce 	bl	8000548 <__aeabi_f2d>
 80043ac:	e9c7 0104 	strd	r0, r1, [r7, #16]
			seconds_count,  mag_data[0], mag_data[1], mag_data[2],
 80043b0:	4b68      	ldr	r3, [pc, #416]	@ (8004554 <print_readings+0x20c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
	sprintf(message_print1,
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fc f8c7 	bl	8000548 <__aeabi_f2d>
 80043ba:	e9c7 0102 	strd	r0, r1, [r7, #8]
			seconds_count,  mag_data[0], mag_data[1], mag_data[2],
 80043be:	4b65      	ldr	r3, [pc, #404]	@ (8004554 <print_readings+0x20c>)
 80043c0:	685b      	ldr	r3, [r3, #4]
	sprintf(message_print1,
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fc f8c0 	bl	8000548 <__aeabi_f2d>
 80043c8:	e9c7 0100 	strd	r0, r1, [r7]
			seconds_count,  mag_data[0], mag_data[1], mag_data[2],
 80043cc:	4b61      	ldr	r3, [pc, #388]	@ (8004554 <print_readings+0x20c>)
 80043ce:	689b      	ldr	r3, [r3, #8]
	sprintf(message_print1,
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fc f8b9 	bl	8000548 <__aeabi_f2d>
 80043d6:	4682      	mov	sl, r0
 80043d8:	468b      	mov	fp, r1
 80043da:	4b5f      	ldr	r3, [pc, #380]	@ (8004558 <print_readings+0x210>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fc f8b2 	bl	8000548 <__aeabi_f2d>
 80043e4:	4680      	mov	r8, r0
 80043e6:	4689      	mov	r9, r1
 80043e8:	4b5c      	ldr	r3, [pc, #368]	@ (800455c <print_readings+0x214>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7fc f8ab 	bl	8000548 <__aeabi_f2d>
 80043f2:	4604      	mov	r4, r0
 80043f4:	460d      	mov	r5, r1
 80043f6:	4b5a      	ldr	r3, [pc, #360]	@ (8004560 <print_readings+0x218>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fc f8a4 	bl	8000548 <__aeabi_f2d>
 8004400:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8004404:	f5a3 720b 	sub.w	r2, r3, #556	@ 0x22c
 8004408:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 800440c:	e9cd 011c 	strd	r0, r1, [sp, #112]	@ 0x70
 8004410:	e9cd 451a 	strd	r4, r5, [sp, #104]	@ 0x68
 8004414:	e9cd 8918 	strd	r8, r9, [sp, #96]	@ 0x60
 8004418:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800441c:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	9316      	str	r3, [sp, #88]	@ 0x58
 8004424:	e9cd ab14 	strd	sl, fp, [sp, #80]	@ 0x50
 8004428:	ed97 7b00 	vldr	d7, [r7]
 800442c:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 8004430:	ed97 7b02 	vldr	d7, [r7, #8]
 8004434:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 8004438:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800443c:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	930e      	str	r3, [sp, #56]	@ 0x38
 8004444:	ed97 7b04 	vldr	d7, [r7, #16]
 8004448:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800444c:	ed97 7b06 	vldr	d7, [r7, #24]
 8004450:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8004454:	ed97 7b08 	vldr	d7, [r7, #32]
 8004458:	ed8d 7b08 	vstr	d7, [sp, #32]
 800445c:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8004460:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	9306      	str	r3, [sp, #24]
 8004468:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800446c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004470:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8004474:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004478:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800447c:	ed8d 7b00 	vstr	d7, [sp]
 8004480:	6812      	ldr	r2, [r2, #0]
 8004482:	4938      	ldr	r1, [pc, #224]	@ (8004564 <print_readings+0x21c>)
 8004484:	4630      	mov	r0, r6
 8004486:	f008 f913 	bl	800c6b0 <siprintf>
			seconds_count, pressure, humidity, temp);
	HAL_UART_Transmit(&huart1, (uint8_t*) message_print1,strlen(message_print1), 0xFFFF);
 800448a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800448e:	4618      	mov	r0, r3
 8004490:	f7fb feee 	bl	8000270 <strlen>
 8004494:	4603      	mov	r3, r0
 8004496:	b29a      	uxth	r2, r3
 8004498:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 800449c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80044a0:	4831      	ldr	r0, [pc, #196]	@ (8004568 <print_readings+0x220>)
 80044a2:	f006 f91f 	bl	800a6e4 <HAL_UART_Transmit>
	//OLED readings
	char oled_message_readings1[15];
	char oled_message_readings2[15];
	char oled_message_readings3[15];

	sprintf(oled_message_readings1, "%.2fC", temp);
 80044a6:	4b2e      	ldr	r3, [pc, #184]	@ (8004560 <print_readings+0x218>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fc f84c 	bl	8000548 <__aeabi_f2d>
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 80044b8:	492c      	ldr	r1, [pc, #176]	@ (800456c <print_readings+0x224>)
 80044ba:	f008 f8f9 	bl	800c6b0 <siprintf>
	sprintf(oled_message_readings2, "%.1f%%", humidity);
 80044be:	4b27      	ldr	r3, [pc, #156]	@ (800455c <print_readings+0x214>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fc f840 	bl	8000548 <__aeabi_f2d>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 80044d0:	4927      	ldr	r1, [pc, #156]	@ (8004570 <print_readings+0x228>)
 80044d2:	f008 f8ed 	bl	800c6b0 <siprintf>
	sprintf(oled_message_readings3, "%.2fhPa", pressure);
 80044d6:	4b20      	ldr	r3, [pc, #128]	@ (8004558 <print_readings+0x210>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fc f834 	bl	8000548 <__aeabi_f2d>
 80044e0:	4602      	mov	r2, r0
 80044e2:	460b      	mov	r3, r1
 80044e4:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80044e8:	4922      	ldr	r1, [pc, #136]	@ (8004574 <print_readings+0x22c>)
 80044ea:	f008 f8e1 	bl	800c6b0 <siprintf>
	ssd1306_Reset();
 80044ee:	f001 fd69 	bl	8005fc4 <ssd1306_Reset>
	ssd1306_SetCursor(79, 24);
 80044f2:	2118      	movs	r1, #24
 80044f4:	204f      	movs	r0, #79	@ 0x4f
 80044f6:	f001 ff55 	bl	80063a4 <ssd1306_SetCursor>
	ssd1306_WriteString(oled_message_readings1, Font_7x10, White);
 80044fa:	4b1f      	ldr	r3, [pc, #124]	@ (8004578 <print_readings+0x230>)
 80044fc:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 8004500:	2201      	movs	r2, #1
 8004502:	9200      	str	r2, [sp, #0]
 8004504:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004506:	f001 ff27 	bl	8006358 <ssd1306_WriteString>
	ssd1306_SetCursor(79, 34);
 800450a:	2122      	movs	r1, #34	@ 0x22
 800450c:	204f      	movs	r0, #79	@ 0x4f
 800450e:	f001 ff49 	bl	80063a4 <ssd1306_SetCursor>
	ssd1306_WriteString(oled_message_readings2, Font_7x10, White);
 8004512:	4b19      	ldr	r3, [pc, #100]	@ (8004578 <print_readings+0x230>)
 8004514:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8004518:	2201      	movs	r2, #1
 800451a:	9200      	str	r2, [sp, #0]
 800451c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800451e:	f001 ff1b 	bl	8006358 <ssd1306_WriteString>
	ssd1306_SetCursor(51, 44);
 8004522:	212c      	movs	r1, #44	@ 0x2c
 8004524:	2033      	movs	r0, #51	@ 0x33
 8004526:	f001 ff3d 	bl	80063a4 <ssd1306_SetCursor>
	ssd1306_WriteString(oled_message_readings3, Font_7x10, White);
 800452a:	4b13      	ldr	r3, [pc, #76]	@ (8004578 <print_readings+0x230>)
 800452c:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8004530:	2201      	movs	r2, #1
 8004532:	9200      	str	r2, [sp, #0]
 8004534:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004536:	f001 ff0f 	bl	8006358 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 800453a:	f001 fdff 	bl	800613c <ssd1306_UpdateScreen>
}
 800453e:	bf00      	nop
 8004540:	f507 771d 	add.w	r7, r7, #628	@ 0x274
 8004544:	46bd      	mov	sp, r7
 8004546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800454a:	bf00      	nop
 800454c:	200005e4 	.word	0x200005e4
 8004550:	200005f0 	.word	0x200005f0
 8004554:	200005fc 	.word	0x200005fc
 8004558:	200005e0 	.word	0x200005e0
 800455c:	200005dc 	.word	0x200005dc
 8004560:	200005d8 	.word	0x200005d8
 8004564:	08010b7c 	.word	0x08010b7c
 8004568:	20000400 	.word	0x20000400
 800456c:	08010c20 	.word	0x08010c20
 8004570:	08010c28 	.word	0x08010c28
 8004574:	08010c30 	.word	0x08010c30
 8004578:	080128f0 	.word	0x080128f0

0800457c <mod>:

float mod(float x, float y) { //get python style modulo
 800457c:	b5b0      	push	{r4, r5, r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	ed87 0a01 	vstr	s0, [r7, #4]
 8004586:	edc7 0a00 	vstr	s1, [r7]
  x = fmod(x,y);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fb ffdc 	bl	8000548 <__aeabi_f2d>
 8004590:	4604      	mov	r4, r0
 8004592:	460d      	mov	r5, r1
 8004594:	6838      	ldr	r0, [r7, #0]
 8004596:	f7fb ffd7 	bl	8000548 <__aeabi_f2d>
 800459a:	4602      	mov	r2, r0
 800459c:	460b      	mov	r3, r1
 800459e:	ec43 2b11 	vmov	d1, r2, r3
 80045a2:	ec45 4b10 	vmov	d0, r4, r5
 80045a6:	f00a fa49 	bl	800ea3c <fmod>
 80045aa:	ec53 2b10 	vmov	r2, r3, d0
 80045ae:	4610      	mov	r0, r2
 80045b0:	4619      	mov	r1, r3
 80045b2:	f7fc faf9 	bl	8000ba8 <__aeabi_d2f>
 80045b6:	4603      	mov	r3, r0
 80045b8:	607b      	str	r3, [r7, #4]
  return x < 0 ? x+y : x;
 80045ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80045be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c6:	d506      	bpl.n	80045d6 <mod+0x5a>
 80045c8:	ed97 7a01 	vldr	s14, [r7, #4]
 80045cc:	edd7 7a00 	vldr	s15, [r7]
 80045d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045d4:	e001      	b.n	80045da <mod+0x5e>
 80045d6:	edd7 7a01 	vldr	s15, [r7, #4]
}
 80045da:	eeb0 0a67 	vmov.f32	s0, s15
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bdb0      	pop	{r4, r5, r7, pc}

080045e4 <draw_wireframe>:

void draw_wireframe(void) {
 80045e4:	b590      	push	{r4, r7, lr}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af02      	add	r7, sp, #8
	ssd1306_Line(points[ 0 ][ 0 ], points[ 0 ][ 1 ] , points[ 1 ][ 0 ] , points[ 1 ][ 1 ], White );  // connect points 0-1
 80045ea:	4b72      	ldr	r3, [pc, #456]	@ (80047b4 <draw_wireframe+0x1d0>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	b2d8      	uxtb	r0, r3
 80045f0:	4b70      	ldr	r3, [pc, #448]	@ (80047b4 <draw_wireframe+0x1d0>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	b2d9      	uxtb	r1, r3
 80045f6:	4b6f      	ldr	r3, [pc, #444]	@ (80047b4 <draw_wireframe+0x1d0>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	4b6d      	ldr	r3, [pc, #436]	@ (80047b4 <draw_wireframe+0x1d0>)
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2401      	movs	r4, #1
 8004604:	9400      	str	r4, [sp, #0]
 8004606:	f001 fee5 	bl	80063d4 <ssd1306_Line>
	ssd1306_Line(points[ 1 ][ 0 ], points[ 1 ][ 1 ] , points[ 2 ][ 0 ] , points[ 2 ][ 1 ], White );  // connect points 1-2
 800460a:	4b6a      	ldr	r3, [pc, #424]	@ (80047b4 <draw_wireframe+0x1d0>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	b2d8      	uxtb	r0, r3
 8004610:	4b68      	ldr	r3, [pc, #416]	@ (80047b4 <draw_wireframe+0x1d0>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	b2d9      	uxtb	r1, r3
 8004616:	4b67      	ldr	r3, [pc, #412]	@ (80047b4 <draw_wireframe+0x1d0>)
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	b2da      	uxtb	r2, r3
 800461c:	4b65      	ldr	r3, [pc, #404]	@ (80047b4 <draw_wireframe+0x1d0>)
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2401      	movs	r4, #1
 8004624:	9400      	str	r4, [sp, #0]
 8004626:	f001 fed5 	bl	80063d4 <ssd1306_Line>
	ssd1306_Line(points[ 2 ][ 0 ], points[ 2 ][ 1 ] , points[ 3 ][ 0 ] , points[ 3 ][ 1 ], White );  // connect points 2-3
 800462a:	4b62      	ldr	r3, [pc, #392]	@ (80047b4 <draw_wireframe+0x1d0>)
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	b2d8      	uxtb	r0, r3
 8004630:	4b60      	ldr	r3, [pc, #384]	@ (80047b4 <draw_wireframe+0x1d0>)
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	b2d9      	uxtb	r1, r3
 8004636:	4b5f      	ldr	r3, [pc, #380]	@ (80047b4 <draw_wireframe+0x1d0>)
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	b2da      	uxtb	r2, r3
 800463c:	4b5d      	ldr	r3, [pc, #372]	@ (80047b4 <draw_wireframe+0x1d0>)
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2401      	movs	r4, #1
 8004644:	9400      	str	r4, [sp, #0]
 8004646:	f001 fec5 	bl	80063d4 <ssd1306_Line>
	ssd1306_Line(points[ 3 ][ 0 ], points[ 3 ][ 1 ] , points[ 0 ][ 0 ] , points[ 0 ][ 1 ], White );  // connect points 3-0
 800464a:	4b5a      	ldr	r3, [pc, #360]	@ (80047b4 <draw_wireframe+0x1d0>)
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	b2d8      	uxtb	r0, r3
 8004650:	4b58      	ldr	r3, [pc, #352]	@ (80047b4 <draw_wireframe+0x1d0>)
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	b2d9      	uxtb	r1, r3
 8004656:	4b57      	ldr	r3, [pc, #348]	@ (80047b4 <draw_wireframe+0x1d0>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	b2da      	uxtb	r2, r3
 800465c:	4b55      	ldr	r3, [pc, #340]	@ (80047b4 <draw_wireframe+0x1d0>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2401      	movs	r4, #1
 8004664:	9400      	str	r4, [sp, #0]
 8004666:	f001 feb5 	bl	80063d4 <ssd1306_Line>

	ssd1306_Line(points[ 4 ][ 0 ], points[ 4 ][ 1 ] , points[ 5 ][ 0 ] , points[ 5 ][ 1 ], White );  // connect points 4-5
 800466a:	4b52      	ldr	r3, [pc, #328]	@ (80047b4 <draw_wireframe+0x1d0>)
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	b2d8      	uxtb	r0, r3
 8004670:	4b50      	ldr	r3, [pc, #320]	@ (80047b4 <draw_wireframe+0x1d0>)
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	b2d9      	uxtb	r1, r3
 8004676:	4b4f      	ldr	r3, [pc, #316]	@ (80047b4 <draw_wireframe+0x1d0>)
 8004678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800467a:	b2da      	uxtb	r2, r3
 800467c:	4b4d      	ldr	r3, [pc, #308]	@ (80047b4 <draw_wireframe+0x1d0>)
 800467e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2401      	movs	r4, #1
 8004684:	9400      	str	r4, [sp, #0]
 8004686:	f001 fea5 	bl	80063d4 <ssd1306_Line>
	ssd1306_Line(points[ 5 ][ 0 ], points[ 5 ][ 1 ] , points[ 6 ][ 0 ] , points[ 6 ][ 1 ], White );  // connect points 5-6
 800468a:	4b4a      	ldr	r3, [pc, #296]	@ (80047b4 <draw_wireframe+0x1d0>)
 800468c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800468e:	b2d8      	uxtb	r0, r3
 8004690:	4b48      	ldr	r3, [pc, #288]	@ (80047b4 <draw_wireframe+0x1d0>)
 8004692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004694:	b2d9      	uxtb	r1, r3
 8004696:	4b47      	ldr	r3, [pc, #284]	@ (80047b4 <draw_wireframe+0x1d0>)
 8004698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469a:	b2da      	uxtb	r2, r3
 800469c:	4b45      	ldr	r3, [pc, #276]	@ (80047b4 <draw_wireframe+0x1d0>)
 800469e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2401      	movs	r4, #1
 80046a4:	9400      	str	r4, [sp, #0]
 80046a6:	f001 fe95 	bl	80063d4 <ssd1306_Line>
	ssd1306_Line(points[ 6 ][ 0 ], points[ 6 ][ 1 ] , points[ 7 ][ 0 ] , points[ 7 ][ 1 ], White );  // connect points 6-7
 80046aa:	4b42      	ldr	r3, [pc, #264]	@ (80047b4 <draw_wireframe+0x1d0>)
 80046ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ae:	b2d8      	uxtb	r0, r3
 80046b0:	4b40      	ldr	r3, [pc, #256]	@ (80047b4 <draw_wireframe+0x1d0>)
 80046b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046b4:	b2d9      	uxtb	r1, r3
 80046b6:	4b3f      	ldr	r3, [pc, #252]	@ (80047b4 <draw_wireframe+0x1d0>)
 80046b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	4b3d      	ldr	r3, [pc, #244]	@ (80047b4 <draw_wireframe+0x1d0>)
 80046be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2401      	movs	r4, #1
 80046c4:	9400      	str	r4, [sp, #0]
 80046c6:	f001 fe85 	bl	80063d4 <ssd1306_Line>
	ssd1306_Line(points[ 7 ][ 0 ], points[ 7 ][ 1 ] , points[ 4 ][ 0 ] , points[ 4 ][ 1 ], White );  // connect points 7-4
 80046ca:	4b3a      	ldr	r3, [pc, #232]	@ (80047b4 <draw_wireframe+0x1d0>)
 80046cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ce:	b2d8      	uxtb	r0, r3
 80046d0:	4b38      	ldr	r3, [pc, #224]	@ (80047b4 <draw_wireframe+0x1d0>)
 80046d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d4:	b2d9      	uxtb	r1, r3
 80046d6:	4b37      	ldr	r3, [pc, #220]	@ (80047b4 <draw_wireframe+0x1d0>)
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	4b35      	ldr	r3, [pc, #212]	@ (80047b4 <draw_wireframe+0x1d0>)
 80046de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2401      	movs	r4, #1
 80046e4:	9400      	str	r4, [sp, #0]
 80046e6:	f001 fe75 	bl	80063d4 <ssd1306_Line>

	ssd1306_Line(points[ 0 ][ 0 ], points[ 0 ][ 1 ] , points[ 4 ][ 0 ] , points[ 4 ][ 1 ], White );  // connect points 0-4
 80046ea:	4b32      	ldr	r3, [pc, #200]	@ (80047b4 <draw_wireframe+0x1d0>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	b2d8      	uxtb	r0, r3
 80046f0:	4b30      	ldr	r3, [pc, #192]	@ (80047b4 <draw_wireframe+0x1d0>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	b2d9      	uxtb	r1, r3
 80046f6:	4b2f      	ldr	r3, [pc, #188]	@ (80047b4 <draw_wireframe+0x1d0>)
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	b2da      	uxtb	r2, r3
 80046fc:	4b2d      	ldr	r3, [pc, #180]	@ (80047b4 <draw_wireframe+0x1d0>)
 80046fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2401      	movs	r4, #1
 8004704:	9400      	str	r4, [sp, #0]
 8004706:	f001 fe65 	bl	80063d4 <ssd1306_Line>
	ssd1306_Line(points[ 1 ][ 0 ], points[ 1 ][ 1 ] , points[ 5 ][ 0 ] , points[ 5 ][ 1 ], White );  // connect points 1-5
 800470a:	4b2a      	ldr	r3, [pc, #168]	@ (80047b4 <draw_wireframe+0x1d0>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	b2d8      	uxtb	r0, r3
 8004710:	4b28      	ldr	r3, [pc, #160]	@ (80047b4 <draw_wireframe+0x1d0>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	b2d9      	uxtb	r1, r3
 8004716:	4b27      	ldr	r3, [pc, #156]	@ (80047b4 <draw_wireframe+0x1d0>)
 8004718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800471a:	b2da      	uxtb	r2, r3
 800471c:	4b25      	ldr	r3, [pc, #148]	@ (80047b4 <draw_wireframe+0x1d0>)
 800471e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2401      	movs	r4, #1
 8004724:	9400      	str	r4, [sp, #0]
 8004726:	f001 fe55 	bl	80063d4 <ssd1306_Line>
	ssd1306_Line(points[ 2 ][ 0 ], points[ 2 ][ 1 ] , points[ 6 ][ 0 ] , points[ 6 ][ 1 ], White );  // connect points 2-6
 800472a:	4b22      	ldr	r3, [pc, #136]	@ (80047b4 <draw_wireframe+0x1d0>)
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	b2d8      	uxtb	r0, r3
 8004730:	4b20      	ldr	r3, [pc, #128]	@ (80047b4 <draw_wireframe+0x1d0>)
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	b2d9      	uxtb	r1, r3
 8004736:	4b1f      	ldr	r3, [pc, #124]	@ (80047b4 <draw_wireframe+0x1d0>)
 8004738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473a:	b2da      	uxtb	r2, r3
 800473c:	4b1d      	ldr	r3, [pc, #116]	@ (80047b4 <draw_wireframe+0x1d0>)
 800473e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2401      	movs	r4, #1
 8004744:	9400      	str	r4, [sp, #0]
 8004746:	f001 fe45 	bl	80063d4 <ssd1306_Line>
	ssd1306_Line(points[ 3 ][ 0 ], points[ 3 ][ 1 ] , points[ 7 ][ 0 ] , points[ 7 ][ 1 ], White );  // connect points 3-7
 800474a:	4b1a      	ldr	r3, [pc, #104]	@ (80047b4 <draw_wireframe+0x1d0>)
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	b2d8      	uxtb	r0, r3
 8004750:	4b18      	ldr	r3, [pc, #96]	@ (80047b4 <draw_wireframe+0x1d0>)
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	b2d9      	uxtb	r1, r3
 8004756:	4b17      	ldr	r3, [pc, #92]	@ (80047b4 <draw_wireframe+0x1d0>)
 8004758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800475a:	b2da      	uxtb	r2, r3
 800475c:	4b15      	ldr	r3, [pc, #84]	@ (80047b4 <draw_wireframe+0x1d0>)
 800475e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2401      	movs	r4, #1
 8004764:	9400      	str	r4, [sp, #0]
 8004766:	f001 fe35 	bl	80063d4 <ssd1306_Line>

	ssd1306_Line(points[ 0 ][ 0 ], points[ 0 ][ 1 ] , points[ 2 ][ 0 ] , points[ 2 ][ 1 ], White );  // cross
 800476a:	4b12      	ldr	r3, [pc, #72]	@ (80047b4 <draw_wireframe+0x1d0>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	b2d8      	uxtb	r0, r3
 8004770:	4b10      	ldr	r3, [pc, #64]	@ (80047b4 <draw_wireframe+0x1d0>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	b2d9      	uxtb	r1, r3
 8004776:	4b0f      	ldr	r3, [pc, #60]	@ (80047b4 <draw_wireframe+0x1d0>)
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	b2da      	uxtb	r2, r3
 800477c:	4b0d      	ldr	r3, [pc, #52]	@ (80047b4 <draw_wireframe+0x1d0>)
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2401      	movs	r4, #1
 8004784:	9400      	str	r4, [sp, #0]
 8004786:	f001 fe25 	bl	80063d4 <ssd1306_Line>
	ssd1306_Line(points[ 1 ][ 0 ], points[ 1 ][ 1 ] , points[ 3 ][ 0 ] , points[ 3 ][ 1 ], White );  // cross
 800478a:	4b0a      	ldr	r3, [pc, #40]	@ (80047b4 <draw_wireframe+0x1d0>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	b2d8      	uxtb	r0, r3
 8004790:	4b08      	ldr	r3, [pc, #32]	@ (80047b4 <draw_wireframe+0x1d0>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	b2d9      	uxtb	r1, r3
 8004796:	4b07      	ldr	r3, [pc, #28]	@ (80047b4 <draw_wireframe+0x1d0>)
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	b2da      	uxtb	r2, r3
 800479c:	4b05      	ldr	r3, [pc, #20]	@ (80047b4 <draw_wireframe+0x1d0>)
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2401      	movs	r4, #1
 80047a4:	9400      	str	r4, [sp, #0]
 80047a6:	f001 fe15 	bl	80063d4 <ssd1306_Line>
}
 80047aa:	bf00      	nop
 80047ac:	3704      	adds	r7, #4
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd90      	pop	{r4, r7, pc}
 80047b2:	bf00      	nop
 80047b4:	200003c0 	.word	0x200003c0

080047b8 <presForFrequency>:

int presForFrequency (int frequency) {	//convert frequency to prescaler
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
	if (frequency == 0) return 0;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <presForFrequency+0x12>
 80047c6:	2300      	movs	r3, #0
 80047c8:	e008      	b.n	80047dc <presForFrequency+0x24>
	return ((TIM_FREQ/(1000*frequency))-1);  // 1 is added in the register
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80047d0:	fb02 f303 	mul.w	r3, r2, r3
 80047d4:	4a04      	ldr	r2, [pc, #16]	@ (80047e8 <presForFrequency+0x30>)
 80047d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80047da:	3b01      	subs	r3, #1
}
 80047dc:	4618      	mov	r0, r3
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	04c4b400 	.word	0x04c4b400

080047ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004830 <HAL_MspInit+0x44>)
 80047f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047f6:	4a0e      	ldr	r2, [pc, #56]	@ (8004830 <HAL_MspInit+0x44>)
 80047f8:	f043 0301 	orr.w	r3, r3, #1
 80047fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80047fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004830 <HAL_MspInit+0x44>)
 8004800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	607b      	str	r3, [r7, #4]
 8004808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800480a:	4b09      	ldr	r3, [pc, #36]	@ (8004830 <HAL_MspInit+0x44>)
 800480c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800480e:	4a08      	ldr	r2, [pc, #32]	@ (8004830 <HAL_MspInit+0x44>)
 8004810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004814:	6593      	str	r3, [r2, #88]	@ 0x58
 8004816:	4b06      	ldr	r3, [pc, #24]	@ (8004830 <HAL_MspInit+0x44>)
 8004818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800481a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800481e:	603b      	str	r3, [r7, #0]
 8004820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	40021000 	.word	0x40021000

08004834 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b08a      	sub	sp, #40	@ 0x28
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800483c:	f107 0314 	add.w	r3, r7, #20
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	605a      	str	r2, [r3, #4]
 8004846:	609a      	str	r2, [r3, #8]
 8004848:	60da      	str	r2, [r3, #12]
 800484a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a17      	ldr	r2, [pc, #92]	@ (80048b0 <HAL_I2C_MspInit+0x7c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d128      	bne.n	80048a8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004856:	4b17      	ldr	r3, [pc, #92]	@ (80048b4 <HAL_I2C_MspInit+0x80>)
 8004858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800485a:	4a16      	ldr	r2, [pc, #88]	@ (80048b4 <HAL_I2C_MspInit+0x80>)
 800485c:	f043 0302 	orr.w	r3, r3, #2
 8004860:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004862:	4b14      	ldr	r3, [pc, #80]	@ (80048b4 <HAL_I2C_MspInit+0x80>)
 8004864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	613b      	str	r3, [r7, #16]
 800486c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800486e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004874:	2312      	movs	r3, #18
 8004876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004878:	2301      	movs	r3, #1
 800487a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800487c:	2303      	movs	r3, #3
 800487e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004880:	2304      	movs	r3, #4
 8004882:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004884:	f107 0314 	add.w	r3, r7, #20
 8004888:	4619      	mov	r1, r3
 800488a:	480b      	ldr	r0, [pc, #44]	@ (80048b8 <HAL_I2C_MspInit+0x84>)
 800488c:	f002 f87e 	bl	800698c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004890:	4b08      	ldr	r3, [pc, #32]	@ (80048b4 <HAL_I2C_MspInit+0x80>)
 8004892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004894:	4a07      	ldr	r2, [pc, #28]	@ (80048b4 <HAL_I2C_MspInit+0x80>)
 8004896:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800489a:	6593      	str	r3, [r2, #88]	@ 0x58
 800489c:	4b05      	ldr	r3, [pc, #20]	@ (80048b4 <HAL_I2C_MspInit+0x80>)
 800489e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048a4:	60fb      	str	r3, [r7, #12]
 80048a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80048a8:	bf00      	nop
 80048aa:	3728      	adds	r7, #40	@ 0x28
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40005800 	.word	0x40005800
 80048b4:	40021000 	.word	0x40021000
 80048b8:	48000400 	.word	0x48000400

080048bc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a08      	ldr	r2, [pc, #32]	@ (80048ec <HAL_I2C_MspDeInit+0x30>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d10a      	bne.n	80048e4 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80048ce:	4b08      	ldr	r3, [pc, #32]	@ (80048f0 <HAL_I2C_MspDeInit+0x34>)
 80048d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d2:	4a07      	ldr	r2, [pc, #28]	@ (80048f0 <HAL_I2C_MspDeInit+0x34>)
 80048d4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80048d8:	6593      	str	r3, [r2, #88]	@ 0x58
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 80048da:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 80048de:	4805      	ldr	r0, [pc, #20]	@ (80048f4 <HAL_I2C_MspDeInit+0x38>)
 80048e0:	f002 f9fe 	bl	8006ce0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80048e4:	bf00      	nop
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40005800 	.word	0x40005800
 80048f0:	40021000 	.word	0x40021000
 80048f4:	48000400 	.word	0x48000400

080048f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b08a      	sub	sp, #40	@ 0x28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004900:	f107 0314 	add.w	r3, r7, #20
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]
 8004908:	605a      	str	r2, [r3, #4]
 800490a:	609a      	str	r2, [r3, #8]
 800490c:	60da      	str	r2, [r3, #12]
 800490e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a17      	ldr	r2, [pc, #92]	@ (8004974 <HAL_SPI_MspInit+0x7c>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d128      	bne.n	800496c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800491a:	4b17      	ldr	r3, [pc, #92]	@ (8004978 <HAL_SPI_MspInit+0x80>)
 800491c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800491e:	4a16      	ldr	r2, [pc, #88]	@ (8004978 <HAL_SPI_MspInit+0x80>)
 8004920:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004924:	6593      	str	r3, [r2, #88]	@ 0x58
 8004926:	4b14      	ldr	r3, [pc, #80]	@ (8004978 <HAL_SPI_MspInit+0x80>)
 8004928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800492a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800492e:	613b      	str	r3, [r7, #16]
 8004930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004932:	4b11      	ldr	r3, [pc, #68]	@ (8004978 <HAL_SPI_MspInit+0x80>)
 8004934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004936:	4a10      	ldr	r2, [pc, #64]	@ (8004978 <HAL_SPI_MspInit+0x80>)
 8004938:	f043 0304 	orr.w	r3, r3, #4
 800493c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800493e:	4b0e      	ldr	r3, [pc, #56]	@ (8004978 <HAL_SPI_MspInit+0x80>)
 8004940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004942:	f003 0304 	and.w	r3, r3, #4
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800494a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800494e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004950:	2302      	movs	r3, #2
 8004952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004954:	2300      	movs	r3, #0
 8004956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004958:	2303      	movs	r3, #3
 800495a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800495c:	2306      	movs	r3, #6
 800495e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004960:	f107 0314 	add.w	r3, r7, #20
 8004964:	4619      	mov	r1, r3
 8004966:	4805      	ldr	r0, [pc, #20]	@ (800497c <HAL_SPI_MspInit+0x84>)
 8004968:	f002 f810 	bl	800698c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800496c:	bf00      	nop
 800496e:	3728      	adds	r7, #40	@ 0x28
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40003c00 	.word	0x40003c00
 8004978:	40021000 	.word	0x40021000
 800497c:	48000800 	.word	0x48000800

08004980 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a08      	ldr	r2, [pc, #32]	@ (80049b0 <HAL_SPI_MspDeInit+0x30>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d10a      	bne.n	80049a8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8004992:	4b08      	ldr	r3, [pc, #32]	@ (80049b4 <HAL_SPI_MspDeInit+0x34>)
 8004994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004996:	4a07      	ldr	r2, [pc, #28]	@ (80049b4 <HAL_SPI_MspDeInit+0x34>)
 8004998:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800499c:	6593      	str	r3, [r2, #88]	@ 0x58
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 800499e:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 80049a2:	4805      	ldr	r0, [pc, #20]	@ (80049b8 <HAL_SPI_MspDeInit+0x38>)
 80049a4:	f002 f99c 	bl	8006ce0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 80049a8:	bf00      	nop
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	40003c00 	.word	0x40003c00
 80049b4:	40021000 	.word	0x40021000
 80049b8:	48000800 	.word	0x48000800

080049bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b08c      	sub	sp, #48	@ 0x30
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049c4:	f107 031c 	add.w	r3, r7, #28
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	605a      	str	r2, [r3, #4]
 80049ce:	609a      	str	r2, [r3, #8]
 80049d0:	60da      	str	r2, [r3, #12]
 80049d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a2e      	ldr	r2, [pc, #184]	@ (8004a94 <HAL_UART_MspInit+0xd8>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d128      	bne.n	8004a30 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80049de:	4b2e      	ldr	r3, [pc, #184]	@ (8004a98 <HAL_UART_MspInit+0xdc>)
 80049e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049e2:	4a2d      	ldr	r2, [pc, #180]	@ (8004a98 <HAL_UART_MspInit+0xdc>)
 80049e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80049ea:	4b2b      	ldr	r3, [pc, #172]	@ (8004a98 <HAL_UART_MspInit+0xdc>)
 80049ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049f2:	61bb      	str	r3, [r7, #24]
 80049f4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049f6:	4b28      	ldr	r3, [pc, #160]	@ (8004a98 <HAL_UART_MspInit+0xdc>)
 80049f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049fa:	4a27      	ldr	r2, [pc, #156]	@ (8004a98 <HAL_UART_MspInit+0xdc>)
 80049fc:	f043 0302 	orr.w	r3, r3, #2
 8004a00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a02:	4b25      	ldr	r3, [pc, #148]	@ (8004a98 <HAL_UART_MspInit+0xdc>)
 8004a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8004a0e:	23c0      	movs	r3, #192	@ 0xc0
 8004a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a12:	2302      	movs	r3, #2
 8004a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a16:	2300      	movs	r3, #0
 8004a18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a1e:	2307      	movs	r3, #7
 8004a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a22:	f107 031c 	add.w	r3, r7, #28
 8004a26:	4619      	mov	r1, r3
 8004a28:	481c      	ldr	r0, [pc, #112]	@ (8004a9c <HAL_UART_MspInit+0xe0>)
 8004a2a:	f001 ffaf 	bl	800698c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004a2e:	e02d      	b.n	8004a8c <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a1a      	ldr	r2, [pc, #104]	@ (8004aa0 <HAL_UART_MspInit+0xe4>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d128      	bne.n	8004a8c <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004a3a:	4b17      	ldr	r3, [pc, #92]	@ (8004a98 <HAL_UART_MspInit+0xdc>)
 8004a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a3e:	4a16      	ldr	r2, [pc, #88]	@ (8004a98 <HAL_UART_MspInit+0xdc>)
 8004a40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a44:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a46:	4b14      	ldr	r3, [pc, #80]	@ (8004a98 <HAL_UART_MspInit+0xdc>)
 8004a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a4e:	613b      	str	r3, [r7, #16]
 8004a50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a52:	4b11      	ldr	r3, [pc, #68]	@ (8004a98 <HAL_UART_MspInit+0xdc>)
 8004a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a56:	4a10      	ldr	r2, [pc, #64]	@ (8004a98 <HAL_UART_MspInit+0xdc>)
 8004a58:	f043 0308 	orr.w	r3, r3, #8
 8004a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8004a98 <HAL_UART_MspInit+0xdc>)
 8004a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8004a6a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a70:	2302      	movs	r3, #2
 8004a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a74:	2300      	movs	r3, #0
 8004a76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004a7c:	2307      	movs	r3, #7
 8004a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a80:	f107 031c 	add.w	r3, r7, #28
 8004a84:	4619      	mov	r1, r3
 8004a86:	4807      	ldr	r0, [pc, #28]	@ (8004aa4 <HAL_UART_MspInit+0xe8>)
 8004a88:	f001 ff80 	bl	800698c <HAL_GPIO_Init>
}
 8004a8c:	bf00      	nop
 8004a8e:	3730      	adds	r7, #48	@ 0x30
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40013800 	.word	0x40013800
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	48000400 	.word	0x48000400
 8004aa0:	40004800 	.word	0x40004800
 8004aa4:	48000c00 	.word	0x48000c00

08004aa8 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8004ae0 <HAL_TIM_Base_MspInit+0x38>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d10b      	bne.n	8004ad2 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004aba:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae4 <HAL_TIM_Base_MspInit+0x3c>)
 8004abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004abe:	4a09      	ldr	r2, [pc, #36]	@ (8004ae4 <HAL_TIM_Base_MspInit+0x3c>)
 8004ac0:	f043 0302 	orr.w	r3, r3, #2
 8004ac4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ac6:	4b07      	ldr	r3, [pc, #28]	@ (8004ae4 <HAL_TIM_Base_MspInit+0x3c>)
 8004ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8004ad2:	bf00      	nop
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	40000400 	.word	0x40000400
 8004ae4:	40021000 	.word	0x40021000

08004ae8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b088      	sub	sp, #32
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004af0:	f107 030c 	add.w	r3, r7, #12
 8004af4:	2200      	movs	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	605a      	str	r2, [r3, #4]
 8004afa:	609a      	str	r2, [r3, #8]
 8004afc:	60da      	str	r2, [r3, #12]
 8004afe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a11      	ldr	r2, [pc, #68]	@ (8004b4c <HAL_TIM_MspPostInit+0x64>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d11b      	bne.n	8004b42 <HAL_TIM_MspPostInit+0x5a>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b0a:	4b11      	ldr	r3, [pc, #68]	@ (8004b50 <HAL_TIM_MspPostInit+0x68>)
 8004b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b0e:	4a10      	ldr	r2, [pc, #64]	@ (8004b50 <HAL_TIM_MspPostInit+0x68>)
 8004b10:	f043 0302 	orr.w	r3, r3, #2
 8004b14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b16:	4b0e      	ldr	r3, [pc, #56]	@ (8004b50 <HAL_TIM_MspPostInit+0x68>)
 8004b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	60bb      	str	r3, [r7, #8]
 8004b20:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004b22:	2310      	movs	r3, #16
 8004b24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b26:	2302      	movs	r3, #2
 8004b28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004b32:	2302      	movs	r3, #2
 8004b34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b36:	f107 030c 	add.w	r3, r7, #12
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	4805      	ldr	r0, [pc, #20]	@ (8004b54 <HAL_TIM_MspPostInit+0x6c>)
 8004b3e:	f001 ff25 	bl	800698c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004b42:	bf00      	nop
 8004b44:	3720      	adds	r7, #32
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40000400 	.word	0x40000400
 8004b50:	40021000 	.word	0x40021000
 8004b54:	48000400 	.word	0x48000400

08004b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004b5c:	bf00      	nop
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b66:	b480      	push	{r7}
 8004b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b6a:	bf00      	nop
 8004b6c:	e7fd      	b.n	8004b6a <HardFault_Handler+0x4>

08004b6e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b72:	bf00      	nop
 8004b74:	e7fd      	b.n	8004b72 <MemManage_Handler+0x4>

08004b76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b76:	b480      	push	{r7}
 8004b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b7a:	bf00      	nop
 8004b7c:	e7fd      	b.n	8004b7a <BusFault_Handler+0x4>

08004b7e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b82:	bf00      	nop
 8004b84:	e7fd      	b.n	8004b82 <UsageFault_Handler+0x4>

08004b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b86:	b480      	push	{r7}
 8004b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b8a:	bf00      	nop
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b98:	bf00      	nop
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ba6:	bf00      	nop
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004bb4:	f001 fd58 	bl	8006668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004bb8:	bf00      	nop
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8004bc0:	2020      	movs	r0, #32
 8004bc2:	f002 f9cb 	bl	8006f5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8004bc6:	2040      	movs	r0, #64	@ 0x40
 8004bc8:	f002 f9c8 	bl	8006f5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004bcc:	2080      	movs	r0, #128	@ 0x80
 8004bce:	f002 f9c5 	bl	8006f5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004bd2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004bd6:	f002 f9c1 	bl	8006f5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004bda:	bf00      	nop
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004be2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004be6:	f002 f9b9 	bl	8006f5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004bea:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004bee:	f002 f9b5 	bl	8006f5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004bf2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004bf6:	f002 f9b1 	bl	8006f5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004bfa:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004bfe:	f002 f9ad 	bl	8006f5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004c02:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004c06:	f002 f9a9 	bl	8006f5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004c0a:	bf00      	nop
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)	//wifi stuff
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	af00      	add	r7, sp, #0

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004c12:	2002      	movs	r0, #2
 8004c14:	f002 f9a2 	bl	8006f5c <HAL_GPIO_EXTI_IRQHandler>

}
 8004c18:	bf00      	nop
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <USART1_IRQHandler>:

extern UART_HandleTypeDef huart1;
void USART1_IRQHandler(void) {
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart1);
 8004c20:	4802      	ldr	r0, [pc, #8]	@ (8004c2c <USART1_IRQHandler+0x10>)
 8004c22:	f005 fe93 	bl	800a94c <HAL_UART_IRQHandler>
}
 8004c26:	bf00      	nop
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20000400 	.word	0x20000400

08004c30 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004c38:	4b11      	ldr	r3, [pc, #68]	@ (8004c80 <_sbrk+0x50>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d102      	bne.n	8004c46 <_sbrk+0x16>
		heap_end = &end;
 8004c40:	4b0f      	ldr	r3, [pc, #60]	@ (8004c80 <_sbrk+0x50>)
 8004c42:	4a10      	ldr	r2, [pc, #64]	@ (8004c84 <_sbrk+0x54>)
 8004c44:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004c46:	4b0e      	ldr	r3, [pc, #56]	@ (8004c80 <_sbrk+0x50>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c80 <_sbrk+0x50>)
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4413      	add	r3, r2
 8004c54:	466a      	mov	r2, sp
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d907      	bls.n	8004c6a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004c5a:	f007 ff09 	bl	800ca70 <__errno>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	220c      	movs	r2, #12
 8004c62:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004c64:	f04f 33ff 	mov.w	r3, #4294967295
 8004c68:	e006      	b.n	8004c78 <_sbrk+0x48>
	}

	heap_end += incr;
 8004c6a:	4b05      	ldr	r3, [pc, #20]	@ (8004c80 <_sbrk+0x50>)
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4413      	add	r3, r2
 8004c72:	4a03      	ldr	r2, [pc, #12]	@ (8004c80 <_sbrk+0x50>)
 8004c74:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004c76:	68fb      	ldr	r3, [r7, #12]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	2000073c 	.word	0x2000073c
 8004c84:	20001448 	.word	0x20001448

08004c88 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c8c:	4b17      	ldr	r3, [pc, #92]	@ (8004cec <SystemInit+0x64>)
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c92:	4a16      	ldr	r2, [pc, #88]	@ (8004cec <SystemInit+0x64>)
 8004c94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004c98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004c9c:	4b14      	ldr	r3, [pc, #80]	@ (8004cf0 <SystemInit+0x68>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a13      	ldr	r2, [pc, #76]	@ (8004cf0 <SystemInit+0x68>)
 8004ca2:	f043 0301 	orr.w	r3, r3, #1
 8004ca6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004ca8:	4b11      	ldr	r3, [pc, #68]	@ (8004cf0 <SystemInit+0x68>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004cae:	4b10      	ldr	r3, [pc, #64]	@ (8004cf0 <SystemInit+0x68>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a0f      	ldr	r2, [pc, #60]	@ (8004cf0 <SystemInit+0x68>)
 8004cb4:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8004cb8:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8004cbc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8004cf0 <SystemInit+0x68>)
 8004cc0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004cc4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf0 <SystemInit+0x68>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a09      	ldr	r2, [pc, #36]	@ (8004cf0 <SystemInit+0x68>)
 8004ccc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cd0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004cd2:	4b07      	ldr	r3, [pc, #28]	@ (8004cf0 <SystemInit+0x68>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004cd8:	4b04      	ldr	r3, [pc, #16]	@ (8004cec <SystemInit+0x64>)
 8004cda:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004cde:	609a      	str	r2, [r3, #8]
#endif
}
 8004ce0:	bf00      	nop
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	e000ed00 	.word	0xe000ed00
 8004cf0:	40021000 	.word	0x40021000

08004cf4 <WIFI_Init>:
  * @brief  Initialiaze the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj, 
 8004cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8004d34 <WIFI_Init+0x40>)
 8004d00:	9301      	str	r3, [sp, #4]
 8004d02:	4b0d      	ldr	r3, [pc, #52]	@ (8004d38 <WIFI_Init+0x44>)
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	4b0d      	ldr	r3, [pc, #52]	@ (8004d3c <WIFI_Init+0x48>)
 8004d08:	4a0d      	ldr	r2, [pc, #52]	@ (8004d40 <WIFI_Init+0x4c>)
 8004d0a:	490e      	ldr	r1, [pc, #56]	@ (8004d44 <WIFI_Init+0x50>)
 8004d0c:	480e      	ldr	r0, [pc, #56]	@ (8004d48 <WIFI_Init+0x54>)
 8004d0e:	f7fc fc35 	bl	800157c <ES_WIFI_RegisterBusIO>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d107      	bne.n	8004d28 <WIFI_Init+0x34>
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8004d18:	480b      	ldr	r0, [pc, #44]	@ (8004d48 <WIFI_Init+0x54>)
 8004d1a:	f7fc fc01 	bl	8001520 <ES_WIFI_Init>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8004d24:	2300      	movs	r3, #0
 8004d26:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8004d28:	79fb      	ldrb	r3, [r7, #7]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	08001f11 	.word	0x08001f11
 8004d38:	08001ff5 	.word	0x08001ff5
 8004d3c:	080020b5 	.word	0x080020b5
 8004d40:	08001e79 	.word	0x08001e79
 8004d44:	08001cf1 	.word	0x08001cf1
 8004d48:	20000740 	.word	0x20000740

08004d4c <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID, 
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	4613      	mov	r3, r2
 8004d58:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	75fb      	strb	r3, [r7, #23]
 
  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8004d5e:	79fb      	ldrb	r3, [r7, #7]
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	68f9      	ldr	r1, [r7, #12]
 8004d64:	4809      	ldr	r0, [pc, #36]	@ (8004d8c <WIFI_Connect+0x40>)
 8004d66:	f7fc fc3d 	bl	80015e4 <ES_WIFI_Connect>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d107      	bne.n	8004d80 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8004d70:	4806      	ldr	r0, [pc, #24]	@ (8004d8c <WIFI_Connect+0x40>)
 8004d72:	f7fc fcaf 	bl	80016d4 <ES_WIFI_GetNetworkSettings>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d101      	bne.n	8004d80 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	75fb      	strb	r3, [r7, #23]
    }
    
  }
  return ret;
 8004d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20000740 	.word	0x20000740

08004d90 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b08a      	sub	sp, #40	@ 0x28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	607a      	str	r2, [r7, #4]
 8004d9a:	603b      	str	r3, [r7, #0]
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	757b      	strb	r3, [r7, #21]
  conn.RemotePort = port;
 8004dac:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004dae:	82fb      	strh	r3, [r7, #22]
  conn.LocalPort = local_port;
 8004db0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8004db2:	833b      	strh	r3, [r7, #24]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8004db4:	7afb      	ldrb	r3, [r7, #11]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	bf14      	ite	ne
 8004dba:	2301      	movne	r3, #1
 8004dbc:	2300      	moveq	r3, #0
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	753b      	strb	r3, [r7, #20]
  conn.RemoteIP[0] = ipaddr[0];
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	76bb      	strb	r3, [r7, #26]
  conn.RemoteIP[1] = ipaddr[1];
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	785b      	ldrb	r3, [r3, #1]
 8004dcc:	76fb      	strb	r3, [r7, #27]
  conn.RemoteIP[2] = ipaddr[2];
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	789b      	ldrb	r3, [r3, #2]
 8004dd2:	773b      	strb	r3, [r7, #28]
  conn.RemoteIP[3] = ipaddr[3];
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	78db      	ldrb	r3, [r3, #3]
 8004dd8:	777b      	strb	r3, [r7, #29]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8004dda:	f107 0314 	add.w	r3, r7, #20
 8004dde:	4619      	mov	r1, r3
 8004de0:	4807      	ldr	r0, [pc, #28]	@ (8004e00 <WIFI_OpenClientConnection+0x70>)
 8004de2:	f7fc fca1 	bl	8001728 <ES_WIFI_StartClientConnection>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d102      	bne.n	8004df2 <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 8004dec:	2300      	movs	r3, #0
 8004dee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 8004df2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3728      	adds	r7, #40	@ 0x28
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	20000740 	.word	0x20000740

08004e04 <WIFI_SendData>:
  * @param  pdata : pointer to data to be sent
  * @param  len : length of data to be sent
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b088      	sub	sp, #32
 8004e08:	af02      	add	r7, sp, #8
 8004e0a:	60b9      	str	r1, [r7, #8]
 8004e0c:	607b      	str	r3, [r7, #4]
 8004e0e:	4603      	mov	r3, r0
 8004e10:	73fb      	strb	r3, [r7, #15]
 8004e12:	4613      	mov	r3, r2
 8004e14:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8004e1a:	89ba      	ldrh	r2, [r7, #12]
 8004e1c:	7bf9      	ldrb	r1, [r7, #15]
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	9301      	str	r3, [sp, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	4613      	mov	r3, r2
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	4806      	ldr	r0, [pc, #24]	@ (8004e44 <WIFI_SendData+0x40>)
 8004e2c:	f7fc fd38 	bl	80018a0 <ES_WIFI_SendData>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 8004e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	20000740 	.word	0x20000740

08004e48 <WIFI_ReceiveData>:
  * @param  pdata : pointer to Rx buffer
  * @param  *len :  pointer to length of data
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b088      	sub	sp, #32
 8004e4c:	af02      	add	r7, sp, #8
 8004e4e:	60b9      	str	r1, [r7, #8]
 8004e50:	607b      	str	r3, [r7, #4]
 8004e52:	4603      	mov	r3, r0
 8004e54:	73fb      	strb	r3, [r7, #15]
 8004e56:	4613      	mov	r3, r2
 8004e58:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8004e5e:	89ba      	ldrh	r2, [r7, #12]
 8004e60:	7bf9      	ldrb	r1, [r7, #15]
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	9301      	str	r3, [sp, #4]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	4806      	ldr	r0, [pc, #24]	@ (8004e88 <WIFI_ReceiveData+0x40>)
 8004e70:	f7fc fdca 	bl	8001a08 <ES_WIFI_ReceiveData>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK; 
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 8004e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3718      	adds	r7, #24
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	20000740 	.word	0x20000740

08004e8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004e8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004ec4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004e90:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004e92:	e003      	b.n	8004e9c <LoopCopyDataInit>

08004e94 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004e94:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004e96:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004e98:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004e9a:	3104      	adds	r1, #4

08004e9c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004e9c:	480b      	ldr	r0, [pc, #44]	@ (8004ecc <LoopForever+0xa>)
	ldr	r3, =_edata
 8004e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ed0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004ea0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004ea2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004ea4:	d3f6      	bcc.n	8004e94 <CopyDataInit>
	ldr	r2, =_sbss
 8004ea6:	4a0b      	ldr	r2, [pc, #44]	@ (8004ed4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004ea8:	e002      	b.n	8004eb0 <LoopFillZerobss>

08004eaa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004eaa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004eac:	f842 3b04 	str.w	r3, [r2], #4

08004eb0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004eb0:	4b09      	ldr	r3, [pc, #36]	@ (8004ed8 <LoopForever+0x16>)
	cmp	r2, r3
 8004eb2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004eb4:	d3f9      	bcc.n	8004eaa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004eb6:	f7ff fee7 	bl	8004c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004eba:	f007 fddf 	bl	800ca7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004ebe:	f7fd fb35 	bl	800252c <main>

08004ec2 <LoopForever>:

LoopForever:
    b LoopForever
 8004ec2:	e7fe      	b.n	8004ec2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004ec4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004ec8:	08012f40 	.word	0x08012f40
	ldr	r0, =_sdata
 8004ecc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004ed0:	20000338 	.word	0x20000338
	ldr	r2, =_sbss
 8004ed4:	20000338 	.word	0x20000338
	ldr	r3, = _ebss
 8004ed8:	20001444 	.word	0x20001444

08004edc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004edc:	e7fe      	b.n	8004edc <ADC1_2_IRQHandler>
	...

08004ee0 <BSP_LED_Init>:
  * @param  Led: LED to be configured. 
  *          This parameter can be one of the following values:
  *            @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8004eea:	79fb      	ldrb	r3, [r7, #7]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10b      	bne.n	8004f08 <BSP_LED_Init+0x28>
 8004ef0:	4b11      	ldr	r3, [pc, #68]	@ (8004f38 <BSP_LED_Init+0x58>)
 8004ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ef4:	4a10      	ldr	r2, [pc, #64]	@ (8004f38 <BSP_LED_Init+0x58>)
 8004ef6:	f043 0302 	orr.w	r3, r3, #2
 8004efa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004efc:	4b0e      	ldr	r3, [pc, #56]	@ (8004f38 <BSP_LED_Init+0x58>)
 8004efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	60bb      	str	r3, [r7, #8]
 8004f06:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8004f08:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004f0c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8004f12:	2300      	movs	r3, #0
 8004f14:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f16:	2302      	movs	r3, #2
 8004f18:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8004f1a:	79fb      	ldrb	r3, [r7, #7]
 8004f1c:	4a07      	ldr	r2, [pc, #28]	@ (8004f3c <BSP_LED_Init+0x5c>)
 8004f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f22:	f107 020c 	add.w	r2, r7, #12
 8004f26:	4611      	mov	r1, r2
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f001 fd2f 	bl	800698c <HAL_GPIO_Init>
}
 8004f2e:	bf00      	nop
 8004f30:	3720      	adds	r7, #32
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	2000008c 	.word	0x2000008c

08004f40 <BSP_LED_Toggle>:
  * @param  Led: LED to be toggled
  *          This parameter can be one of the following values:
  *            @arg  LED2
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	4603      	mov	r3, r0
 8004f48:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8004f4a:	79fb      	ldrb	r3, [r7, #7]
 8004f4c:	4a06      	ldr	r2, [pc, #24]	@ (8004f68 <BSP_LED_Toggle+0x28>)
 8004f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f52:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004f56:	b292      	uxth	r2, r2
 8004f58:	4611      	mov	r1, r2
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f001 ffe4 	bl	8006f28 <HAL_GPIO_TogglePin>
}
 8004f60:	bf00      	nop
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	2000008c 	.word	0x2000008c

08004f6c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b08a      	sub	sp, #40	@ 0x28
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004f74:	4b27      	ldr	r3, [pc, #156]	@ (8005014 <I2Cx_MspInit+0xa8>)
 8004f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f78:	4a26      	ldr	r2, [pc, #152]	@ (8005014 <I2Cx_MspInit+0xa8>)
 8004f7a:	f043 0302 	orr.w	r3, r3, #2
 8004f7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f80:	4b24      	ldr	r3, [pc, #144]	@ (8005014 <I2Cx_MspInit+0xa8>)
 8004f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	613b      	str	r3, [r7, #16]
 8004f8a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8004f8c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004f90:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004f92:	2312      	movs	r3, #18
 8004f94:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8004f96:	2301      	movs	r3, #1
 8004f98:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8004f9e:	2304      	movs	r3, #4
 8004fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004fa2:	f107 0314 	add.w	r3, r7, #20
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	481b      	ldr	r0, [pc, #108]	@ (8005018 <I2Cx_MspInit+0xac>)
 8004faa:	f001 fcef 	bl	800698c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004fae:	f107 0314 	add.w	r3, r7, #20
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	4818      	ldr	r0, [pc, #96]	@ (8005018 <I2Cx_MspInit+0xac>)
 8004fb6:	f001 fce9 	bl	800698c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8004fba:	4b16      	ldr	r3, [pc, #88]	@ (8005014 <I2Cx_MspInit+0xa8>)
 8004fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fbe:	4a15      	ldr	r2, [pc, #84]	@ (8005014 <I2Cx_MspInit+0xa8>)
 8004fc0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004fc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fc6:	4b13      	ldr	r3, [pc, #76]	@ (8005014 <I2Cx_MspInit+0xa8>)
 8004fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8004fd2:	4b10      	ldr	r3, [pc, #64]	@ (8005014 <I2Cx_MspInit+0xa8>)
 8004fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd6:	4a0f      	ldr	r2, [pc, #60]	@ (8005014 <I2Cx_MspInit+0xa8>)
 8004fd8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004fdc:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8004fde:	4b0d      	ldr	r3, [pc, #52]	@ (8005014 <I2Cx_MspInit+0xa8>)
 8004fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe2:	4a0c      	ldr	r2, [pc, #48]	@ (8005014 <I2Cx_MspInit+0xa8>)
 8004fe4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004fe8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8004fea:	2200      	movs	r2, #0
 8004fec:	210f      	movs	r1, #15
 8004fee:	2021      	movs	r0, #33	@ 0x21
 8004ff0:	f001 fc55 	bl	800689e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8004ff4:	2021      	movs	r0, #33	@ 0x21
 8004ff6:	f001 fc6e 	bl	80068d6 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	210f      	movs	r1, #15
 8004ffe:	2022      	movs	r0, #34	@ 0x22
 8005000:	f001 fc4d 	bl	800689e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8005004:	2022      	movs	r0, #34	@ 0x22
 8005006:	f001 fc66 	bl	80068d6 <HAL_NVIC_EnableIRQ>
}
 800500a:	bf00      	nop
 800500c:	3728      	adds	r7, #40	@ 0x28
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	40021000 	.word	0x40021000
 8005018:	48000400 	.word	0x48000400

0800501c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a12      	ldr	r2, [pc, #72]	@ (8005070 <I2Cx_Init+0x54>)
 8005028:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a11      	ldr	r2, [pc, #68]	@ (8005074 <I2Cx_Init+0x58>)
 800502e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f7ff ff89 	bl	8004f6c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f001 ff96 	bl	8006f8c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8005060:	2100      	movs	r1, #0
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f002 fc9a 	bl	800799c <HAL_I2CEx_ConfigAnalogFilter>
}
 8005068:	bf00      	nop
 800506a:	3708      	adds	r7, #8
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	40005800 	.word	0x40005800
 8005074:	00702681 	.word	0x00702681

08005078 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b08a      	sub	sp, #40	@ 0x28
 800507c:	af04      	add	r7, sp, #16
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	4608      	mov	r0, r1
 8005082:	4611      	mov	r1, r2
 8005084:	461a      	mov	r2, r3
 8005086:	4603      	mov	r3, r0
 8005088:	72fb      	strb	r3, [r7, #11]
 800508a:	460b      	mov	r3, r1
 800508c:	813b      	strh	r3, [r7, #8]
 800508e:	4613      	mov	r3, r2
 8005090:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8005092:	2300      	movs	r3, #0
 8005094:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8005096:	7afb      	ldrb	r3, [r7, #11]
 8005098:	b299      	uxth	r1, r3
 800509a:	88f8      	ldrh	r0, [r7, #6]
 800509c:	893a      	ldrh	r2, [r7, #8]
 800509e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80050a2:	9302      	str	r3, [sp, #8]
 80050a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80050a6:	9301      	str	r3, [sp, #4]
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	4603      	mov	r3, r0
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f002 f93e 	bl	8007330 <HAL_I2C_Mem_Read>
 80050b4:	4603      	mov	r3, r0
 80050b6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80050b8:	7dfb      	ldrb	r3, [r7, #23]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d004      	beq.n	80050c8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 80050be:	7afb      	ldrb	r3, [r7, #11]
 80050c0:	4619      	mov	r1, r3
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f000 f832 	bl	800512c <I2Cx_Error>
  }
  return status;
 80050c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b08a      	sub	sp, #40	@ 0x28
 80050d6:	af04      	add	r7, sp, #16
 80050d8:	60f8      	str	r0, [r7, #12]
 80050da:	4608      	mov	r0, r1
 80050dc:	4611      	mov	r1, r2
 80050de:	461a      	mov	r2, r3
 80050e0:	4603      	mov	r3, r0
 80050e2:	72fb      	strb	r3, [r7, #11]
 80050e4:	460b      	mov	r3, r1
 80050e6:	813b      	strh	r3, [r7, #8]
 80050e8:	4613      	mov	r3, r2
 80050ea:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80050ec:	2300      	movs	r3, #0
 80050ee:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80050f0:	7afb      	ldrb	r3, [r7, #11]
 80050f2:	b299      	uxth	r1, r3
 80050f4:	88f8      	ldrh	r0, [r7, #6]
 80050f6:	893a      	ldrh	r2, [r7, #8]
 80050f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80050fc:	9302      	str	r3, [sp, #8]
 80050fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005100:	9301      	str	r3, [sp, #4]
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	4603      	mov	r3, r0
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f001 fffd 	bl	8007108 <HAL_I2C_Mem_Write>
 800510e:	4603      	mov	r3, r0
 8005110:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8005112:	7dfb      	ldrb	r3, [r7, #23]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d004      	beq.n	8005122 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8005118:	7afb      	ldrb	r3, [r7, #11]
 800511a:	4619      	mov	r1, r3
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 f805 	bl	800512c <I2Cx_Error>
  }
  return status;
 8005122:	7dfb      	ldrb	r3, [r7, #23]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	460b      	mov	r3, r1
 8005136:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f001 ffb6 	bl	80070aa <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7ff ff6c 	bl	800501c <I2Cx_Init>
}
 8005144:	bf00      	nop
 8005146:	3708      	adds	r7, #8
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8005150:	4802      	ldr	r0, [pc, #8]	@ (800515c <SENSOR_IO_Init+0x10>)
 8005152:	f7ff ff63 	bl	800501c <I2Cx_Init>
}
 8005156:	bf00      	nop
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	20000de8 	.word	0x20000de8

08005160 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af02      	add	r7, sp, #8
 8005166:	4603      	mov	r3, r0
 8005168:	71fb      	strb	r3, [r7, #7]
 800516a:	460b      	mov	r3, r1
 800516c:	71bb      	strb	r3, [r7, #6]
 800516e:	4613      	mov	r3, r2
 8005170:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8005172:	79bb      	ldrb	r3, [r7, #6]
 8005174:	b29a      	uxth	r2, r3
 8005176:	79f9      	ldrb	r1, [r7, #7]
 8005178:	2301      	movs	r3, #1
 800517a:	9301      	str	r3, [sp, #4]
 800517c:	1d7b      	adds	r3, r7, #5
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	2301      	movs	r3, #1
 8005182:	4803      	ldr	r0, [pc, #12]	@ (8005190 <SENSOR_IO_Write+0x30>)
 8005184:	f7ff ffa5 	bl	80050d2 <I2Cx_WriteMultiple>
}
 8005188:	bf00      	nop
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	20000de8 	.word	0x20000de8

08005194 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af02      	add	r7, sp, #8
 800519a:	4603      	mov	r3, r0
 800519c:	460a      	mov	r2, r1
 800519e:	71fb      	strb	r3, [r7, #7]
 80051a0:	4613      	mov	r3, r2
 80051a2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80051a4:	2300      	movs	r3, #0
 80051a6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80051a8:	79bb      	ldrb	r3, [r7, #6]
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	79f9      	ldrb	r1, [r7, #7]
 80051ae:	2301      	movs	r3, #1
 80051b0:	9301      	str	r3, [sp, #4]
 80051b2:	f107 030f 	add.w	r3, r7, #15
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	2301      	movs	r3, #1
 80051ba:	4804      	ldr	r0, [pc, #16]	@ (80051cc <SENSOR_IO_Read+0x38>)
 80051bc:	f7ff ff5c 	bl	8005078 <I2Cx_ReadMultiple>

  return read_value;
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	20000de8 	.word	0x20000de8

080051d0 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af02      	add	r7, sp, #8
 80051d6:	603a      	str	r2, [r7, #0]
 80051d8:	461a      	mov	r2, r3
 80051da:	4603      	mov	r3, r0
 80051dc:	71fb      	strb	r3, [r7, #7]
 80051de:	460b      	mov	r3, r1
 80051e0:	71bb      	strb	r3, [r7, #6]
 80051e2:	4613      	mov	r3, r2
 80051e4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80051e6:	79bb      	ldrb	r3, [r7, #6]
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	79f9      	ldrb	r1, [r7, #7]
 80051ec:	88bb      	ldrh	r3, [r7, #4]
 80051ee:	9301      	str	r3, [sp, #4]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	2301      	movs	r3, #1
 80051f6:	4804      	ldr	r0, [pc, #16]	@ (8005208 <SENSOR_IO_ReadMultiple+0x38>)
 80051f8:	f7ff ff3e 	bl	8005078 <I2Cx_ReadMultiple>
 80051fc:	4603      	mov	r3, r0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	20000de8 	.word	0x20000de8

0800520c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8005212:	2300      	movs	r3, #0
 8005214:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8005216:	2300      	movs	r3, #0
 8005218:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800521a:	4b19      	ldr	r3, [pc, #100]	@ (8005280 <BSP_ACCELERO_Init+0x74>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	4798      	blx	r3
 8005220:	4603      	mov	r3, r0
 8005222:	2b6a      	cmp	r3, #106	@ 0x6a
 8005224:	d002      	beq.n	800522c <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	73fb      	strb	r3, [r7, #15]
 800522a:	e024      	b.n	8005276 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 800522c:	4b15      	ldr	r3, [pc, #84]	@ (8005284 <BSP_ACCELERO_Init+0x78>)
 800522e:	4a14      	ldr	r2, [pc, #80]	@ (8005280 <BSP_ACCELERO_Init+0x74>)
 8005230:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_104Hz;
 8005232:	2340      	movs	r3, #64	@ 0x40
 8005234:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8005236:	2300      	movs	r3, #0
 8005238:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_4G;
 800523a:	2308      	movs	r3, #8
 800523c:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800523e:	2340      	movs	r3, #64	@ 0x40
 8005240:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8005242:	2300      	movs	r3, #0
 8005244:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8005246:	2300      	movs	r3, #0
 8005248:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800524a:	797a      	ldrb	r2, [r7, #5]
 800524c:	7abb      	ldrb	r3, [r7, #10]
 800524e:	4313      	orrs	r3, r2
 8005250:	b2db      	uxtb	r3, r3
 8005252:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8005254:	7a3b      	ldrb	r3, [r7, #8]
 8005256:	f043 0304 	orr.w	r3, r3, #4
 800525a:	b2db      	uxtb	r3, r3
 800525c:	021b      	lsls	r3, r3, #8
 800525e:	b21a      	sxth	r2, r3
 8005260:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005264:	4313      	orrs	r3, r2
 8005266:	b21b      	sxth	r3, r3
 8005268:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800526a:	4b06      	ldr	r3, [pc, #24]	@ (8005284 <BSP_ACCELERO_Init+0x78>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	89ba      	ldrh	r2, [r7, #12]
 8005272:	4610      	mov	r0, r2
 8005274:	4798      	blx	r3
  }  

  return ret;
 8005276:	7bfb      	ldrb	r3, [r7, #15]
}
 8005278:	4618      	mov	r0, r3
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	200000ec 	.word	0x200000ec
 8005284:	20000e34 	.word	0x20000e34

08005288 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(float *pDataXYZ)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8005290:	4b08      	ldr	r3, [pc, #32]	@ (80052b4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d009      	beq.n	80052ac <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8005298:	4b06      	ldr	r3, [pc, #24]	@ (80052b4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d004      	beq.n	80052ac <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80052a2:	4b04      	ldr	r3, [pc, #16]	@ (80052b4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	4798      	blx	r3
    }
  }
}
 80052ac:	bf00      	nop
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	20000e34 	.word	0x20000e34

080052b8 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80052c2:	2300      	movs	r3, #0
 80052c4:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80052c6:	4b1b      	ldr	r3, [pc, #108]	@ (8005334 <BSP_GYRO_Init+0x7c>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	4798      	blx	r3
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b6a      	cmp	r3, #106	@ 0x6a
 80052d0:	d002      	beq.n	80052d8 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	73fb      	strb	r3, [r7, #15]
 80052d6:	e028      	b.n	800532a <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 80052d8:	4b17      	ldr	r3, [pc, #92]	@ (8005338 <BSP_GYRO_Init+0x80>)
 80052da:	4a16      	ldr	r2, [pc, #88]	@ (8005334 <BSP_GYRO_Init+0x7c>)
 80052dc:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 80052de:	2300      	movs	r3, #0
 80052e0:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_104Hz;
 80052e2:	2340      	movs	r3, #64	@ 0x40
 80052e4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80052e6:	2300      	movs	r3, #0
 80052e8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 80052ea:	2300      	movs	r3, #0
 80052ec:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80052ee:	2340      	movs	r3, #64	@ 0x40
 80052f0:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 80052f2:	2300      	movs	r3, #0
 80052f4:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_245;
 80052f6:	2300      	movs	r3, #0
 80052f8:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 80052fa:	7aba      	ldrb	r2, [r7, #10]
 80052fc:	797b      	ldrb	r3, [r7, #5]
 80052fe:	4313      	orrs	r3, r2
 8005300:	b2db      	uxtb	r3, r3
 8005302:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8005304:	7a3b      	ldrb	r3, [r7, #8]
 8005306:	f043 0304 	orr.w	r3, r3, #4
 800530a:	b2db      	uxtb	r3, r3
 800530c:	021b      	lsls	r3, r3, #8
 800530e:	b21a      	sxth	r2, r3
 8005310:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005314:	4313      	orrs	r3, r2
 8005316:	b21b      	sxth	r3, r3
 8005318:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 800531a:	4b07      	ldr	r3, [pc, #28]	@ (8005338 <BSP_GYRO_Init+0x80>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	89ba      	ldrh	r2, [r7, #12]
 8005322:	4610      	mov	r0, r2
 8005324:	4798      	blx	r3
    
    ret = GYRO_OK;
 8005326:	2300      	movs	r3, #0
 8005328:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800532a:	7bfb      	ldrb	r3, [r7, #15]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	20000120 	.word	0x20000120
 8005338:	20000e38 	.word	0x20000e38

0800533c <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8005344:	4b08      	ldr	r3, [pc, #32]	@ (8005368 <BSP_GYRO_GetXYZ+0x2c>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d009      	beq.n	8005360 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 800534c:	4b06      	ldr	r3, [pc, #24]	@ (8005368 <BSP_GYRO_GetXYZ+0x2c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005352:	2b00      	cmp	r3, #0
 8005354:	d004      	beq.n	8005360 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8005356:	4b04      	ldr	r3, [pc, #16]	@ (8005368 <BSP_GYRO_GetXYZ+0x2c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	4798      	blx	r3
    }
  }
}
 8005360:	bf00      	nop
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	20000e38 	.word	0x20000e38

0800536c <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8005372:	4b0c      	ldr	r3, [pc, #48]	@ (80053a4 <BSP_HSENSOR_Init+0x38>)
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	20be      	movs	r0, #190	@ 0xbe
 8005378:	4798      	blx	r3
 800537a:	4603      	mov	r3, r0
 800537c:	2bbc      	cmp	r3, #188	@ 0xbc
 800537e:	d002      	beq.n	8005386 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	607b      	str	r3, [r7, #4]
 8005384:	e009      	b.n	800539a <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8005386:	4b08      	ldr	r3, [pc, #32]	@ (80053a8 <BSP_HSENSOR_Init+0x3c>)
 8005388:	4a06      	ldr	r2, [pc, #24]	@ (80053a4 <BSP_HSENSOR_Init+0x38>)
 800538a:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 800538c:	4b06      	ldr	r3, [pc, #24]	@ (80053a8 <BSP_HSENSOR_Init+0x3c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	20be      	movs	r0, #190	@ 0xbe
 8005394:	4798      	blx	r3
    ret = HSENSOR_OK;
 8005396:	2300      	movs	r3, #0
 8005398:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800539a:	687b      	ldr	r3, [r7, #4]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3708      	adds	r7, #8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	20000090 	.word	0x20000090
 80053a8:	20000e3c 	.word	0x20000e3c

080053ac <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80053b0:	4b04      	ldr	r3, [pc, #16]	@ (80053c4 <BSP_HSENSOR_ReadHumidity+0x18>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	20be      	movs	r0, #190	@ 0xbe
 80053b8:	4798      	blx	r3
 80053ba:	eef0 7a40 	vmov.f32	s15, s0
}
 80053be:	eeb0 0a67 	vmov.f32	s0, s15
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	20000e3c 	.word	0x20000e3c

080053c8 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 80053ce:	2300      	movs	r3, #0
 80053d0:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 80053d2:	4b11      	ldr	r3, [pc, #68]	@ (8005418 <BSP_MAGNETO_Init+0x50>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	4798      	blx	r3
 80053d8:	4603      	mov	r3, r0
 80053da:	2b3d      	cmp	r3, #61	@ 0x3d
 80053dc:	d002      	beq.n	80053e4 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	71fb      	strb	r3, [r7, #7]
 80053e2:	e013      	b.n	800540c <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 80053e4:	4b0d      	ldr	r3, [pc, #52]	@ (800541c <BSP_MAGNETO_Init+0x54>)
 80053e6:	4a0c      	ldr	r2, [pc, #48]	@ (8005418 <BSP_MAGNETO_Init+0x50>)
 80053e8:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_80_HZ;
 80053ea:	235c      	movs	r3, #92	@ 0x5c
 80053ec:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 80053ee:	2300      	movs	r3, #0
 80053f0:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 80053f2:	2300      	movs	r3, #0
 80053f4:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_ULTRAHIGH | LIS3MDL_MAG_BLE_LSB;
 80053f6:	230c      	movs	r3, #12
 80053f8:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 80053fa:	2340      	movs	r3, #64	@ 0x40
 80053fc:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 80053fe:	4b07      	ldr	r3, [pc, #28]	@ (800541c <BSP_MAGNETO_Init+0x54>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	463a      	mov	r2, r7
 8005406:	e892 0003 	ldmia.w	r2, {r0, r1}
 800540a:	4798      	blx	r3
  } 

  return ret;  
 800540c:	79fb      	ldrb	r3, [r7, #7]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	200000ac 	.word	0x200000ac
 800541c:	20000e40 	.word	0x20000e40

08005420 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(float *pDataXYZ)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8005428:	4b08      	ldr	r3, [pc, #32]	@ (800544c <BSP_MAGNETO_GetXYZ+0x2c>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d009      	beq.n	8005444 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8005430:	4b06      	ldr	r3, [pc, #24]	@ (800544c <BSP_MAGNETO_GetXYZ+0x2c>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005436:	2b00      	cmp	r3, #0
 8005438:	d004      	beq.n	8005444 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 800543a:	4b04      	ldr	r3, [pc, #16]	@ (800544c <BSP_MAGNETO_GetXYZ+0x2c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	4798      	blx	r3
    }
  }
}
 8005444:	bf00      	nop
 8005446:	3708      	adds	r7, #8
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	20000e40 	.word	0x20000e40

08005450 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8005456:	4b0c      	ldr	r3, [pc, #48]	@ (8005488 <BSP_PSENSOR_Init+0x38>)
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	20ba      	movs	r0, #186	@ 0xba
 800545c:	4798      	blx	r3
 800545e:	4603      	mov	r3, r0
 8005460:	2bb1      	cmp	r3, #177	@ 0xb1
 8005462:	d002      	beq.n	800546a <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	607b      	str	r3, [r7, #4]
 8005468:	e009      	b.n	800547e <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800546a:	4b08      	ldr	r3, [pc, #32]	@ (800548c <BSP_PSENSOR_Init+0x3c>)
 800546c:	4a06      	ldr	r2, [pc, #24]	@ (8005488 <BSP_PSENSOR_Init+0x38>)
 800546e:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8005470:	4b06      	ldr	r3, [pc, #24]	@ (800548c <BSP_PSENSOR_Init+0x3c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	20ba      	movs	r0, #186	@ 0xba
 8005478:	4798      	blx	r3
    ret = PSENSOR_OK;
 800547a:	2300      	movs	r3, #0
 800547c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800547e:	687b      	ldr	r3, [r7, #4]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	200000e0 	.word	0x200000e0
 800548c:	20000e44 	.word	0x20000e44

08005490 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8005494:	4b04      	ldr	r3, [pc, #16]	@ (80054a8 <BSP_PSENSOR_ReadPressure+0x18>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	20ba      	movs	r0, #186	@ 0xba
 800549c:	4798      	blx	r3
 800549e:	eef0 7a40 	vmov.f32	s15, s0
}
 80054a2:	eeb0 0a67 	vmov.f32	s0, s15
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	20000e44 	.word	0x20000e44

080054ac <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80054b6:	4b09      	ldr	r3, [pc, #36]	@ (80054dc <BSP_TSENSOR_Init+0x30>)
 80054b8:	4a09      	ldr	r2, [pc, #36]	@ (80054e0 <BSP_TSENSOR_Init+0x34>)
 80054ba:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80054bc:	f7ff fe46 	bl	800514c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80054c0:	4b06      	ldr	r3, [pc, #24]	@ (80054dc <BSP_TSENSOR_Init+0x30>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2100      	movs	r1, #0
 80054c8:	20be      	movs	r0, #190	@ 0xbe
 80054ca:	4798      	blx	r3

  ret = TSENSOR_OK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80054d0:	79fb      	ldrb	r3, [r7, #7]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	20000e48 	.word	0x20000e48
 80054e0:	2000009c 	.word	0x2000009c

080054e4 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80054e8:	4b04      	ldr	r3, [pc, #16]	@ (80054fc <BSP_TSENSOR_ReadTemp+0x18>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	20be      	movs	r0, #190	@ 0xbe
 80054f0:	4798      	blx	r3
 80054f2:	eef0 7a40 	vmov.f32	s15, s0
}
 80054f6:	eeb0 0a67 	vmov.f32	s0, s15
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	20000e48 	.word	0x20000e48

08005500 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	4603      	mov	r3, r0
 8005508:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800550a:	88fb      	ldrh	r3, [r7, #6]
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2120      	movs	r1, #32
 8005510:	4618      	mov	r0, r3
 8005512:	f7ff fe3f 	bl	8005194 <SENSOR_IO_Read>
 8005516:	4603      	mov	r3, r0
 8005518:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800551a:	7bfb      	ldrb	r3, [r7, #15]
 800551c:	f023 0304 	bic.w	r3, r3, #4
 8005520:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8005522:	7bfb      	ldrb	r3, [r7, #15]
 8005524:	f043 0304 	orr.w	r3, r3, #4
 8005528:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800552a:	7bfb      	ldrb	r3, [r7, #15]
 800552c:	f023 0303 	bic.w	r3, r3, #3
 8005530:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8005532:	7bfb      	ldrb	r3, [r7, #15]
 8005534:	f043 0301 	orr.w	r3, r3, #1
 8005538:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800553a:	7bfb      	ldrb	r3, [r7, #15]
 800553c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005540:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8005542:	88fb      	ldrh	r3, [r7, #6]
 8005544:	b2db      	uxtb	r3, r3
 8005546:	7bfa      	ldrb	r2, [r7, #15]
 8005548:	2120      	movs	r1, #32
 800554a:	4618      	mov	r0, r3
 800554c:	f7ff fe08 	bl	8005160 <SENSOR_IO_Write>
}
 8005550:	bf00      	nop
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	4603      	mov	r3, r0
 8005560:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8005562:	2300      	movs	r3, #0
 8005564:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8005566:	f7ff fdf1 	bl	800514c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800556a:	88fb      	ldrh	r3, [r7, #6]
 800556c:	b2db      	uxtb	r3, r3
 800556e:	210f      	movs	r1, #15
 8005570:	4618      	mov	r0, r3
 8005572:	f7ff fe0f 	bl	8005194 <SENSOR_IO_Read>
 8005576:	4603      	mov	r3, r0
 8005578:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800557a:	7bfb      	ldrb	r3, [r7, #15]
}
 800557c:	4618      	mov	r0, r3
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b088      	sub	sp, #32
 8005588:	af00      	add	r7, sp, #0
 800558a:	4603      	mov	r3, r0
 800558c:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 800558e:	88fb      	ldrh	r3, [r7, #6]
 8005590:	b2d8      	uxtb	r0, r3
 8005592:	f107 020c 	add.w	r2, r7, #12
 8005596:	2302      	movs	r3, #2
 8005598:	21b0      	movs	r1, #176	@ 0xb0
 800559a:	f7ff fe19 	bl	80051d0 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 800559e:	7b3b      	ldrb	r3, [r7, #12]
 80055a0:	085b      	lsrs	r3, r3, #1
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 80055a6:	7b7b      	ldrb	r3, [r7, #13]
 80055a8:	085b      	lsrs	r3, r3, #1
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80055ae:	88fb      	ldrh	r3, [r7, #6]
 80055b0:	b2d8      	uxtb	r0, r3
 80055b2:	f107 020c 	add.w	r2, r7, #12
 80055b6:	2302      	movs	r3, #2
 80055b8:	21b6      	movs	r1, #182	@ 0xb6
 80055ba:	f7ff fe09 	bl	80051d0 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80055be:	7b7b      	ldrb	r3, [r7, #13]
 80055c0:	021b      	lsls	r3, r3, #8
 80055c2:	b21a      	sxth	r2, r3
 80055c4:	7b3b      	ldrb	r3, [r7, #12]
 80055c6:	b21b      	sxth	r3, r3
 80055c8:	4313      	orrs	r3, r2
 80055ca:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80055cc:	88fb      	ldrh	r3, [r7, #6]
 80055ce:	b2d8      	uxtb	r0, r3
 80055d0:	f107 020c 	add.w	r2, r7, #12
 80055d4:	2302      	movs	r3, #2
 80055d6:	21ba      	movs	r1, #186	@ 0xba
 80055d8:	f7ff fdfa 	bl	80051d0 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80055dc:	7b7b      	ldrb	r3, [r7, #13]
 80055de:	021b      	lsls	r3, r3, #8
 80055e0:	b21a      	sxth	r2, r3
 80055e2:	7b3b      	ldrb	r3, [r7, #12]
 80055e4:	b21b      	sxth	r3, r3
 80055e6:	4313      	orrs	r3, r2
 80055e8:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80055ea:	88fb      	ldrh	r3, [r7, #6]
 80055ec:	b2d8      	uxtb	r0, r3
 80055ee:	f107 020c 	add.w	r2, r7, #12
 80055f2:	2302      	movs	r3, #2
 80055f4:	21a8      	movs	r1, #168	@ 0xa8
 80055f6:	f7ff fdeb 	bl	80051d0 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80055fa:	7b7b      	ldrb	r3, [r7, #13]
 80055fc:	021b      	lsls	r3, r3, #8
 80055fe:	b21a      	sxth	r2, r3
 8005600:	7b3b      	ldrb	r3, [r7, #12]
 8005602:	b21b      	sxth	r3, r3
 8005604:	4313      	orrs	r3, r2
 8005606:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8005608:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800560c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	ee07 3a90 	vmov	s15, r3
 8005616:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800561a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800561e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	ee07 3a90 	vmov	s15, r3
 8005628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800562c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005630:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005634:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	ee07 3a90 	vmov	s15, r3
 800563e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005646:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800564a:	ee07 3a90 	vmov	s15, r3
 800564e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005656:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800565a:	edd7 7a04 	vldr	s15, [r7, #16]
 800565e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005662:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005666:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800566a:	edd7 7a04 	vldr	s15, [r7, #16]
 800566e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80056b4 <HTS221_H_ReadHumidity+0x130>
 8005672:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800567a:	dd01      	ble.n	8005680 <HTS221_H_ReadHumidity+0xfc>
 800567c:	4b0e      	ldr	r3, [pc, #56]	@ (80056b8 <HTS221_H_ReadHumidity+0x134>)
 800567e:	e00a      	b.n	8005696 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8005680:	edd7 7a04 	vldr	s15, [r7, #16]
 8005684:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800568c:	d502      	bpl.n	8005694 <HTS221_H_ReadHumidity+0x110>
 800568e:	f04f 0300 	mov.w	r3, #0
 8005692:	e000      	b.n	8005696 <HTS221_H_ReadHumidity+0x112>
 8005694:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8005696:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8005698:	edd7 7a04 	vldr	s15, [r7, #16]
 800569c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80056a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80056a4:	eef0 7a66 	vmov.f32	s15, s13
}
 80056a8:	eeb0 0a67 	vmov.f32	s0, s15
 80056ac:	3720      	adds	r7, #32
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	447a0000 	.word	0x447a0000
 80056b8:	447a0000 	.word	0x447a0000

080056bc <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	4603      	mov	r3, r0
 80056c4:	6039      	str	r1, [r7, #0]
 80056c6:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80056c8:	88fb      	ldrh	r3, [r7, #6]
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2120      	movs	r1, #32
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7ff fd60 	bl	8005194 <SENSOR_IO_Read>
 80056d4:	4603      	mov	r3, r0
 80056d6:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
 80056da:	f023 0304 	bic.w	r3, r3, #4
 80056de:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80056e0:	7bfb      	ldrb	r3, [r7, #15]
 80056e2:	f043 0304 	orr.w	r3, r3, #4
 80056e6:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80056e8:	7bfb      	ldrb	r3, [r7, #15]
 80056ea:	f023 0303 	bic.w	r3, r3, #3
 80056ee:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
 80056f2:	f043 0301 	orr.w	r3, r3, #1
 80056f6:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
 80056fa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80056fe:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8005700:	88fb      	ldrh	r3, [r7, #6]
 8005702:	b2db      	uxtb	r3, r3
 8005704:	7bfa      	ldrb	r2, [r7, #15]
 8005706:	2120      	movs	r1, #32
 8005708:	4618      	mov	r0, r3
 800570a:	f7ff fd29 	bl	8005160 <SENSOR_IO_Write>
}
 800570e:	bf00      	nop
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b088      	sub	sp, #32
 800571a:	af00      	add	r7, sp, #0
 800571c:	4603      	mov	r3, r0
 800571e:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8005720:	88fb      	ldrh	r3, [r7, #6]
 8005722:	b2d8      	uxtb	r0, r3
 8005724:	f107 0208 	add.w	r2, r7, #8
 8005728:	2302      	movs	r3, #2
 800572a:	21b2      	movs	r1, #178	@ 0xb2
 800572c:	f7ff fd50 	bl	80051d0 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8005730:	88fb      	ldrh	r3, [r7, #6]
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2135      	movs	r1, #53	@ 0x35
 8005736:	4618      	mov	r0, r3
 8005738:	f7ff fd2c 	bl	8005194 <SENSOR_IO_Read>
 800573c:	4603      	mov	r3, r0
 800573e:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8005740:	7ffb      	ldrb	r3, [r7, #31]
 8005742:	021b      	lsls	r3, r3, #8
 8005744:	b21b      	sxth	r3, r3
 8005746:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800574a:	b21a      	sxth	r2, r3
 800574c:	7a3b      	ldrb	r3, [r7, #8]
 800574e:	b21b      	sxth	r3, r3
 8005750:	4313      	orrs	r3, r2
 8005752:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8005754:	7ffb      	ldrb	r3, [r7, #31]
 8005756:	019b      	lsls	r3, r3, #6
 8005758:	b21b      	sxth	r3, r3
 800575a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800575e:	b21a      	sxth	r2, r3
 8005760:	7a7b      	ldrb	r3, [r7, #9]
 8005762:	b21b      	sxth	r3, r3
 8005764:	4313      	orrs	r3, r2
 8005766:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8005768:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800576c:	10db      	asrs	r3, r3, #3
 800576e:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8005770:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005774:	10db      	asrs	r3, r3, #3
 8005776:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8005778:	88fb      	ldrh	r3, [r7, #6]
 800577a:	b2d8      	uxtb	r0, r3
 800577c:	f107 0208 	add.w	r2, r7, #8
 8005780:	2304      	movs	r3, #4
 8005782:	21bc      	movs	r1, #188	@ 0xbc
 8005784:	f7ff fd24 	bl	80051d0 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8005788:	7a7b      	ldrb	r3, [r7, #9]
 800578a:	021b      	lsls	r3, r3, #8
 800578c:	b21a      	sxth	r2, r3
 800578e:	7a3b      	ldrb	r3, [r7, #8]
 8005790:	b21b      	sxth	r3, r3
 8005792:	4313      	orrs	r3, r2
 8005794:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8005796:	7afb      	ldrb	r3, [r7, #11]
 8005798:	021b      	lsls	r3, r3, #8
 800579a:	b21a      	sxth	r2, r3
 800579c:	7abb      	ldrb	r3, [r7, #10]
 800579e:	b21b      	sxth	r3, r3
 80057a0:	4313      	orrs	r3, r2
 80057a2:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80057a4:	88fb      	ldrh	r3, [r7, #6]
 80057a6:	b2d8      	uxtb	r0, r3
 80057a8:	f107 0208 	add.w	r2, r7, #8
 80057ac:	2302      	movs	r3, #2
 80057ae:	21aa      	movs	r1, #170	@ 0xaa
 80057b0:	f7ff fd0e 	bl	80051d0 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80057b4:	7a7b      	ldrb	r3, [r7, #9]
 80057b6:	021b      	lsls	r3, r3, #8
 80057b8:	b21a      	sxth	r2, r3
 80057ba:	7a3b      	ldrb	r3, [r7, #8]
 80057bc:	b21b      	sxth	r3, r3
 80057be:	4313      	orrs	r3, r2
 80057c0:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80057c2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80057c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	ee07 3a90 	vmov	s15, r3
 80057d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80057d8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	ee07 3a90 	vmov	s15, r3
 80057e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057e6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80057ea:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80057ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	ee07 3a90 	vmov	s15, r3
 80057f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005800:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005804:	ee07 3a90 	vmov	s15, r3
 8005808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800580c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005810:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	ee07 3a90 	vmov	s15, r3
}
 800581a:	eeb0 0a67 	vmov.f32	s0, s15
 800581e:	3720      	adds	r7, #32
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	463b      	mov	r3, r7
 800582c:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8005830:	783b      	ldrb	r3, [r7, #0]
 8005832:	461a      	mov	r2, r3
 8005834:	2120      	movs	r1, #32
 8005836:	203c      	movs	r0, #60	@ 0x3c
 8005838:	f7ff fc92 	bl	8005160 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 800583c:	787b      	ldrb	r3, [r7, #1]
 800583e:	461a      	mov	r2, r3
 8005840:	2121      	movs	r1, #33	@ 0x21
 8005842:	203c      	movs	r0, #60	@ 0x3c
 8005844:	f7ff fc8c 	bl	8005160 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8005848:	78bb      	ldrb	r3, [r7, #2]
 800584a:	461a      	mov	r2, r3
 800584c:	2122      	movs	r1, #34	@ 0x22
 800584e:	203c      	movs	r0, #60	@ 0x3c
 8005850:	f7ff fc86 	bl	8005160 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8005854:	78fb      	ldrb	r3, [r7, #3]
 8005856:	461a      	mov	r2, r3
 8005858:	2123      	movs	r1, #35	@ 0x23
 800585a:	203c      	movs	r0, #60	@ 0x3c
 800585c:	f7ff fc80 	bl	8005160 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8005860:	793b      	ldrb	r3, [r7, #4]
 8005862:	461a      	mov	r2, r3
 8005864:	2124      	movs	r1, #36	@ 0x24
 8005866:	203c      	movs	r0, #60	@ 0x3c
 8005868:	f7ff fc7a 	bl	8005160 <SENSOR_IO_Write>
}
 800586c:	bf00      	nop
 800586e:	3708      	adds	r7, #8
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800587a:	2300      	movs	r3, #0
 800587c:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800587e:	2122      	movs	r1, #34	@ 0x22
 8005880:	203c      	movs	r0, #60	@ 0x3c
 8005882:	f7ff fc87 	bl	8005194 <SENSOR_IO_Read>
 8005886:	4603      	mov	r3, r0
 8005888:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 800588a:	79fb      	ldrb	r3, [r7, #7]
 800588c:	f023 0303 	bic.w	r3, r3, #3
 8005890:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8005892:	79fb      	ldrb	r3, [r7, #7]
 8005894:	f043 0303 	orr.w	r3, r3, #3
 8005898:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800589a:	79fb      	ldrb	r3, [r7, #7]
 800589c:	461a      	mov	r2, r3
 800589e:	2122      	movs	r1, #34	@ 0x22
 80058a0:	203c      	movs	r0, #60	@ 0x3c
 80058a2:	f7ff fc5d 	bl	8005160 <SENSOR_IO_Write>
}
 80058a6:	bf00      	nop
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80058b2:	f7ff fc4b 	bl	800514c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 80058b6:	210f      	movs	r1, #15
 80058b8:	203c      	movs	r0, #60	@ 0x3c
 80058ba:	f7ff fc6b 	bl	8005194 <SENSOR_IO_Read>
 80058be:	4603      	mov	r3, r0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	4603      	mov	r3, r0
 80058cc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 80058ce:	2300      	movs	r3, #0
 80058d0:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80058d2:	2122      	movs	r1, #34	@ 0x22
 80058d4:	203c      	movs	r0, #60	@ 0x3c
 80058d6:	f7ff fc5d 	bl	8005194 <SENSOR_IO_Read>
 80058da:	4603      	mov	r3, r0
 80058dc:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 80058de:	7bfb      	ldrb	r3, [r7, #15]
 80058e0:	f023 0320 	bic.w	r3, r3, #32
 80058e4:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80058e6:	88fb      	ldrh	r3, [r7, #6]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 80058ec:	7bfb      	ldrb	r3, [r7, #15]
 80058ee:	f043 0320 	orr.w	r3, r3, #32
 80058f2:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
 80058f6:	461a      	mov	r2, r3
 80058f8:	2122      	movs	r1, #34	@ 0x22
 80058fa:	203c      	movs	r0, #60	@ 0x3c
 80058fc:	f7ff fc30 	bl	8005160 <SENSOR_IO_Write>
}
 8005900:	bf00      	nop
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(float* pData)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b088      	sub	sp, #32
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8005910:	2300      	movs	r3, #0
 8005912:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8005914:	2300      	movs	r3, #0
 8005916:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8005918:	f04f 0300 	mov.w	r3, #0
 800591c:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 800591e:	2121      	movs	r1, #33	@ 0x21
 8005920:	203c      	movs	r0, #60	@ 0x3c
 8005922:	f7ff fc37 	bl	8005194 <SENSOR_IO_Read>
 8005926:	4603      	mov	r3, r0
 8005928:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 800592a:	f107 0208 	add.w	r2, r7, #8
 800592e:	2306      	movs	r3, #6
 8005930:	21a8      	movs	r1, #168	@ 0xa8
 8005932:	203c      	movs	r0, #60	@ 0x3c
 8005934:	f7ff fc4c 	bl	80051d0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8005938:	2300      	movs	r3, #0
 800593a:	77fb      	strb	r3, [r7, #31]
 800593c:	e01a      	b.n	8005974 <LIS3MDL_MagReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800593e:	7ffb      	ldrb	r3, [r7, #31]
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	3301      	adds	r3, #1
 8005944:	3320      	adds	r3, #32
 8005946:	443b      	add	r3, r7
 8005948:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800594c:	021b      	lsls	r3, r3, #8
 800594e:	b29b      	uxth	r3, r3
 8005950:	7ffa      	ldrb	r2, [r7, #31]
 8005952:	0052      	lsls	r2, r2, #1
 8005954:	3220      	adds	r2, #32
 8005956:	443a      	add	r2, r7
 8005958:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800595c:	4413      	add	r3, r2
 800595e:	b29a      	uxth	r2, r3
 8005960:	7ffb      	ldrb	r3, [r7, #31]
 8005962:	b212      	sxth	r2, r2
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	3320      	adds	r3, #32
 8005968:	443b      	add	r3, r7
 800596a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800596e:	7ffb      	ldrb	r3, [r7, #31]
 8005970:	3301      	adds	r3, #1
 8005972:	77fb      	strb	r3, [r7, #31]
 8005974:	7ffb      	ldrb	r3, [r7, #31]
 8005976:	2b02      	cmp	r3, #2
 8005978:	d9e1      	bls.n	800593e <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 800597a:	7dfb      	ldrb	r3, [r7, #23]
 800597c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005980:	2b60      	cmp	r3, #96	@ 0x60
 8005982:	d013      	beq.n	80059ac <LIS3MDL_MagReadXYZ+0xa4>
 8005984:	2b60      	cmp	r3, #96	@ 0x60
 8005986:	dc14      	bgt.n	80059b2 <LIS3MDL_MagReadXYZ+0xaa>
 8005988:	2b40      	cmp	r3, #64	@ 0x40
 800598a:	d00c      	beq.n	80059a6 <LIS3MDL_MagReadXYZ+0x9e>
 800598c:	2b40      	cmp	r3, #64	@ 0x40
 800598e:	dc10      	bgt.n	80059b2 <LIS3MDL_MagReadXYZ+0xaa>
 8005990:	2b00      	cmp	r3, #0
 8005992:	d002      	beq.n	800599a <LIS3MDL_MagReadXYZ+0x92>
 8005994:	2b20      	cmp	r3, #32
 8005996:	d003      	beq.n	80059a0 <LIS3MDL_MagReadXYZ+0x98>
 8005998:	e00b      	b.n	80059b2 <LIS3MDL_MagReadXYZ+0xaa>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 800599a:	4b17      	ldr	r3, [pc, #92]	@ (80059f8 <LIS3MDL_MagReadXYZ+0xf0>)
 800599c:	61bb      	str	r3, [r7, #24]
    break;
 800599e:	e008      	b.n	80059b2 <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 80059a0:	4b16      	ldr	r3, [pc, #88]	@ (80059fc <LIS3MDL_MagReadXYZ+0xf4>)
 80059a2:	61bb      	str	r3, [r7, #24]
    break;
 80059a4:	e005      	b.n	80059b2 <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 80059a6:	4b16      	ldr	r3, [pc, #88]	@ (8005a00 <LIS3MDL_MagReadXYZ+0xf8>)
 80059a8:	61bb      	str	r3, [r7, #24]
    break;
 80059aa:	e002      	b.n	80059b2 <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 80059ac:	4b14      	ldr	r3, [pc, #80]	@ (8005a00 <LIS3MDL_MagReadXYZ+0xf8>)
 80059ae:	61bb      	str	r3, [r7, #24]
    break;    
 80059b0:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 80059b2:	2300      	movs	r3, #0
 80059b4:	77fb      	strb	r3, [r7, #31]
 80059b6:	e016      	b.n	80059e6 <LIS3MDL_MagReadXYZ+0xde>
  {
    pData[i]=((float)pnRawData[i] * sensitivity);
 80059b8:	7ffb      	ldrb	r3, [r7, #31]
 80059ba:	005b      	lsls	r3, r3, #1
 80059bc:	3320      	adds	r3, #32
 80059be:	443b      	add	r3, r7
 80059c0:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80059c4:	ee07 3a90 	vmov	s15, r3
 80059c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80059cc:	7ffb      	ldrb	r3, [r7, #31]
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	4413      	add	r3, r2
 80059d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80059d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059dc:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80059e0:	7ffb      	ldrb	r3, [r7, #31]
 80059e2:	3301      	adds	r3, #1
 80059e4:	77fb      	strb	r3, [r7, #31]
 80059e6:	7ffb      	ldrb	r3, [r7, #31]
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d9e5      	bls.n	80059b8 <LIS3MDL_MagReadXYZ+0xb0>
  }
}
 80059ec:	bf00      	nop
 80059ee:	bf00      	nop
 80059f0:	3720      	adds	r7, #32
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	3c6f764f 	.word	0x3c6f764f
 80059fc:	3cef764f 	.word	0x3cef764f
 8005a00:	3d339203 	.word	0x3d339203

08005a04 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8005a0e:	88fb      	ldrh	r3, [r7, #6]
 8005a10:	4618      	mov	r0, r3
 8005a12:	f000 f879 	bl	8005b08 <LPS22HB_Init>
}
 8005a16:	bf00      	nop
 8005a18:	3708      	adds	r7, #8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b084      	sub	sp, #16
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	4603      	mov	r3, r0
 8005a26:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8005a2c:	f7ff fb8e 	bl	800514c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8005a30:	88fb      	ldrh	r3, [r7, #6]
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	210f      	movs	r1, #15
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7ff fbac 	bl	8005194 <SENSOR_IO_Read>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
	...

08005a4c <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8005a4c:	b590      	push	{r4, r7, lr}
 8005a4e:	b087      	sub	sp, #28
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	4603      	mov	r3, r0
 8005a54:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8005a56:	2300      	movs	r3, #0
 8005a58:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	74fb      	strb	r3, [r7, #19]
 8005a5e:	e013      	b.n	8005a88 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8005a60:	88fb      	ldrh	r3, [r7, #6]
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	7cfb      	ldrb	r3, [r7, #19]
 8005a66:	3328      	adds	r3, #40	@ 0x28
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	7cfc      	ldrb	r4, [r7, #19]
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4610      	mov	r0, r2
 8005a70:	f7ff fb90 	bl	8005194 <SENSOR_IO_Read>
 8005a74:	4603      	mov	r3, r0
 8005a76:	461a      	mov	r2, r3
 8005a78:	f104 0318 	add.w	r3, r4, #24
 8005a7c:	443b      	add	r3, r7
 8005a7e:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8005a82:	7cfb      	ldrb	r3, [r7, #19]
 8005a84:	3301      	adds	r3, #1
 8005a86:	74fb      	strb	r3, [r7, #19]
 8005a88:	7cfb      	ldrb	r3, [r7, #19]
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d9e8      	bls.n	8005a60 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8005a8e:	2300      	movs	r3, #0
 8005a90:	74fb      	strb	r3, [r7, #19]
 8005a92:	e00f      	b.n	8005ab4 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8005a94:	7cfb      	ldrb	r3, [r7, #19]
 8005a96:	3318      	adds	r3, #24
 8005a98:	443b      	add	r3, r7
 8005a9a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	7cfb      	ldrb	r3, [r7, #19]
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8005aae:	7cfb      	ldrb	r3, [r7, #19]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	74fb      	strb	r3, [r7, #19]
 8005ab4:	7cfb      	ldrb	r3, [r7, #19]
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d9ec      	bls.n	8005a94 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d003      	beq.n	8005acc <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005aca:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2264      	movs	r2, #100	@ 0x64
 8005ad4:	fb02 f303 	mul.w	r3, r2, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	da01      	bge.n	8005ae0 <LPS22HB_P_ReadPressure+0x94>
 8005adc:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8005ae0:	131b      	asrs	r3, r3, #12
 8005ae2:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	ee07 3a90 	vmov	s15, r3
 8005aea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005aee:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8005b04 <LPS22HB_P_ReadPressure+0xb8>
 8005af2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005af6:	eef0 7a66 	vmov.f32	s15, s13
}
 8005afa:	eeb0 0a67 	vmov.f32	s0, s15
 8005afe:	371c      	adds	r7, #28
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd90      	pop	{r4, r7, pc}
 8005b04:	42c80000 	.word	0x42c80000

08005b08 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	4603      	mov	r3, r0
 8005b10:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8005b12:	88fb      	ldrh	r3, [r7, #6]
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	211a      	movs	r1, #26
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7ff fb3b 	bl	8005194 <SENSOR_IO_Read>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8005b22:	7bfb      	ldrb	r3, [r7, #15]
 8005b24:	f023 0301 	bic.w	r3, r3, #1
 8005b28:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8005b2a:	7bfb      	ldrb	r3, [r7, #15]
 8005b2c:	f043 0301 	orr.w	r3, r3, #1
 8005b30:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8005b32:	88fb      	ldrh	r3, [r7, #6]
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	7bfa      	ldrb	r2, [r7, #15]
 8005b38:	211a      	movs	r1, #26
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7ff fb10 	bl	8005160 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8005b40:	88fb      	ldrh	r3, [r7, #6]
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2110      	movs	r1, #16
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7ff fb24 	bl	8005194 <SENSOR_IO_Read>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
 8005b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b56:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
 8005b5a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8005b5e:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8005b60:	7bfb      	ldrb	r3, [r7, #15]
 8005b62:	f023 0302 	bic.w	r3, r3, #2
 8005b66:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8005b68:	7bfb      	ldrb	r3, [r7, #15]
 8005b6a:	f043 0302 	orr.w	r3, r3, #2
 8005b6e:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8005b70:	88fb      	ldrh	r3, [r7, #6]
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	7bfa      	ldrb	r2, [r7, #15]
 8005b76:	2110      	movs	r1, #16
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7ff faf1 	bl	8005160 <SENSOR_IO_Write>
}  
 8005b7e:	bf00      	nop
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b084      	sub	sp, #16
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8005b90:	2300      	movs	r3, #0
 8005b92:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8005b94:	2110      	movs	r1, #16
 8005b96:	20d4      	movs	r0, #212	@ 0xd4
 8005b98:	f7ff fafc 	bl	8005194 <SENSOR_IO_Read>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8005ba0:	88fb      	ldrh	r3, [r7, #6]
 8005ba2:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8005ba4:	7bbb      	ldrb	r3, [r7, #14]
 8005ba6:	f003 0303 	and.w	r3, r3, #3
 8005baa:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8005bac:	7bba      	ldrb	r2, [r7, #14]
 8005bae:	7bfb      	ldrb	r3, [r7, #15]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8005bb4:	7bbb      	ldrb	r3, [r7, #14]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	2110      	movs	r1, #16
 8005bba:	20d4      	movs	r0, #212	@ 0xd4
 8005bbc:	f7ff fad0 	bl	8005160 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8005bc0:	2112      	movs	r1, #18
 8005bc2:	20d4      	movs	r0, #212	@ 0xd4
 8005bc4:	f7ff fae6 	bl	8005194 <SENSOR_IO_Read>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8005bcc:	88fb      	ldrh	r3, [r7, #6]
 8005bce:	0a1b      	lsrs	r3, r3, #8
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8005bd4:	7bbb      	ldrb	r3, [r7, #14]
 8005bd6:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8005bda:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8005bdc:	7bba      	ldrb	r2, [r7, #14]
 8005bde:	7bfb      	ldrb	r3, [r7, #15]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8005be4:	7bbb      	ldrb	r3, [r7, #14]
 8005be6:	461a      	mov	r2, r3
 8005be8:	2112      	movs	r1, #18
 8005bea:	20d4      	movs	r0, #212	@ 0xd4
 8005bec:	f7ff fab8 	bl	8005160 <SENSOR_IO_Write>
}
 8005bf0:	bf00      	nop
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8005c02:	2110      	movs	r1, #16
 8005c04:	20d4      	movs	r0, #212	@ 0xd4
 8005c06:	f7ff fac5 	bl	8005194 <SENSOR_IO_Read>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8005c0e:	79fb      	ldrb	r3, [r7, #7]
 8005c10:	f003 030f 	and.w	r3, r3, #15
 8005c14:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8005c16:	79fb      	ldrb	r3, [r7, #7]
 8005c18:	461a      	mov	r2, r3
 8005c1a:	2110      	movs	r1, #16
 8005c1c:	20d4      	movs	r0, #212	@ 0xd4
 8005c1e:	f7ff fa9f 	bl	8005160 <SENSOR_IO_Write>
}
 8005c22:	bf00      	nop
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8005c2e:	f7ff fa8d 	bl	800514c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8005c32:	210f      	movs	r1, #15
 8005c34:	20d4      	movs	r0, #212	@ 0xd4
 8005c36:	f7ff faad 	bl	8005194 <SENSOR_IO_Read>
 8005c3a:	4603      	mov	r3, r0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	4603      	mov	r3, r0
 8005c48:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8005c4e:	2115      	movs	r1, #21
 8005c50:	20d4      	movs	r0, #212	@ 0xd4
 8005c52:	f7ff fa9f 	bl	8005194 <SENSOR_IO_Read>
 8005c56:	4603      	mov	r3, r0
 8005c58:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8005c5a:	7bfb      	ldrb	r3, [r7, #15]
 8005c5c:	f023 0310 	bic.w	r3, r3, #16
 8005c60:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8005c62:	88fb      	ldrh	r3, [r7, #6]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8005c68:	7bfb      	ldrb	r3, [r7, #15]
 8005c6a:	f043 0310 	orr.w	r3, r3, #16
 8005c6e:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8005c70:	7bfb      	ldrb	r3, [r7, #15]
 8005c72:	461a      	mov	r2, r3
 8005c74:	2115      	movs	r1, #21
 8005c76:	20d4      	movs	r0, #212	@ 0xd4
 8005c78:	f7ff fa72 	bl	8005160 <SENSOR_IO_Write>
}
 8005c7c:	bf00      	nop
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(float* pData)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b088      	sub	sp, #32
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8005c90:	2300      	movs	r3, #0
 8005c92:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8005c94:	f04f 0300 	mov.w	r3, #0
 8005c98:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8005c9a:	2110      	movs	r1, #16
 8005c9c:	20d4      	movs	r0, #212	@ 0xd4
 8005c9e:	f7ff fa79 	bl	8005194 <SENSOR_IO_Read>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8005ca6:	f107 0208 	add.w	r2, r7, #8
 8005caa:	2306      	movs	r3, #6
 8005cac:	2128      	movs	r1, #40	@ 0x28
 8005cae:	20d4      	movs	r0, #212	@ 0xd4
 8005cb0:	f7ff fa8e 	bl	80051d0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	77fb      	strb	r3, [r7, #31]
 8005cb8:	e01a      	b.n	8005cf0 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8005cba:	7ffb      	ldrb	r3, [r7, #31]
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	3320      	adds	r3, #32
 8005cc2:	443b      	add	r3, r7
 8005cc4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8005cc8:	021b      	lsls	r3, r3, #8
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	7ffa      	ldrb	r2, [r7, #31]
 8005cce:	0052      	lsls	r2, r2, #1
 8005cd0:	3220      	adds	r2, #32
 8005cd2:	443a      	add	r2, r7
 8005cd4:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8005cd8:	4413      	add	r3, r2
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	7ffb      	ldrb	r3, [r7, #31]
 8005cde:	b212      	sxth	r2, r2
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	3320      	adds	r3, #32
 8005ce4:	443b      	add	r3, r7
 8005ce6:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8005cea:	7ffb      	ldrb	r3, [r7, #31]
 8005cec:	3301      	adds	r3, #1
 8005cee:	77fb      	strb	r3, [r7, #31]
 8005cf0:	7ffb      	ldrb	r3, [r7, #31]
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d9e1      	bls.n	8005cba <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8005cf6:	7dfb      	ldrb	r3, [r7, #23]
 8005cf8:	f003 030c 	and.w	r3, r3, #12
 8005cfc:	2b0c      	cmp	r3, #12
 8005cfe:	d82d      	bhi.n	8005d5c <LSM6DSL_AccReadXYZ+0xd8>
 8005d00:	a201      	add	r2, pc, #4	@ (adr r2, 8005d08 <LSM6DSL_AccReadXYZ+0x84>)
 8005d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d06:	bf00      	nop
 8005d08:	08005d3d 	.word	0x08005d3d
 8005d0c:	08005d5d 	.word	0x08005d5d
 8005d10:	08005d5d 	.word	0x08005d5d
 8005d14:	08005d5d 	.word	0x08005d5d
 8005d18:	08005d55 	.word	0x08005d55
 8005d1c:	08005d5d 	.word	0x08005d5d
 8005d20:	08005d5d 	.word	0x08005d5d
 8005d24:	08005d5d 	.word	0x08005d5d
 8005d28:	08005d45 	.word	0x08005d45
 8005d2c:	08005d5d 	.word	0x08005d5d
 8005d30:	08005d5d 	.word	0x08005d5d
 8005d34:	08005d5d 	.word	0x08005d5d
 8005d38:	08005d4d 	.word	0x08005d4d
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8005d3c:	f04f 5362 	mov.w	r3, #947912704	@ 0x38800000
 8005d40:	61bb      	str	r3, [r7, #24]
    break;
 8005d42:	e00b      	b.n	8005d5c <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8005d44:	f04f 5364 	mov.w	r3, #956301312	@ 0x39000000
 8005d48:	61bb      	str	r3, [r7, #24]
    break;
 8005d4a:	e007      	b.n	8005d5c <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8005d4c:	f04f 5366 	mov.w	r3, #964689920	@ 0x39800000
 8005d50:	61bb      	str	r3, [r7, #24]
    break;
 8005d52:	e003      	b.n	8005d5c <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8005d54:	f04f 5368 	mov.w	r3, #973078528	@ 0x3a000000
 8005d58:	61bb      	str	r3, [r7, #24]
    break;    
 8005d5a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	77fb      	strb	r3, [r7, #31]
 8005d60:	e016      	b.n	8005d90 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( float )(pnRawData[i] * sensitivity);
 8005d62:	7ffb      	ldrb	r3, [r7, #31]
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	3320      	adds	r3, #32
 8005d68:	443b      	add	r3, r7
 8005d6a:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8005d6e:	ee07 3a90 	vmov	s15, r3
 8005d72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d76:	7ffb      	ldrb	r3, [r7, #31]
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	edd7 7a06 	vldr	s15, [r7, #24]
 8005d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d86:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8005d8a:	7ffb      	ldrb	r3, [r7, #31]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	77fb      	strb	r3, [r7, #31]
 8005d90:	7ffb      	ldrb	r3, [r7, #31]
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d9e5      	bls.n	8005d62 <LSM6DSL_AccReadXYZ+0xde>
  }
}
 8005d96:	bf00      	nop
 8005d98:	bf00      	nop
 8005d9a:	3720      	adds	r7, #32
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	4603      	mov	r3, r0
 8005da8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8005daa:	2300      	movs	r3, #0
 8005dac:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8005dae:	2111      	movs	r1, #17
 8005db0:	20d4      	movs	r0, #212	@ 0xd4
 8005db2:	f7ff f9ef 	bl	8005194 <SENSOR_IO_Read>
 8005db6:	4603      	mov	r3, r0
 8005db8:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8005dba:	88fb      	ldrh	r3, [r7, #6]
 8005dbc:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8005dbe:	7bbb      	ldrb	r3, [r7, #14]
 8005dc0:	f003 0303 	and.w	r3, r3, #3
 8005dc4:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8005dc6:	7bba      	ldrb	r2, [r7, #14]
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8005dce:	7bbb      	ldrb	r3, [r7, #14]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	2111      	movs	r1, #17
 8005dd4:	20d4      	movs	r0, #212	@ 0xd4
 8005dd6:	f7ff f9c3 	bl	8005160 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8005dda:	2112      	movs	r1, #18
 8005ddc:	20d4      	movs	r0, #212	@ 0xd4
 8005dde:	f7ff f9d9 	bl	8005194 <SENSOR_IO_Read>
 8005de2:	4603      	mov	r3, r0
 8005de4:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8005de6:	88fb      	ldrh	r3, [r7, #6]
 8005de8:	0a1b      	lsrs	r3, r3, #8
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8005dee:	7bbb      	ldrb	r3, [r7, #14]
 8005df0:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8005df4:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8005df6:	7bba      	ldrb	r2, [r7, #14]
 8005df8:	7bfb      	ldrb	r3, [r7, #15]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8005dfe:	7bbb      	ldrb	r3, [r7, #14]
 8005e00:	461a      	mov	r2, r3
 8005e02:	2112      	movs	r1, #18
 8005e04:	20d4      	movs	r0, #212	@ 0xd4
 8005e06:	f7ff f9ab 	bl	8005160 <SENSOR_IO_Write>
}
 8005e0a:	bf00      	nop
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b082      	sub	sp, #8
 8005e16:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8005e1c:	2111      	movs	r1, #17
 8005e1e:	20d4      	movs	r0, #212	@ 0xd4
 8005e20:	f7ff f9b8 	bl	8005194 <SENSOR_IO_Read>
 8005e24:	4603      	mov	r3, r0
 8005e26:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8005e28:	79fb      	ldrb	r3, [r7, #7]
 8005e2a:	f003 030f 	and.w	r3, r3, #15
 8005e2e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8005e30:	79fb      	ldrb	r3, [r7, #7]
 8005e32:	461a      	mov	r2, r3
 8005e34:	2111      	movs	r1, #17
 8005e36:	20d4      	movs	r0, #212	@ 0xd4
 8005e38:	f7ff f992 	bl	8005160 <SENSOR_IO_Write>
}
 8005e3c:	bf00      	nop
 8005e3e:	3708      	adds	r7, #8
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8005e48:	f7ff f980 	bl	800514c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8005e4c:	210f      	movs	r1, #15
 8005e4e:	20d4      	movs	r0, #212	@ 0xd4
 8005e50:	f7ff f9a0 	bl	8005194 <SENSOR_IO_Read>
 8005e54:	4603      	mov	r3, r0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b084      	sub	sp, #16
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	4603      	mov	r3, r0
 8005e62:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8005e64:	2300      	movs	r3, #0
 8005e66:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8005e68:	2116      	movs	r1, #22
 8005e6a:	20d4      	movs	r0, #212	@ 0xd4
 8005e6c:	f7ff f992 	bl	8005194 <SENSOR_IO_Read>
 8005e70:	4603      	mov	r3, r0
 8005e72:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8005e74:	7bfb      	ldrb	r3, [r7, #15]
 8005e76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e7a:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8005e7c:	88fb      	ldrh	r3, [r7, #6]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d003      	beq.n	8005e8a <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
 8005e84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e88:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8005e8a:	7bfb      	ldrb	r3, [r7, #15]
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	2116      	movs	r1, #22
 8005e90:	20d4      	movs	r0, #212	@ 0xd4
 8005e92:	f7ff f965 	bl	8005160 <SENSOR_IO_Write>
}
 8005e96:	bf00      	nop
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
	...

08005ea0 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8005eac:	2300      	movs	r3, #0
 8005eae:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8005eb0:	f04f 0300 	mov.w	r3, #0
 8005eb4:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8005eb6:	2111      	movs	r1, #17
 8005eb8:	20d4      	movs	r0, #212	@ 0xd4
 8005eba:	f7ff f96b 	bl	8005194 <SENSOR_IO_Read>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8005ec2:	f107 0208 	add.w	r2, r7, #8
 8005ec6:	2306      	movs	r3, #6
 8005ec8:	2122      	movs	r1, #34	@ 0x22
 8005eca:	20d4      	movs	r0, #212	@ 0xd4
 8005ecc:	f7ff f980 	bl	80051d0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	77fb      	strb	r3, [r7, #31]
 8005ed4:	e01a      	b.n	8005f0c <LSM6DSL_GyroReadXYZAngRate+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8005ed6:	7ffb      	ldrb	r3, [r7, #31]
 8005ed8:	005b      	lsls	r3, r3, #1
 8005eda:	3301      	adds	r3, #1
 8005edc:	3320      	adds	r3, #32
 8005ede:	443b      	add	r3, r7
 8005ee0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8005ee4:	021b      	lsls	r3, r3, #8
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	7ffa      	ldrb	r2, [r7, #31]
 8005eea:	0052      	lsls	r2, r2, #1
 8005eec:	3220      	adds	r2, #32
 8005eee:	443a      	add	r2, r7
 8005ef0:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	7ffb      	ldrb	r3, [r7, #31]
 8005efa:	b212      	sxth	r2, r2
 8005efc:	005b      	lsls	r3, r3, #1
 8005efe:	3320      	adds	r3, #32
 8005f00:	443b      	add	r3, r7
 8005f02:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8005f06:	7ffb      	ldrb	r3, [r7, #31]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	77fb      	strb	r3, [r7, #31]
 8005f0c:	7ffb      	ldrb	r3, [r7, #31]
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d9e1      	bls.n	8005ed6 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8005f12:	7dfb      	ldrb	r3, [r7, #23]
 8005f14:	f003 030c 	and.w	r3, r3, #12
 8005f18:	2b0c      	cmp	r3, #12
 8005f1a:	d829      	bhi.n	8005f70 <LSM6DSL_GyroReadXYZAngRate+0xd0>
 8005f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f24 <LSM6DSL_GyroReadXYZAngRate+0x84>)
 8005f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f22:	bf00      	nop
 8005f24:	08005f59 	.word	0x08005f59
 8005f28:	08005f71 	.word	0x08005f71
 8005f2c:	08005f71 	.word	0x08005f71
 8005f30:	08005f71 	.word	0x08005f71
 8005f34:	08005f5f 	.word	0x08005f5f
 8005f38:	08005f71 	.word	0x08005f71
 8005f3c:	08005f71 	.word	0x08005f71
 8005f40:	08005f71 	.word	0x08005f71
 8005f44:	08005f65 	.word	0x08005f65
 8005f48:	08005f71 	.word	0x08005f71
 8005f4c:	08005f71 	.word	0x08005f71
 8005f50:	08005f71 	.word	0x08005f71
 8005f54:	08005f6b 	.word	0x08005f6b
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8005f58:	4b16      	ldr	r3, [pc, #88]	@ (8005fb4 <LSM6DSL_GyroReadXYZAngRate+0x114>)
 8005f5a:	61bb      	str	r3, [r7, #24]
    break;
 8005f5c:	e008      	b.n	8005f70 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8005f5e:	4b16      	ldr	r3, [pc, #88]	@ (8005fb8 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 8005f60:	61bb      	str	r3, [r7, #24]
    break;
 8005f62:	e005      	b.n	8005f70 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8005f64:	4b15      	ldr	r3, [pc, #84]	@ (8005fbc <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8005f66:	61bb      	str	r3, [r7, #24]
    break;
 8005f68:	e002      	b.n	8005f70 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8005f6a:	4b15      	ldr	r3, [pc, #84]	@ (8005fc0 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8005f6c:	61bb      	str	r3, [r7, #24]
    break;    
 8005f6e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8005f70:	2300      	movs	r3, #0
 8005f72:	77fb      	strb	r3, [r7, #31]
 8005f74:	e016      	b.n	8005fa4 <LSM6DSL_GyroReadXYZAngRate+0x104>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8005f76:	7ffb      	ldrb	r3, [r7, #31]
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	3320      	adds	r3, #32
 8005f7c:	443b      	add	r3, r7
 8005f7e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f8a:	7ffb      	ldrb	r3, [r7, #31]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	4413      	add	r3, r2
 8005f92:	edd7 7a06 	vldr	s15, [r7, #24]
 8005f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f9a:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8005f9e:	7ffb      	ldrb	r3, [r7, #31]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	77fb      	strb	r3, [r7, #31]
 8005fa4:	7ffb      	ldrb	r3, [r7, #31]
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d9e5      	bls.n	8005f76 <LSM6DSL_GyroReadXYZAngRate+0xd6>
  }
}
 8005faa:	bf00      	nop
 8005fac:	bf00      	nop
 8005fae:	3720      	adds	r7, #32
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	3bfa0000 	.word	0x3bfa0000
 8005fb8:	3c7a0000 	.word	0x3c7a0000
 8005fbc:	3cfa0000 	.word	0x3cfa0000
 8005fc0:	3d7a0000 	.word	0x3d7a0000

08005fc4 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8005fc4:	b480      	push	{r7}
 8005fc6:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8005fc8:	bf00      	nop
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
	...

08005fd4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af04      	add	r7, sp, #16
 8005fda:	4603      	mov	r3, r0
 8005fdc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005fde:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe2:	9302      	str	r3, [sp, #8]
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	9301      	str	r3, [sp, #4]
 8005fe8:	1dfb      	adds	r3, r7, #7
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	2301      	movs	r3, #1
 8005fee:	2200      	movs	r2, #0
 8005ff0:	2178      	movs	r1, #120	@ 0x78
 8005ff2:	4803      	ldr	r0, [pc, #12]	@ (8006000 <ssd1306_WriteCommand+0x2c>)
 8005ff4:	f001 f888 	bl	8007108 <HAL_I2C_Mem_Write>
//	HAL_I2C_Master_Transmit_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, &byte, 1);
}
 8005ff8:	bf00      	nop
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	20000480 	.word	0x20000480

08006004 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af04      	add	r7, sp, #16
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	b29b      	uxth	r3, r3
 8006012:	f04f 32ff 	mov.w	r2, #4294967295
 8006016:	9202      	str	r2, [sp, #8]
 8006018:	9301      	str	r3, [sp, #4]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	2301      	movs	r3, #1
 8006020:	2240      	movs	r2, #64	@ 0x40
 8006022:	2178      	movs	r1, #120	@ 0x78
 8006024:	4803      	ldr	r0, [pc, #12]	@ (8006034 <ssd1306_WriteData+0x30>)
 8006026:	f001 f86f 	bl	8007108 <HAL_I2C_Mem_Write>
//    HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size);
//    HAL_I2C_Master_Transmit_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, buffer, buff_size);
}
 800602a:	bf00      	nop
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	20000480 	.word	0x20000480

08006038 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8006038:	b580      	push	{r7, lr}
 800603a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800603c:	f7ff ffc2 	bl	8005fc4 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8006040:	2064      	movs	r0, #100	@ 0x64
 8006042:	f000 fb2f 	bl	80066a4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8006046:	2000      	movs	r0, #0
 8006048:	f000 fa9e 	bl	8006588 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800604c:	2020      	movs	r0, #32
 800604e:	f7ff ffc1 	bl	8005fd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8006052:	2000      	movs	r0, #0
 8006054:	f7ff ffbe 	bl	8005fd4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8006058:	20b0      	movs	r0, #176	@ 0xb0
 800605a:	f7ff ffbb 	bl	8005fd4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800605e:	20c8      	movs	r0, #200	@ 0xc8
 8006060:	f7ff ffb8 	bl	8005fd4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8006064:	2000      	movs	r0, #0
 8006066:	f7ff ffb5 	bl	8005fd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800606a:	2010      	movs	r0, #16
 800606c:	f7ff ffb2 	bl	8005fd4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8006070:	2040      	movs	r0, #64	@ 0x40
 8006072:	f7ff ffaf 	bl	8005fd4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8006076:	20ff      	movs	r0, #255	@ 0xff
 8006078:	f000 fa73 	bl	8006562 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800607c:	20a1      	movs	r0, #161	@ 0xa1
 800607e:	f7ff ffa9 	bl	8005fd4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8006082:	20a6      	movs	r0, #166	@ 0xa6
 8006084:	f7ff ffa6 	bl	8005fd4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8006088:	20a8      	movs	r0, #168	@ 0xa8
 800608a:	f7ff ffa3 	bl	8005fd4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800608e:	203f      	movs	r0, #63	@ 0x3f
 8006090:	f7ff ffa0 	bl	8005fd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8006094:	20a4      	movs	r0, #164	@ 0xa4
 8006096:	f7ff ff9d 	bl	8005fd4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800609a:	20d3      	movs	r0, #211	@ 0xd3
 800609c:	f7ff ff9a 	bl	8005fd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80060a0:	2000      	movs	r0, #0
 80060a2:	f7ff ff97 	bl	8005fd4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80060a6:	20d5      	movs	r0, #213	@ 0xd5
 80060a8:	f7ff ff94 	bl	8005fd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80060ac:	20f0      	movs	r0, #240	@ 0xf0
 80060ae:	f7ff ff91 	bl	8005fd4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80060b2:	20d9      	movs	r0, #217	@ 0xd9
 80060b4:	f7ff ff8e 	bl	8005fd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80060b8:	2022      	movs	r0, #34	@ 0x22
 80060ba:	f7ff ff8b 	bl	8005fd4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80060be:	20da      	movs	r0, #218	@ 0xda
 80060c0:	f7ff ff88 	bl	8005fd4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80060c4:	2012      	movs	r0, #18
 80060c6:	f7ff ff85 	bl	8005fd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80060ca:	20db      	movs	r0, #219	@ 0xdb
 80060cc:	f7ff ff82 	bl	8005fd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80060d0:	2020      	movs	r0, #32
 80060d2:	f7ff ff7f 	bl	8005fd4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80060d6:	208d      	movs	r0, #141	@ 0x8d
 80060d8:	f7ff ff7c 	bl	8005fd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80060dc:	2014      	movs	r0, #20
 80060de:	f7ff ff79 	bl	8005fd4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80060e2:	2001      	movs	r0, #1
 80060e4:	f000 fa50 	bl	8006588 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80060e8:	2000      	movs	r0, #0
 80060ea:	f000 f80f 	bl	800610c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80060ee:	f000 f825 	bl	800613c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80060f2:	4b05      	ldr	r3, [pc, #20]	@ (8006108 <ssd1306_Init+0xd0>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80060f8:	4b03      	ldr	r3, [pc, #12]	@ (8006108 <ssd1306_Init+0xd0>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80060fe:	4b02      	ldr	r3, [pc, #8]	@ (8006108 <ssd1306_Init+0xd0>)
 8006100:	2201      	movs	r2, #1
 8006102:	711a      	strb	r2, [r3, #4]
}
 8006104:	bf00      	nop
 8006106:	bd80      	pop	{r7, pc}
 8006108:	2000124c 	.word	0x2000124c

0800610c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	4603      	mov	r3, r0
 8006114:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8006116:	79fb      	ldrb	r3, [r7, #7]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d101      	bne.n	8006120 <ssd1306_Fill+0x14>
 800611c:	2300      	movs	r3, #0
 800611e:	e000      	b.n	8006122 <ssd1306_Fill+0x16>
 8006120:	23ff      	movs	r3, #255	@ 0xff
 8006122:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006126:	4619      	mov	r1, r3
 8006128:	4803      	ldr	r0, [pc, #12]	@ (8006138 <ssd1306_Fill+0x2c>)
 800612a:	f006 fbc9 	bl	800c8c0 <memset>
}
 800612e:	bf00      	nop
 8006130:	3708      	adds	r7, #8
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	20000e4c 	.word	0x20000e4c

0800613c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8006142:	2300      	movs	r3, #0
 8006144:	71fb      	strb	r3, [r7, #7]
 8006146:	e016      	b.n	8006176 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8006148:	79fb      	ldrb	r3, [r7, #7]
 800614a:	3b50      	subs	r3, #80	@ 0x50
 800614c:	b2db      	uxtb	r3, r3
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff ff40 	bl	8005fd4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8006154:	2000      	movs	r0, #0
 8006156:	f7ff ff3d 	bl	8005fd4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800615a:	2010      	movs	r0, #16
 800615c:	f7ff ff3a 	bl	8005fd4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8006160:	79fb      	ldrb	r3, [r7, #7]
 8006162:	01db      	lsls	r3, r3, #7
 8006164:	4a08      	ldr	r2, [pc, #32]	@ (8006188 <ssd1306_UpdateScreen+0x4c>)
 8006166:	4413      	add	r3, r2
 8006168:	2180      	movs	r1, #128	@ 0x80
 800616a:	4618      	mov	r0, r3
 800616c:	f7ff ff4a 	bl	8006004 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8006170:	79fb      	ldrb	r3, [r7, #7]
 8006172:	3301      	adds	r3, #1
 8006174:	71fb      	strb	r3, [r7, #7]
 8006176:	79fb      	ldrb	r3, [r7, #7]
 8006178:	2b07      	cmp	r3, #7
 800617a:	d9e5      	bls.n	8006148 <ssd1306_UpdateScreen+0xc>
    }
}
 800617c:	bf00      	nop
 800617e:	bf00      	nop
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	20000e4c 	.word	0x20000e4c

0800618c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	4603      	mov	r3, r0
 8006194:	71fb      	strb	r3, [r7, #7]
 8006196:	460b      	mov	r3, r1
 8006198:	71bb      	strb	r3, [r7, #6]
 800619a:	4613      	mov	r3, r2
 800619c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800619e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	db3d      	blt.n	8006222 <ssd1306_DrawPixel+0x96>
 80061a6:	79bb      	ldrb	r3, [r7, #6]
 80061a8:	2b3f      	cmp	r3, #63	@ 0x3f
 80061aa:	d83a      	bhi.n	8006222 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80061ac:	797b      	ldrb	r3, [r7, #5]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d11a      	bne.n	80061e8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80061b2:	79fa      	ldrb	r2, [r7, #7]
 80061b4:	79bb      	ldrb	r3, [r7, #6]
 80061b6:	08db      	lsrs	r3, r3, #3
 80061b8:	b2d8      	uxtb	r0, r3
 80061ba:	4603      	mov	r3, r0
 80061bc:	01db      	lsls	r3, r3, #7
 80061be:	4413      	add	r3, r2
 80061c0:	4a1b      	ldr	r2, [pc, #108]	@ (8006230 <ssd1306_DrawPixel+0xa4>)
 80061c2:	5cd3      	ldrb	r3, [r2, r3]
 80061c4:	b25a      	sxtb	r2, r3
 80061c6:	79bb      	ldrb	r3, [r7, #6]
 80061c8:	f003 0307 	and.w	r3, r3, #7
 80061cc:	2101      	movs	r1, #1
 80061ce:	fa01 f303 	lsl.w	r3, r1, r3
 80061d2:	b25b      	sxtb	r3, r3
 80061d4:	4313      	orrs	r3, r2
 80061d6:	b259      	sxtb	r1, r3
 80061d8:	79fa      	ldrb	r2, [r7, #7]
 80061da:	4603      	mov	r3, r0
 80061dc:	01db      	lsls	r3, r3, #7
 80061de:	4413      	add	r3, r2
 80061e0:	b2c9      	uxtb	r1, r1
 80061e2:	4a13      	ldr	r2, [pc, #76]	@ (8006230 <ssd1306_DrawPixel+0xa4>)
 80061e4:	54d1      	strb	r1, [r2, r3]
 80061e6:	e01d      	b.n	8006224 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80061e8:	79fa      	ldrb	r2, [r7, #7]
 80061ea:	79bb      	ldrb	r3, [r7, #6]
 80061ec:	08db      	lsrs	r3, r3, #3
 80061ee:	b2d8      	uxtb	r0, r3
 80061f0:	4603      	mov	r3, r0
 80061f2:	01db      	lsls	r3, r3, #7
 80061f4:	4413      	add	r3, r2
 80061f6:	4a0e      	ldr	r2, [pc, #56]	@ (8006230 <ssd1306_DrawPixel+0xa4>)
 80061f8:	5cd3      	ldrb	r3, [r2, r3]
 80061fa:	b25a      	sxtb	r2, r3
 80061fc:	79bb      	ldrb	r3, [r7, #6]
 80061fe:	f003 0307 	and.w	r3, r3, #7
 8006202:	2101      	movs	r1, #1
 8006204:	fa01 f303 	lsl.w	r3, r1, r3
 8006208:	b25b      	sxtb	r3, r3
 800620a:	43db      	mvns	r3, r3
 800620c:	b25b      	sxtb	r3, r3
 800620e:	4013      	ands	r3, r2
 8006210:	b259      	sxtb	r1, r3
 8006212:	79fa      	ldrb	r2, [r7, #7]
 8006214:	4603      	mov	r3, r0
 8006216:	01db      	lsls	r3, r3, #7
 8006218:	4413      	add	r3, r2
 800621a:	b2c9      	uxtb	r1, r1
 800621c:	4a04      	ldr	r2, [pc, #16]	@ (8006230 <ssd1306_DrawPixel+0xa4>)
 800621e:	54d1      	strb	r1, [r2, r3]
 8006220:	e000      	b.n	8006224 <ssd1306_DrawPixel+0x98>
        return;
 8006222:	bf00      	nop
    }
}
 8006224:	370c      	adds	r7, #12
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	20000e4c 	.word	0x20000e4c

08006234 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8006234:	b590      	push	{r4, r7, lr}
 8006236:	b089      	sub	sp, #36	@ 0x24
 8006238:	af00      	add	r7, sp, #0
 800623a:	4604      	mov	r4, r0
 800623c:	4638      	mov	r0, r7
 800623e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8006242:	4623      	mov	r3, r4
 8006244:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8006246:	7bfb      	ldrb	r3, [r7, #15]
 8006248:	2b1f      	cmp	r3, #31
 800624a:	d902      	bls.n	8006252 <ssd1306_WriteChar+0x1e>
 800624c:	7bfb      	ldrb	r3, [r7, #15]
 800624e:	2b7e      	cmp	r3, #126	@ 0x7e
 8006250:	d901      	bls.n	8006256 <ssd1306_WriteChar+0x22>
        return 0;
 8006252:	2300      	movs	r3, #0
 8006254:	e079      	b.n	800634a <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d005      	beq.n	8006268 <ssd1306_WriteChar+0x34>
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	7bfb      	ldrb	r3, [r7, #15]
 8006260:	3b20      	subs	r3, #32
 8006262:	4413      	add	r3, r2
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	e000      	b.n	800626a <ssd1306_WriteChar+0x36>
 8006268:	783b      	ldrb	r3, [r7, #0]
 800626a:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 800626c:	4b39      	ldr	r3, [pc, #228]	@ (8006354 <ssd1306_WriteChar+0x120>)
 800626e:	881b      	ldrh	r3, [r3, #0]
 8006270:	461a      	mov	r2, r3
 8006272:	7dfb      	ldrb	r3, [r7, #23]
 8006274:	4413      	add	r3, r2
 8006276:	2b80      	cmp	r3, #128	@ 0x80
 8006278:	dc06      	bgt.n	8006288 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800627a:	4b36      	ldr	r3, [pc, #216]	@ (8006354 <ssd1306_WriteChar+0x120>)
 800627c:	885b      	ldrh	r3, [r3, #2]
 800627e:	461a      	mov	r2, r3
 8006280:	787b      	ldrb	r3, [r7, #1]
 8006282:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8006284:	2b40      	cmp	r3, #64	@ 0x40
 8006286:	dd01      	ble.n	800628c <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8006288:	2300      	movs	r3, #0
 800628a:	e05e      	b.n	800634a <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800628c:	2300      	movs	r3, #0
 800628e:	61fb      	str	r3, [r7, #28]
 8006290:	e04d      	b.n	800632e <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	7bfb      	ldrb	r3, [r7, #15]
 8006296:	3b20      	subs	r3, #32
 8006298:	7879      	ldrb	r1, [r7, #1]
 800629a:	fb01 f303 	mul.w	r3, r1, r3
 800629e:	4619      	mov	r1, r3
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	440b      	add	r3, r1
 80062a4:	005b      	lsls	r3, r3, #1
 80062a6:	4413      	add	r3, r2
 80062a8:	881b      	ldrh	r3, [r3, #0]
 80062aa:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 80062ac:	2300      	movs	r3, #0
 80062ae:	61bb      	str	r3, [r7, #24]
 80062b0:	e036      	b.n	8006320 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d013      	beq.n	80062ea <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80062c2:	4b24      	ldr	r3, [pc, #144]	@ (8006354 <ssd1306_WriteChar+0x120>)
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	b2da      	uxtb	r2, r3
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	4413      	add	r3, r2
 80062ce:	b2d8      	uxtb	r0, r3
 80062d0:	4b20      	ldr	r3, [pc, #128]	@ (8006354 <ssd1306_WriteChar+0x120>)
 80062d2:	885b      	ldrh	r3, [r3, #2]
 80062d4:	b2da      	uxtb	r2, r3
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	4413      	add	r3, r2
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80062e2:	4619      	mov	r1, r3
 80062e4:	f7ff ff52 	bl	800618c <ssd1306_DrawPixel>
 80062e8:	e017      	b.n	800631a <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80062ea:	4b1a      	ldr	r3, [pc, #104]	@ (8006354 <ssd1306_WriteChar+0x120>)
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	4413      	add	r3, r2
 80062f6:	b2d8      	uxtb	r0, r3
 80062f8:	4b16      	ldr	r3, [pc, #88]	@ (8006354 <ssd1306_WriteChar+0x120>)
 80062fa:	885b      	ldrh	r3, [r3, #2]
 80062fc:	b2da      	uxtb	r2, r3
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	b2db      	uxtb	r3, r3
 8006302:	4413      	add	r3, r2
 8006304:	b2d9      	uxtb	r1, r3
 8006306:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800630a:	2b00      	cmp	r3, #0
 800630c:	bf0c      	ite	eq
 800630e:	2301      	moveq	r3, #1
 8006310:	2300      	movne	r3, #0
 8006312:	b2db      	uxtb	r3, r3
 8006314:	461a      	mov	r2, r3
 8006316:	f7ff ff39 	bl	800618c <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	3301      	adds	r3, #1
 800631e:	61bb      	str	r3, [r7, #24]
 8006320:	7dfb      	ldrb	r3, [r7, #23]
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	429a      	cmp	r2, r3
 8006326:	d3c4      	bcc.n	80062b2 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	3301      	adds	r3, #1
 800632c:	61fb      	str	r3, [r7, #28]
 800632e:	787b      	ldrb	r3, [r7, #1]
 8006330:	461a      	mov	r2, r3
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	4293      	cmp	r3, r2
 8006336:	d3ac      	bcc.n	8006292 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8006338:	4b06      	ldr	r3, [pc, #24]	@ (8006354 <ssd1306_WriteChar+0x120>)
 800633a:	881a      	ldrh	r2, [r3, #0]
 800633c:	7dfb      	ldrb	r3, [r7, #23]
 800633e:	b29b      	uxth	r3, r3
 8006340:	4413      	add	r3, r2
 8006342:	b29a      	uxth	r2, r3
 8006344:	4b03      	ldr	r3, [pc, #12]	@ (8006354 <ssd1306_WriteChar+0x120>)
 8006346:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8006348:	7bfb      	ldrb	r3, [r7, #15]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3724      	adds	r7, #36	@ 0x24
 800634e:	46bd      	mov	sp, r7
 8006350:	bd90      	pop	{r4, r7, pc}
 8006352:	bf00      	nop
 8006354:	2000124c 	.word	0x2000124c

08006358 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af02      	add	r7, sp, #8
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	4638      	mov	r0, r7
 8006362:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8006366:	e013      	b.n	8006390 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	7818      	ldrb	r0, [r3, #0]
 800636c:	7e3b      	ldrb	r3, [r7, #24]
 800636e:	9300      	str	r3, [sp, #0]
 8006370:	463b      	mov	r3, r7
 8006372:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006374:	f7ff ff5e 	bl	8006234 <ssd1306_WriteChar>
 8006378:	4603      	mov	r3, r0
 800637a:	461a      	mov	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	429a      	cmp	r2, r3
 8006382:	d002      	beq.n	800638a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	e008      	b.n	800639c <ssd1306_WriteString+0x44>
        }
        str++;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	3301      	adds	r3, #1
 800638e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1e7      	bne.n	8006368 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	781b      	ldrb	r3, [r3, #0]
}
 800639c:	4618      	mov	r0, r3
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	4603      	mov	r3, r0
 80063ac:	460a      	mov	r2, r1
 80063ae:	71fb      	strb	r3, [r7, #7]
 80063b0:	4613      	mov	r3, r2
 80063b2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80063b4:	79fb      	ldrb	r3, [r7, #7]
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	4b05      	ldr	r3, [pc, #20]	@ (80063d0 <ssd1306_SetCursor+0x2c>)
 80063ba:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80063bc:	79bb      	ldrb	r3, [r7, #6]
 80063be:	b29a      	uxth	r2, r3
 80063c0:	4b03      	ldr	r3, [pc, #12]	@ (80063d0 <ssd1306_SetCursor+0x2c>)
 80063c2:	805a      	strh	r2, [r3, #2]
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	2000124c 	.word	0x2000124c

080063d4 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80063d4:	b590      	push	{r4, r7, lr}
 80063d6:	b089      	sub	sp, #36	@ 0x24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	4604      	mov	r4, r0
 80063dc:	4608      	mov	r0, r1
 80063de:	4611      	mov	r1, r2
 80063e0:	461a      	mov	r2, r3
 80063e2:	4623      	mov	r3, r4
 80063e4:	71fb      	strb	r3, [r7, #7]
 80063e6:	4603      	mov	r3, r0
 80063e8:	71bb      	strb	r3, [r7, #6]
 80063ea:	460b      	mov	r3, r1
 80063ec:	717b      	strb	r3, [r7, #5]
 80063ee:	4613      	mov	r3, r2
 80063f0:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80063f2:	797a      	ldrb	r2, [r7, #5]
 80063f4:	79fb      	ldrb	r3, [r7, #7]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	bfb8      	it	lt
 80063fc:	425b      	neglt	r3, r3
 80063fe:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8006400:	793a      	ldrb	r2, [r7, #4]
 8006402:	79bb      	ldrb	r3, [r7, #6]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	bfb8      	it	lt
 800640a:	425b      	neglt	r3, r3
 800640c:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 800640e:	79fa      	ldrb	r2, [r7, #7]
 8006410:	797b      	ldrb	r3, [r7, #5]
 8006412:	429a      	cmp	r2, r3
 8006414:	d201      	bcs.n	800641a <ssd1306_Line+0x46>
 8006416:	2301      	movs	r3, #1
 8006418:	e001      	b.n	800641e <ssd1306_Line+0x4a>
 800641a:	f04f 33ff 	mov.w	r3, #4294967295
 800641e:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8006420:	79ba      	ldrb	r2, [r7, #6]
 8006422:	793b      	ldrb	r3, [r7, #4]
 8006424:	429a      	cmp	r2, r3
 8006426:	d201      	bcs.n	800642c <ssd1306_Line+0x58>
 8006428:	2301      	movs	r3, #1
 800642a:	e001      	b.n	8006430 <ssd1306_Line+0x5c>
 800642c:	f04f 33ff 	mov.w	r3, #4294967295
 8006430:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8006432:	69ba      	ldr	r2, [r7, #24]
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 800643a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800643e:	7939      	ldrb	r1, [r7, #4]
 8006440:	797b      	ldrb	r3, [r7, #5]
 8006442:	4618      	mov	r0, r3
 8006444:	f7ff fea2 	bl	800618c <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8006448:	e024      	b.n	8006494 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 800644a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800644e:	79b9      	ldrb	r1, [r7, #6]
 8006450:	79fb      	ldrb	r3, [r7, #7]
 8006452:	4618      	mov	r0, r3
 8006454:	f7ff fe9a 	bl	800618c <ssd1306_DrawPixel>
        error2 = error * 2;
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	005b      	lsls	r3, r3, #1
 800645c:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	425b      	negs	r3, r3
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	429a      	cmp	r2, r3
 8006466:	dd08      	ble.n	800647a <ssd1306_Line+0xa6>
            error -= deltaY;
 8006468:	69fa      	ldr	r2, [r7, #28]
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	b2da      	uxtb	r2, r3
 8006474:	79fb      	ldrb	r3, [r7, #7]
 8006476:	4413      	add	r3, r2
 8006478:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 800647a:	68ba      	ldr	r2, [r7, #8]
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	429a      	cmp	r2, r3
 8006480:	da08      	bge.n	8006494 <ssd1306_Line+0xc0>
            error += deltaX;
 8006482:	69fa      	ldr	r2, [r7, #28]
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	4413      	add	r3, r2
 8006488:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	b2da      	uxtb	r2, r3
 800648e:	79bb      	ldrb	r3, [r7, #6]
 8006490:	4413      	add	r3, r2
 8006492:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8006494:	79fa      	ldrb	r2, [r7, #7]
 8006496:	797b      	ldrb	r3, [r7, #5]
 8006498:	429a      	cmp	r2, r3
 800649a:	d1d6      	bne.n	800644a <ssd1306_Line+0x76>
 800649c:	79ba      	ldrb	r2, [r7, #6]
 800649e:	793b      	ldrb	r3, [r7, #4]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d1d2      	bne.n	800644a <ssd1306_Line+0x76>
        }
    }
    return;
 80064a4:	bf00      	nop
}
 80064a6:	3724      	adds	r7, #36	@ 0x24
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd90      	pop	{r4, r7, pc}

080064ac <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	603a      	str	r2, [r7, #0]
 80064b4:	461a      	mov	r2, r3
 80064b6:	4603      	mov	r3, r0
 80064b8:	71fb      	strb	r3, [r7, #7]
 80064ba:	460b      	mov	r3, r1
 80064bc:	71bb      	strb	r3, [r7, #6]
 80064be:	4613      	mov	r3, r2
 80064c0:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80064c2:	797b      	ldrb	r3, [r7, #5]
 80064c4:	3307      	adds	r3, #7
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	da00      	bge.n	80064cc <ssd1306_DrawBitmap+0x20>
 80064ca:	3307      	adds	r3, #7
 80064cc:	10db      	asrs	r3, r3, #3
 80064ce:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80064d0:	2300      	movs	r3, #0
 80064d2:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80064d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	db3e      	blt.n	800655a <ssd1306_DrawBitmap+0xae>
 80064dc:	79bb      	ldrb	r3, [r7, #6]
 80064de:	2b3f      	cmp	r3, #63	@ 0x3f
 80064e0:	d83b      	bhi.n	800655a <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80064e2:	2300      	movs	r3, #0
 80064e4:	73bb      	strb	r3, [r7, #14]
 80064e6:	e033      	b.n	8006550 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80064e8:	2300      	movs	r3, #0
 80064ea:	737b      	strb	r3, [r7, #13]
 80064ec:	e026      	b.n	800653c <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80064ee:	7b7b      	ldrb	r3, [r7, #13]
 80064f0:	f003 0307 	and.w	r3, r3, #7
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
 80064fa:	005b      	lsls	r3, r3, #1
 80064fc:	73fb      	strb	r3, [r7, #15]
 80064fe:	e00d      	b.n	800651c <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8006500:	7bbb      	ldrb	r3, [r7, #14]
 8006502:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006506:	fb02 f303 	mul.w	r3, r2, r3
 800650a:	7b7a      	ldrb	r2, [r7, #13]
 800650c:	08d2      	lsrs	r2, r2, #3
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	4413      	add	r3, r2
 8006512:	461a      	mov	r2, r3
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	4413      	add	r3, r2
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 800651c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006520:	2b00      	cmp	r3, #0
 8006522:	da08      	bge.n	8006536 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8006524:	79fa      	ldrb	r2, [r7, #7]
 8006526:	7b7b      	ldrb	r3, [r7, #13]
 8006528:	4413      	add	r3, r2
 800652a:	b2db      	uxtb	r3, r3
 800652c:	7f3a      	ldrb	r2, [r7, #28]
 800652e:	79b9      	ldrb	r1, [r7, #6]
 8006530:	4618      	mov	r0, r3
 8006532:	f7ff fe2b 	bl	800618c <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8006536:	7b7b      	ldrb	r3, [r7, #13]
 8006538:	3301      	adds	r3, #1
 800653a:	737b      	strb	r3, [r7, #13]
 800653c:	7b7a      	ldrb	r2, [r7, #13]
 800653e:	797b      	ldrb	r3, [r7, #5]
 8006540:	429a      	cmp	r2, r3
 8006542:	d3d4      	bcc.n	80064ee <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8006544:	7bbb      	ldrb	r3, [r7, #14]
 8006546:	3301      	adds	r3, #1
 8006548:	73bb      	strb	r3, [r7, #14]
 800654a:	79bb      	ldrb	r3, [r7, #6]
 800654c:	3301      	adds	r3, #1
 800654e:	71bb      	strb	r3, [r7, #6]
 8006550:	7bba      	ldrb	r2, [r7, #14]
 8006552:	7e3b      	ldrb	r3, [r7, #24]
 8006554:	429a      	cmp	r2, r3
 8006556:	d3c7      	bcc.n	80064e8 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8006558:	e000      	b.n	800655c <ssd1306_DrawBitmap+0xb0>
        return;
 800655a:	bf00      	nop
}
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8006562:	b580      	push	{r7, lr}
 8006564:	b084      	sub	sp, #16
 8006566:	af00      	add	r7, sp, #0
 8006568:	4603      	mov	r3, r0
 800656a:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800656c:	2381      	movs	r3, #129	@ 0x81
 800656e:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8006570:	7bfb      	ldrb	r3, [r7, #15]
 8006572:	4618      	mov	r0, r3
 8006574:	f7ff fd2e 	bl	8005fd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8006578:	79fb      	ldrb	r3, [r7, #7]
 800657a:	4618      	mov	r0, r3
 800657c:	f7ff fd2a 	bl	8005fd4 <ssd1306_WriteCommand>
}
 8006580:	bf00      	nop
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	4603      	mov	r3, r0
 8006590:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8006592:	79fb      	ldrb	r3, [r7, #7]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d005      	beq.n	80065a4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8006598:	23af      	movs	r3, #175	@ 0xaf
 800659a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800659c:	4b08      	ldr	r3, [pc, #32]	@ (80065c0 <ssd1306_SetDisplayOn+0x38>)
 800659e:	2201      	movs	r2, #1
 80065a0:	715a      	strb	r2, [r3, #5]
 80065a2:	e004      	b.n	80065ae <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80065a4:	23ae      	movs	r3, #174	@ 0xae
 80065a6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80065a8:	4b05      	ldr	r3, [pc, #20]	@ (80065c0 <ssd1306_SetDisplayOn+0x38>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7ff fd0f 	bl	8005fd4 <ssd1306_WriteCommand>
}
 80065b6:	bf00      	nop
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	2000124c 	.word	0x2000124c

080065c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80065ca:	2300      	movs	r3, #0
 80065cc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80065ce:	2003      	movs	r0, #3
 80065d0:	f000 f95a 	bl	8006888 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80065d4:	2000      	movs	r0, #0
 80065d6:	f000 f80d 	bl	80065f4 <HAL_InitTick>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d002      	beq.n	80065e6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	71fb      	strb	r3, [r7, #7]
 80065e4:	e001      	b.n	80065ea <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80065e6:	f7fe f901 	bl	80047ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80065ea:	79fb      	ldrb	r3, [r7, #7]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80065fc:	2300      	movs	r3, #0
 80065fe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8006600:	4b16      	ldr	r3, [pc, #88]	@ (800665c <HAL_InitTick+0x68>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d022      	beq.n	800664e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8006608:	4b15      	ldr	r3, [pc, #84]	@ (8006660 <HAL_InitTick+0x6c>)
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	4b13      	ldr	r3, [pc, #76]	@ (800665c <HAL_InitTick+0x68>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8006614:	fbb1 f3f3 	udiv	r3, r1, r3
 8006618:	fbb2 f3f3 	udiv	r3, r2, r3
 800661c:	4618      	mov	r0, r3
 800661e:	f000 f968 	bl	80068f2 <HAL_SYSTICK_Config>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10f      	bne.n	8006648 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b0f      	cmp	r3, #15
 800662c:	d809      	bhi.n	8006642 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800662e:	2200      	movs	r2, #0
 8006630:	6879      	ldr	r1, [r7, #4]
 8006632:	f04f 30ff 	mov.w	r0, #4294967295
 8006636:	f000 f932 	bl	800689e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800663a:	4a0a      	ldr	r2, [pc, #40]	@ (8006664 <HAL_InitTick+0x70>)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6013      	str	r3, [r2, #0]
 8006640:	e007      	b.n	8006652 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	73fb      	strb	r3, [r7, #15]
 8006646:	e004      	b.n	8006652 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	73fb      	strb	r3, [r7, #15]
 800664c:	e001      	b.n	8006652 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006652:	7bfb      	ldrb	r3, [r7, #15]
}
 8006654:	4618      	mov	r0, r3
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	20000158 	.word	0x20000158
 8006660:	20000088 	.word	0x20000088
 8006664:	20000154 	.word	0x20000154

08006668 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006668:	b480      	push	{r7}
 800666a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800666c:	4b05      	ldr	r3, [pc, #20]	@ (8006684 <HAL_IncTick+0x1c>)
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	4b05      	ldr	r3, [pc, #20]	@ (8006688 <HAL_IncTick+0x20>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4413      	add	r3, r2
 8006676:	4a03      	ldr	r2, [pc, #12]	@ (8006684 <HAL_IncTick+0x1c>)
 8006678:	6013      	str	r3, [r2, #0]
}
 800667a:	bf00      	nop
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr
 8006684:	20001254 	.word	0x20001254
 8006688:	20000158 	.word	0x20000158

0800668c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800668c:	b480      	push	{r7}
 800668e:	af00      	add	r7, sp, #0
  return uwTick;
 8006690:	4b03      	ldr	r3, [pc, #12]	@ (80066a0 <HAL_GetTick+0x14>)
 8006692:	681b      	ldr	r3, [r3, #0]
}
 8006694:	4618      	mov	r0, r3
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	20001254 	.word	0x20001254

080066a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80066ac:	f7ff ffee 	bl	800668c <HAL_GetTick>
 80066b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066bc:	d004      	beq.n	80066c8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80066be:	4b09      	ldr	r3, [pc, #36]	@ (80066e4 <HAL_Delay+0x40>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	4413      	add	r3, r2
 80066c6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80066c8:	bf00      	nop
 80066ca:	f7ff ffdf 	bl	800668c <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d8f7      	bhi.n	80066ca <HAL_Delay+0x26>
  {
  }
}
 80066da:	bf00      	nop
 80066dc:	bf00      	nop
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	20000158 	.word	0x20000158

080066e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f003 0307 	and.w	r3, r3, #7
 80066f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80066f8:	4b0c      	ldr	r3, [pc, #48]	@ (800672c <__NVIC_SetPriorityGrouping+0x44>)
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006704:	4013      	ands	r3, r2
 8006706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006710:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006714:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800671a:	4a04      	ldr	r2, [pc, #16]	@ (800672c <__NVIC_SetPriorityGrouping+0x44>)
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	60d3      	str	r3, [r2, #12]
}
 8006720:	bf00      	nop
 8006722:	3714      	adds	r7, #20
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr
 800672c:	e000ed00 	.word	0xe000ed00

08006730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006730:	b480      	push	{r7}
 8006732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006734:	4b04      	ldr	r3, [pc, #16]	@ (8006748 <__NVIC_GetPriorityGrouping+0x18>)
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	0a1b      	lsrs	r3, r3, #8
 800673a:	f003 0307 	and.w	r3, r3, #7
}
 800673e:	4618      	mov	r0, r3
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr
 8006748:	e000ed00 	.word	0xe000ed00

0800674c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	4603      	mov	r3, r0
 8006754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800675a:	2b00      	cmp	r3, #0
 800675c:	db0b      	blt.n	8006776 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800675e:	79fb      	ldrb	r3, [r7, #7]
 8006760:	f003 021f 	and.w	r2, r3, #31
 8006764:	4907      	ldr	r1, [pc, #28]	@ (8006784 <__NVIC_EnableIRQ+0x38>)
 8006766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800676a:	095b      	lsrs	r3, r3, #5
 800676c:	2001      	movs	r0, #1
 800676e:	fa00 f202 	lsl.w	r2, r0, r2
 8006772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006776:	bf00      	nop
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	e000e100 	.word	0xe000e100

08006788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	4603      	mov	r3, r0
 8006790:	6039      	str	r1, [r7, #0]
 8006792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006798:	2b00      	cmp	r3, #0
 800679a:	db0a      	blt.n	80067b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	490c      	ldr	r1, [pc, #48]	@ (80067d4 <__NVIC_SetPriority+0x4c>)
 80067a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067a6:	0112      	lsls	r2, r2, #4
 80067a8:	b2d2      	uxtb	r2, r2
 80067aa:	440b      	add	r3, r1
 80067ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80067b0:	e00a      	b.n	80067c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	4908      	ldr	r1, [pc, #32]	@ (80067d8 <__NVIC_SetPriority+0x50>)
 80067b8:	79fb      	ldrb	r3, [r7, #7]
 80067ba:	f003 030f 	and.w	r3, r3, #15
 80067be:	3b04      	subs	r3, #4
 80067c0:	0112      	lsls	r2, r2, #4
 80067c2:	b2d2      	uxtb	r2, r2
 80067c4:	440b      	add	r3, r1
 80067c6:	761a      	strb	r2, [r3, #24]
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr
 80067d4:	e000e100 	.word	0xe000e100
 80067d8:	e000ed00 	.word	0xe000ed00

080067dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067dc:	b480      	push	{r7}
 80067de:	b089      	sub	sp, #36	@ 0x24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f003 0307 	and.w	r3, r3, #7
 80067ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	f1c3 0307 	rsb	r3, r3, #7
 80067f6:	2b04      	cmp	r3, #4
 80067f8:	bf28      	it	cs
 80067fa:	2304      	movcs	r3, #4
 80067fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	3304      	adds	r3, #4
 8006802:	2b06      	cmp	r3, #6
 8006804:	d902      	bls.n	800680c <NVIC_EncodePriority+0x30>
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	3b03      	subs	r3, #3
 800680a:	e000      	b.n	800680e <NVIC_EncodePriority+0x32>
 800680c:	2300      	movs	r3, #0
 800680e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006810:	f04f 32ff 	mov.w	r2, #4294967295
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	fa02 f303 	lsl.w	r3, r2, r3
 800681a:	43da      	mvns	r2, r3
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	401a      	ands	r2, r3
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006824:	f04f 31ff 	mov.w	r1, #4294967295
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	fa01 f303 	lsl.w	r3, r1, r3
 800682e:	43d9      	mvns	r1, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006834:	4313      	orrs	r3, r2
         );
}
 8006836:	4618      	mov	r0, r3
 8006838:	3724      	adds	r7, #36	@ 0x24
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
	...

08006844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	3b01      	subs	r3, #1
 8006850:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006854:	d301      	bcc.n	800685a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006856:	2301      	movs	r3, #1
 8006858:	e00f      	b.n	800687a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800685a:	4a0a      	ldr	r2, [pc, #40]	@ (8006884 <SysTick_Config+0x40>)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	3b01      	subs	r3, #1
 8006860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006862:	210f      	movs	r1, #15
 8006864:	f04f 30ff 	mov.w	r0, #4294967295
 8006868:	f7ff ff8e 	bl	8006788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800686c:	4b05      	ldr	r3, [pc, #20]	@ (8006884 <SysTick_Config+0x40>)
 800686e:	2200      	movs	r2, #0
 8006870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006872:	4b04      	ldr	r3, [pc, #16]	@ (8006884 <SysTick_Config+0x40>)
 8006874:	2207      	movs	r2, #7
 8006876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	e000e010 	.word	0xe000e010

08006888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f7ff ff29 	bl	80066e8 <__NVIC_SetPriorityGrouping>
}
 8006896:	bf00      	nop
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b086      	sub	sp, #24
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	4603      	mov	r3, r0
 80068a6:	60b9      	str	r1, [r7, #8]
 80068a8:	607a      	str	r2, [r7, #4]
 80068aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80068ac:	2300      	movs	r3, #0
 80068ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80068b0:	f7ff ff3e 	bl	8006730 <__NVIC_GetPriorityGrouping>
 80068b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	68b9      	ldr	r1, [r7, #8]
 80068ba:	6978      	ldr	r0, [r7, #20]
 80068bc:	f7ff ff8e 	bl	80067dc <NVIC_EncodePriority>
 80068c0:	4602      	mov	r2, r0
 80068c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068c6:	4611      	mov	r1, r2
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7ff ff5d 	bl	8006788 <__NVIC_SetPriority>
}
 80068ce:	bf00      	nop
 80068d0:	3718      	adds	r7, #24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b082      	sub	sp, #8
 80068da:	af00      	add	r7, sp, #0
 80068dc:	4603      	mov	r3, r0
 80068de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80068e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7ff ff31 	bl	800674c <__NVIC_EnableIRQ>
}
 80068ea:	bf00      	nop
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b082      	sub	sp, #8
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7ff ffa2 	bl	8006844 <SysTick_Config>
 8006900:	4603      	mov	r3, r0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b084      	sub	sp, #16
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b02      	cmp	r3, #2
 8006920:	d005      	beq.n	800692e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2204      	movs	r2, #4
 8006926:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	73fb      	strb	r3, [r7, #15]
 800692c:	e029      	b.n	8006982 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 020e 	bic.w	r2, r2, #14
 800693c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f022 0201 	bic.w	r2, r2, #1
 800694c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006952:	f003 021c 	and.w	r2, r3, #28
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800695a:	2101      	movs	r1, #1
 800695c:	fa01 f202 	lsl.w	r2, r1, r2
 8006960:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	4798      	blx	r3
    }
  }
  return status;
 8006982:	7bfb      	ldrb	r3, [r7, #15]
}
 8006984:	4618      	mov	r0, r3
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800698c:	b480      	push	{r7}
 800698e:	b087      	sub	sp, #28
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006996:	2300      	movs	r3, #0
 8006998:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800699a:	e17f      	b.n	8006c9c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	2101      	movs	r1, #1
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	fa01 f303 	lsl.w	r3, r1, r3
 80069a8:	4013      	ands	r3, r2
 80069aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f000 8171 	beq.w	8006c96 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d00b      	beq.n	80069d4 <HAL_GPIO_Init+0x48>
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d007      	beq.n	80069d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80069c8:	2b11      	cmp	r3, #17
 80069ca:	d003      	beq.n	80069d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	2b12      	cmp	r3, #18
 80069d2:	d130      	bne.n	8006a36 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	005b      	lsls	r3, r3, #1
 80069de:	2203      	movs	r2, #3
 80069e0:	fa02 f303 	lsl.w	r3, r2, r3
 80069e4:	43db      	mvns	r3, r3
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	4013      	ands	r3, r2
 80069ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	68da      	ldr	r2, [r3, #12]
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	005b      	lsls	r3, r3, #1
 80069f4:	fa02 f303 	lsl.w	r3, r2, r3
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a12:	43db      	mvns	r3, r3
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	4013      	ands	r3, r2
 8006a18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	091b      	lsrs	r3, r3, #4
 8006a20:	f003 0201 	and.w	r2, r3, #1
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	f003 0303 	and.w	r3, r3, #3
 8006a3e:	2b03      	cmp	r3, #3
 8006a40:	d118      	bne.n	8006a74 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006a48:	2201      	movs	r2, #1
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a50:	43db      	mvns	r3, r3
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	4013      	ands	r3, r2
 8006a56:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	08db      	lsrs	r3, r3, #3
 8006a5e:	f003 0201 	and.w	r2, r3, #1
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	fa02 f303 	lsl.w	r3, r2, r3
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	005b      	lsls	r3, r3, #1
 8006a7e:	2203      	movs	r2, #3
 8006a80:	fa02 f303 	lsl.w	r3, r2, r3
 8006a84:	43db      	mvns	r3, r3
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	4013      	ands	r3, r2
 8006a8a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	689a      	ldr	r2, [r3, #8]
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	005b      	lsls	r3, r3, #1
 8006a94:	fa02 f303 	lsl.w	r3, r2, r3
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d003      	beq.n	8006ab4 <HAL_GPIO_Init+0x128>
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	2b12      	cmp	r3, #18
 8006ab2:	d123      	bne.n	8006afc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	08da      	lsrs	r2, r3, #3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	3208      	adds	r2, #8
 8006abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f003 0307 	and.w	r3, r3, #7
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	220f      	movs	r2, #15
 8006acc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad0:	43db      	mvns	r3, r3
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	691a      	ldr	r2, [r3, #16]
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	f003 0307 	and.w	r3, r3, #7
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	08da      	lsrs	r2, r3, #3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	3208      	adds	r2, #8
 8006af6:	6939      	ldr	r1, [r7, #16]
 8006af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	005b      	lsls	r3, r3, #1
 8006b06:	2203      	movs	r2, #3
 8006b08:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0c:	43db      	mvns	r3, r3
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	4013      	ands	r3, r2
 8006b12:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f003 0203 	and.w	r2, r3, #3
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	005b      	lsls	r3, r3, #1
 8006b20:	fa02 f303 	lsl.w	r3, r2, r3
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 80ac 	beq.w	8006c96 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b3e:	4b5f      	ldr	r3, [pc, #380]	@ (8006cbc <HAL_GPIO_Init+0x330>)
 8006b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b42:	4a5e      	ldr	r2, [pc, #376]	@ (8006cbc <HAL_GPIO_Init+0x330>)
 8006b44:	f043 0301 	orr.w	r3, r3, #1
 8006b48:	6613      	str	r3, [r2, #96]	@ 0x60
 8006b4a:	4b5c      	ldr	r3, [pc, #368]	@ (8006cbc <HAL_GPIO_Init+0x330>)
 8006b4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	60bb      	str	r3, [r7, #8]
 8006b54:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006b56:	4a5a      	ldr	r2, [pc, #360]	@ (8006cc0 <HAL_GPIO_Init+0x334>)
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	089b      	lsrs	r3, r3, #2
 8006b5c:	3302      	adds	r3, #2
 8006b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b62:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f003 0303 	and.w	r3, r3, #3
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	220f      	movs	r2, #15
 8006b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b72:	43db      	mvns	r3, r3
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	4013      	ands	r3, r2
 8006b78:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006b80:	d025      	beq.n	8006bce <HAL_GPIO_Init+0x242>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a4f      	ldr	r2, [pc, #316]	@ (8006cc4 <HAL_GPIO_Init+0x338>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d01f      	beq.n	8006bca <HAL_GPIO_Init+0x23e>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a4e      	ldr	r2, [pc, #312]	@ (8006cc8 <HAL_GPIO_Init+0x33c>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d019      	beq.n	8006bc6 <HAL_GPIO_Init+0x23a>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a4d      	ldr	r2, [pc, #308]	@ (8006ccc <HAL_GPIO_Init+0x340>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d013      	beq.n	8006bc2 <HAL_GPIO_Init+0x236>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a4c      	ldr	r2, [pc, #304]	@ (8006cd0 <HAL_GPIO_Init+0x344>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d00d      	beq.n	8006bbe <HAL_GPIO_Init+0x232>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a4b      	ldr	r2, [pc, #300]	@ (8006cd4 <HAL_GPIO_Init+0x348>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d007      	beq.n	8006bba <HAL_GPIO_Init+0x22e>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a4a      	ldr	r2, [pc, #296]	@ (8006cd8 <HAL_GPIO_Init+0x34c>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d101      	bne.n	8006bb6 <HAL_GPIO_Init+0x22a>
 8006bb2:	2306      	movs	r3, #6
 8006bb4:	e00c      	b.n	8006bd0 <HAL_GPIO_Init+0x244>
 8006bb6:	2307      	movs	r3, #7
 8006bb8:	e00a      	b.n	8006bd0 <HAL_GPIO_Init+0x244>
 8006bba:	2305      	movs	r3, #5
 8006bbc:	e008      	b.n	8006bd0 <HAL_GPIO_Init+0x244>
 8006bbe:	2304      	movs	r3, #4
 8006bc0:	e006      	b.n	8006bd0 <HAL_GPIO_Init+0x244>
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e004      	b.n	8006bd0 <HAL_GPIO_Init+0x244>
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	e002      	b.n	8006bd0 <HAL_GPIO_Init+0x244>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e000      	b.n	8006bd0 <HAL_GPIO_Init+0x244>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	f002 0203 	and.w	r2, r2, #3
 8006bd6:	0092      	lsls	r2, r2, #2
 8006bd8:	4093      	lsls	r3, r2
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006be0:	4937      	ldr	r1, [pc, #220]	@ (8006cc0 <HAL_GPIO_Init+0x334>)
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	089b      	lsrs	r3, r3, #2
 8006be6:	3302      	adds	r3, #2
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006bee:	4b3b      	ldr	r3, [pc, #236]	@ (8006cdc <HAL_GPIO_Init+0x350>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	43db      	mvns	r3, r3
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d003      	beq.n	8006c12 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006c12:	4a32      	ldr	r2, [pc, #200]	@ (8006cdc <HAL_GPIO_Init+0x350>)
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8006c18:	4b30      	ldr	r3, [pc, #192]	@ (8006cdc <HAL_GPIO_Init+0x350>)
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	43db      	mvns	r3, r3
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	4013      	ands	r3, r2
 8006c26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d003      	beq.n	8006c3c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006c3c:	4a27      	ldr	r2, [pc, #156]	@ (8006cdc <HAL_GPIO_Init+0x350>)
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006c42:	4b26      	ldr	r3, [pc, #152]	@ (8006cdc <HAL_GPIO_Init+0x350>)
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	43db      	mvns	r3, r3
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	4013      	ands	r3, r2
 8006c50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006c66:	4a1d      	ldr	r2, [pc, #116]	@ (8006cdc <HAL_GPIO_Init+0x350>)
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8006cdc <HAL_GPIO_Init+0x350>)
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	43db      	mvns	r3, r3
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	4013      	ands	r3, r2
 8006c7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d003      	beq.n	8006c90 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006c90:	4a12      	ldr	r2, [pc, #72]	@ (8006cdc <HAL_GPIO_Init+0x350>)
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	f47f ae78 	bne.w	800699c <HAL_GPIO_Init+0x10>
  }
}
 8006cac:	bf00      	nop
 8006cae:	bf00      	nop
 8006cb0:	371c      	adds	r7, #28
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	40021000 	.word	0x40021000
 8006cc0:	40010000 	.word	0x40010000
 8006cc4:	48000400 	.word	0x48000400
 8006cc8:	48000800 	.word	0x48000800
 8006ccc:	48000c00 	.word	0x48000c00
 8006cd0:	48001000 	.word	0x48001000
 8006cd4:	48001400 	.word	0x48001400
 8006cd8:	48001800 	.word	0x48001800
 8006cdc:	40010400 	.word	0x40010400

08006ce0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b087      	sub	sp, #28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006cea:	2300      	movs	r3, #0
 8006cec:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8006cee:	e0cd      	b.n	8006e8c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 80c0 	beq.w	8006e86 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006d06:	4a68      	ldr	r2, [pc, #416]	@ (8006ea8 <HAL_GPIO_DeInit+0x1c8>)
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	089b      	lsrs	r3, r3, #2
 8006d0c:	3302      	adds	r3, #2
 8006d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d12:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	f003 0303 	and.w	r3, r3, #3
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	220f      	movs	r2, #15
 8006d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	4013      	ands	r3, r2
 8006d26:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006d2e:	d025      	beq.n	8006d7c <HAL_GPIO_DeInit+0x9c>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a5e      	ldr	r2, [pc, #376]	@ (8006eac <HAL_GPIO_DeInit+0x1cc>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d01f      	beq.n	8006d78 <HAL_GPIO_DeInit+0x98>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a5d      	ldr	r2, [pc, #372]	@ (8006eb0 <HAL_GPIO_DeInit+0x1d0>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d019      	beq.n	8006d74 <HAL_GPIO_DeInit+0x94>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a5c      	ldr	r2, [pc, #368]	@ (8006eb4 <HAL_GPIO_DeInit+0x1d4>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d013      	beq.n	8006d70 <HAL_GPIO_DeInit+0x90>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a5b      	ldr	r2, [pc, #364]	@ (8006eb8 <HAL_GPIO_DeInit+0x1d8>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d00d      	beq.n	8006d6c <HAL_GPIO_DeInit+0x8c>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a5a      	ldr	r2, [pc, #360]	@ (8006ebc <HAL_GPIO_DeInit+0x1dc>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d007      	beq.n	8006d68 <HAL_GPIO_DeInit+0x88>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a59      	ldr	r2, [pc, #356]	@ (8006ec0 <HAL_GPIO_DeInit+0x1e0>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d101      	bne.n	8006d64 <HAL_GPIO_DeInit+0x84>
 8006d60:	2306      	movs	r3, #6
 8006d62:	e00c      	b.n	8006d7e <HAL_GPIO_DeInit+0x9e>
 8006d64:	2307      	movs	r3, #7
 8006d66:	e00a      	b.n	8006d7e <HAL_GPIO_DeInit+0x9e>
 8006d68:	2305      	movs	r3, #5
 8006d6a:	e008      	b.n	8006d7e <HAL_GPIO_DeInit+0x9e>
 8006d6c:	2304      	movs	r3, #4
 8006d6e:	e006      	b.n	8006d7e <HAL_GPIO_DeInit+0x9e>
 8006d70:	2303      	movs	r3, #3
 8006d72:	e004      	b.n	8006d7e <HAL_GPIO_DeInit+0x9e>
 8006d74:	2302      	movs	r3, #2
 8006d76:	e002      	b.n	8006d7e <HAL_GPIO_DeInit+0x9e>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e000      	b.n	8006d7e <HAL_GPIO_DeInit+0x9e>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	f002 0203 	and.w	r2, r2, #3
 8006d84:	0092      	lsls	r2, r2, #2
 8006d86:	4093      	lsls	r3, r2
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d132      	bne.n	8006df4 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8006d8e:	4b4d      	ldr	r3, [pc, #308]	@ (8006ec4 <HAL_GPIO_DeInit+0x1e4>)
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	43db      	mvns	r3, r3
 8006d96:	494b      	ldr	r1, [pc, #300]	@ (8006ec4 <HAL_GPIO_DeInit+0x1e4>)
 8006d98:	4013      	ands	r3, r2
 8006d9a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006d9c:	4b49      	ldr	r3, [pc, #292]	@ (8006ec4 <HAL_GPIO_DeInit+0x1e4>)
 8006d9e:	685a      	ldr	r2, [r3, #4]
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	43db      	mvns	r3, r3
 8006da4:	4947      	ldr	r1, [pc, #284]	@ (8006ec4 <HAL_GPIO_DeInit+0x1e4>)
 8006da6:	4013      	ands	r3, r2
 8006da8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8006daa:	4b46      	ldr	r3, [pc, #280]	@ (8006ec4 <HAL_GPIO_DeInit+0x1e4>)
 8006dac:	689a      	ldr	r2, [r3, #8]
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	43db      	mvns	r3, r3
 8006db2:	4944      	ldr	r1, [pc, #272]	@ (8006ec4 <HAL_GPIO_DeInit+0x1e4>)
 8006db4:	4013      	ands	r3, r2
 8006db6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8006db8:	4b42      	ldr	r3, [pc, #264]	@ (8006ec4 <HAL_GPIO_DeInit+0x1e4>)
 8006dba:	68da      	ldr	r2, [r3, #12]
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	43db      	mvns	r3, r3
 8006dc0:	4940      	ldr	r1, [pc, #256]	@ (8006ec4 <HAL_GPIO_DeInit+0x1e4>)
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	f003 0303 	and.w	r3, r3, #3
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	220f      	movs	r2, #15
 8006dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006dd6:	4a34      	ldr	r2, [pc, #208]	@ (8006ea8 <HAL_GPIO_DeInit+0x1c8>)
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	089b      	lsrs	r3, r3, #2
 8006ddc:	3302      	adds	r3, #2
 8006dde:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	43da      	mvns	r2, r3
 8006de6:	4830      	ldr	r0, [pc, #192]	@ (8006ea8 <HAL_GPIO_DeInit+0x1c8>)
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	089b      	lsrs	r3, r3, #2
 8006dec:	400a      	ands	r2, r1
 8006dee:	3302      	adds	r3, #2
 8006df0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	005b      	lsls	r3, r3, #1
 8006dfc:	2103      	movs	r1, #3
 8006dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8006e02:	431a      	orrs	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	08da      	lsrs	r2, r3, #3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	3208      	adds	r2, #8
 8006e10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	f003 0307 	and.w	r3, r3, #7
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	220f      	movs	r2, #15
 8006e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e22:	43db      	mvns	r3, r3
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	08d2      	lsrs	r2, r2, #3
 8006e28:	4019      	ands	r1, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	3208      	adds	r2, #8
 8006e2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	689a      	ldr	r2, [r3, #8]
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	005b      	lsls	r3, r3, #1
 8006e3a:	2103      	movs	r1, #3
 8006e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e40:	43db      	mvns	r3, r3
 8006e42:	401a      	ands	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	2101      	movs	r1, #1
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	fa01 f303 	lsl.w	r3, r1, r3
 8006e54:	43db      	mvns	r3, r3
 8006e56:	401a      	ands	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	68da      	ldr	r2, [r3, #12]
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	005b      	lsls	r3, r3, #1
 8006e64:	2103      	movs	r1, #3
 8006e66:	fa01 f303 	lsl.w	r3, r1, r3
 8006e6a:	43db      	mvns	r3, r3
 8006e6c:	401a      	ands	r2, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e76:	2101      	movs	r1, #1
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e7e:	43db      	mvns	r3, r3
 8006e80:	401a      	ands	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	3301      	adds	r3, #1
 8006e8a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006e8c:	683a      	ldr	r2, [r7, #0]
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	fa22 f303 	lsr.w	r3, r2, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f47f af2b 	bne.w	8006cf0 <HAL_GPIO_DeInit+0x10>
  }
}
 8006e9a:	bf00      	nop
 8006e9c:	bf00      	nop
 8006e9e:	371c      	adds	r7, #28
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	40010000 	.word	0x40010000
 8006eac:	48000400 	.word	0x48000400
 8006eb0:	48000800 	.word	0x48000800
 8006eb4:	48000c00 	.word	0x48000c00
 8006eb8:	48001000 	.word	0x48001000
 8006ebc:	48001400 	.word	0x48001400
 8006ec0:	48001800 	.word	0x48001800
 8006ec4:	40010400 	.word	0x40010400

08006ec8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	691a      	ldr	r2, [r3, #16]
 8006ed8:	887b      	ldrh	r3, [r7, #2]
 8006eda:	4013      	ands	r3, r2
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d002      	beq.n	8006ee6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	73fb      	strb	r3, [r7, #15]
 8006ee4:	e001      	b.n	8006eea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3714      	adds	r7, #20
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	460b      	mov	r3, r1
 8006f02:	807b      	strh	r3, [r7, #2]
 8006f04:	4613      	mov	r3, r2
 8006f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006f08:	787b      	ldrb	r3, [r7, #1]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d003      	beq.n	8006f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006f0e:	887a      	ldrh	r2, [r7, #2]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006f14:	e002      	b.n	8006f1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006f16:	887a      	ldrh	r2, [r7, #2]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	460b      	mov	r3, r1
 8006f32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	695a      	ldr	r2, [r3, #20]
 8006f38:	887b      	ldrh	r3, [r7, #2]
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d003      	beq.n	8006f48 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006f40:	887a      	ldrh	r2, [r7, #2]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8006f46:	e002      	b.n	8006f4e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006f48:	887a      	ldrh	r2, [r7, #2]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	619a      	str	r2, [r3, #24]
}
 8006f4e:	bf00      	nop
 8006f50:	370c      	adds	r7, #12
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
	...

08006f5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	4603      	mov	r3, r0
 8006f64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006f66:	4b08      	ldr	r3, [pc, #32]	@ (8006f88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f68:	695a      	ldr	r2, [r3, #20]
 8006f6a:	88fb      	ldrh	r3, [r7, #6]
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d006      	beq.n	8006f80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006f72:	4a05      	ldr	r2, [pc, #20]	@ (8006f88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f74:	88fb      	ldrh	r3, [r7, #6]
 8006f76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006f78:	88fb      	ldrh	r3, [r7, #6]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7fb fa80 	bl	8002480 <HAL_GPIO_EXTI_Callback>
  }
}
 8006f80:	bf00      	nop
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	40010400 	.word	0x40010400

08006f8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d101      	bne.n	8006f9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e081      	b.n	80070a2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d106      	bne.n	8006fb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7fd fc3e 	bl	8004834 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2224      	movs	r2, #36	@ 0x24
 8006fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f022 0201 	bic.w	r2, r2, #1
 8006fce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006fdc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	689a      	ldr	r2, [r3, #8]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006fec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d107      	bne.n	8007006 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	689a      	ldr	r2, [r3, #8]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007002:	609a      	str	r2, [r3, #8]
 8007004:	e006      	b.n	8007014 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	689a      	ldr	r2, [r3, #8]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007012:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	2b02      	cmp	r3, #2
 800701a:	d104      	bne.n	8007026 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007024:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	6812      	ldr	r2, [r2, #0]
 8007030:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007034:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007038:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68da      	ldr	r2, [r3, #12]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007048:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	691a      	ldr	r2, [r3, #16]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	695b      	ldr	r3, [r3, #20]
 8007052:	ea42 0103 	orr.w	r1, r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	021a      	lsls	r2, r3, #8
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	430a      	orrs	r2, r1
 8007062:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	69d9      	ldr	r1, [r3, #28]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a1a      	ldr	r2, [r3, #32]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	430a      	orrs	r2, r1
 8007072:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f042 0201 	orr.w	r2, r2, #1
 8007082:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2220      	movs	r2, #32
 800708e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3708      	adds	r7, #8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b082      	sub	sp, #8
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d101      	bne.n	80070bc <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e021      	b.n	8007100 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2224      	movs	r2, #36	@ 0x24
 80070c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f022 0201 	bic.w	r2, r2, #1
 80070d2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f7fd fbf1 	bl	80048bc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b088      	sub	sp, #32
 800710c:	af02      	add	r7, sp, #8
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	4608      	mov	r0, r1
 8007112:	4611      	mov	r1, r2
 8007114:	461a      	mov	r2, r3
 8007116:	4603      	mov	r3, r0
 8007118:	817b      	strh	r3, [r7, #10]
 800711a:	460b      	mov	r3, r1
 800711c:	813b      	strh	r3, [r7, #8]
 800711e:	4613      	mov	r3, r2
 8007120:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b20      	cmp	r3, #32
 800712c:	f040 80f9 	bne.w	8007322 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007130:	6a3b      	ldr	r3, [r7, #32]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d002      	beq.n	800713c <HAL_I2C_Mem_Write+0x34>
 8007136:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007138:	2b00      	cmp	r3, #0
 800713a:	d105      	bne.n	8007148 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007142:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	e0ed      	b.n	8007324 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800714e:	2b01      	cmp	r3, #1
 8007150:	d101      	bne.n	8007156 <HAL_I2C_Mem_Write+0x4e>
 8007152:	2302      	movs	r3, #2
 8007154:	e0e6      	b.n	8007324 <HAL_I2C_Mem_Write+0x21c>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800715e:	f7ff fa95 	bl	800668c <HAL_GetTick>
 8007162:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	2319      	movs	r3, #25
 800716a:	2201      	movs	r2, #1
 800716c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	f000 fac3 	bl	80076fc <I2C_WaitOnFlagUntilTimeout>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d001      	beq.n	8007180 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e0d1      	b.n	8007324 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2221      	movs	r2, #33	@ 0x21
 8007184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2240      	movs	r2, #64	@ 0x40
 800718c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6a3a      	ldr	r2, [r7, #32]
 800719a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80071a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80071a8:	88f8      	ldrh	r0, [r7, #6]
 80071aa:	893a      	ldrh	r2, [r7, #8]
 80071ac:	8979      	ldrh	r1, [r7, #10]
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	9301      	str	r3, [sp, #4]
 80071b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b4:	9300      	str	r3, [sp, #0]
 80071b6:	4603      	mov	r3, r0
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f000 f9d3 	bl	8007564 <I2C_RequestMemoryWrite>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d005      	beq.n	80071d0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	e0a9      	b.n	8007324 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	2bff      	cmp	r3, #255	@ 0xff
 80071d8:	d90e      	bls.n	80071f8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	22ff      	movs	r2, #255	@ 0xff
 80071de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071e4:	b2da      	uxtb	r2, r3
 80071e6:	8979      	ldrh	r1, [r7, #10]
 80071e8:	2300      	movs	r3, #0
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f000 fba5 	bl	8007940 <I2C_TransferConfig>
 80071f6:	e00f      	b.n	8007218 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007206:	b2da      	uxtb	r2, r3
 8007208:	8979      	ldrh	r1, [r7, #10]
 800720a:	2300      	movs	r3, #0
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f000 fb94 	bl	8007940 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f000 faad 	bl	800777c <I2C_WaitOnTXISFlagUntilTimeout>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d001      	beq.n	800722c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e07b      	b.n	8007324 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007230:	781a      	ldrb	r2, [r3, #0]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800723c:	1c5a      	adds	r2, r3, #1
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007246:	b29b      	uxth	r3, r3
 8007248:	3b01      	subs	r3, #1
 800724a:	b29a      	uxth	r2, r3
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007254:	3b01      	subs	r3, #1
 8007256:	b29a      	uxth	r2, r3
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007260:	b29b      	uxth	r3, r3
 8007262:	2b00      	cmp	r3, #0
 8007264:	d034      	beq.n	80072d0 <HAL_I2C_Mem_Write+0x1c8>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800726a:	2b00      	cmp	r3, #0
 800726c:	d130      	bne.n	80072d0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007274:	2200      	movs	r2, #0
 8007276:	2180      	movs	r1, #128	@ 0x80
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	f000 fa3f 	bl	80076fc <I2C_WaitOnFlagUntilTimeout>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d001      	beq.n	8007288 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e04d      	b.n	8007324 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800728c:	b29b      	uxth	r3, r3
 800728e:	2bff      	cmp	r3, #255	@ 0xff
 8007290:	d90e      	bls.n	80072b0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	22ff      	movs	r2, #255	@ 0xff
 8007296:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800729c:	b2da      	uxtb	r2, r3
 800729e:	8979      	ldrh	r1, [r7, #10]
 80072a0:	2300      	movs	r3, #0
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f000 fb49 	bl	8007940 <I2C_TransferConfig>
 80072ae:	e00f      	b.n	80072d0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072be:	b2da      	uxtb	r2, r3
 80072c0:	8979      	ldrh	r1, [r7, #10]
 80072c2:	2300      	movs	r3, #0
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f000 fb38 	bl	8007940 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d19e      	bne.n	8007218 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f000 fa8c 	bl	80077fc <I2C_WaitOnSTOPFlagUntilTimeout>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d001      	beq.n	80072ee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e01a      	b.n	8007324 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2220      	movs	r2, #32
 80072f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6859      	ldr	r1, [r3, #4]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	4b0a      	ldr	r3, [pc, #40]	@ (800732c <HAL_I2C_Mem_Write+0x224>)
 8007302:	400b      	ands	r3, r1
 8007304:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2220      	movs	r2, #32
 800730a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800731e:	2300      	movs	r3, #0
 8007320:	e000      	b.n	8007324 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007322:	2302      	movs	r3, #2
  }
}
 8007324:	4618      	mov	r0, r3
 8007326:	3718      	adds	r7, #24
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	fe00e800 	.word	0xfe00e800

08007330 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b088      	sub	sp, #32
 8007334:	af02      	add	r7, sp, #8
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	4608      	mov	r0, r1
 800733a:	4611      	mov	r1, r2
 800733c:	461a      	mov	r2, r3
 800733e:	4603      	mov	r3, r0
 8007340:	817b      	strh	r3, [r7, #10]
 8007342:	460b      	mov	r3, r1
 8007344:	813b      	strh	r3, [r7, #8]
 8007346:	4613      	mov	r3, r2
 8007348:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b20      	cmp	r3, #32
 8007354:	f040 80fd 	bne.w	8007552 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007358:	6a3b      	ldr	r3, [r7, #32]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d002      	beq.n	8007364 <HAL_I2C_Mem_Read+0x34>
 800735e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007360:	2b00      	cmp	r3, #0
 8007362:	d105      	bne.n	8007370 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800736a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e0f1      	b.n	8007554 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007376:	2b01      	cmp	r3, #1
 8007378:	d101      	bne.n	800737e <HAL_I2C_Mem_Read+0x4e>
 800737a:	2302      	movs	r3, #2
 800737c:	e0ea      	b.n	8007554 <HAL_I2C_Mem_Read+0x224>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2201      	movs	r2, #1
 8007382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007386:	f7ff f981 	bl	800668c <HAL_GetTick>
 800738a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	9300      	str	r3, [sp, #0]
 8007390:	2319      	movs	r3, #25
 8007392:	2201      	movs	r2, #1
 8007394:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f000 f9af 	bl	80076fc <I2C_WaitOnFlagUntilTimeout>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d001      	beq.n	80073a8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e0d5      	b.n	8007554 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2222      	movs	r2, #34	@ 0x22
 80073ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2240      	movs	r2, #64	@ 0x40
 80073b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6a3a      	ldr	r2, [r7, #32]
 80073c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80073c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80073d0:	88f8      	ldrh	r0, [r7, #6]
 80073d2:	893a      	ldrh	r2, [r7, #8]
 80073d4:	8979      	ldrh	r1, [r7, #10]
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	9301      	str	r3, [sp, #4]
 80073da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	4603      	mov	r3, r0
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f000 f913 	bl	800760c <I2C_RequestMemoryRead>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d005      	beq.n	80073f8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e0ad      	b.n	8007554 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	2bff      	cmp	r3, #255	@ 0xff
 8007400:	d90e      	bls.n	8007420 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	22ff      	movs	r2, #255	@ 0xff
 8007406:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800740c:	b2da      	uxtb	r2, r3
 800740e:	8979      	ldrh	r1, [r7, #10]
 8007410:	4b52      	ldr	r3, [pc, #328]	@ (800755c <HAL_I2C_Mem_Read+0x22c>)
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f000 fa91 	bl	8007940 <I2C_TransferConfig>
 800741e:	e00f      	b.n	8007440 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007424:	b29a      	uxth	r2, r3
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800742e:	b2da      	uxtb	r2, r3
 8007430:	8979      	ldrh	r1, [r7, #10]
 8007432:	4b4a      	ldr	r3, [pc, #296]	@ (800755c <HAL_I2C_Mem_Read+0x22c>)
 8007434:	9300      	str	r3, [sp, #0]
 8007436:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f000 fa80 	bl	8007940 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	9300      	str	r3, [sp, #0]
 8007444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007446:	2200      	movs	r2, #0
 8007448:	2104      	movs	r1, #4
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f000 f956 	bl	80076fc <I2C_WaitOnFlagUntilTimeout>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d001      	beq.n	800745a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e07c      	b.n	8007554 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007464:	b2d2      	uxtb	r2, r2
 8007466:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800746c:	1c5a      	adds	r2, r3, #1
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007476:	3b01      	subs	r3, #1
 8007478:	b29a      	uxth	r2, r3
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007482:	b29b      	uxth	r3, r3
 8007484:	3b01      	subs	r3, #1
 8007486:	b29a      	uxth	r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007490:	b29b      	uxth	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	d034      	beq.n	8007500 <HAL_I2C_Mem_Read+0x1d0>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800749a:	2b00      	cmp	r3, #0
 800749c:	d130      	bne.n	8007500 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	9300      	str	r3, [sp, #0]
 80074a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a4:	2200      	movs	r2, #0
 80074a6:	2180      	movs	r1, #128	@ 0x80
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f000 f927 	bl	80076fc <I2C_WaitOnFlagUntilTimeout>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d001      	beq.n	80074b8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e04d      	b.n	8007554 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074bc:	b29b      	uxth	r3, r3
 80074be:	2bff      	cmp	r3, #255	@ 0xff
 80074c0:	d90e      	bls.n	80074e0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	22ff      	movs	r2, #255	@ 0xff
 80074c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074cc:	b2da      	uxtb	r2, r3
 80074ce:	8979      	ldrh	r1, [r7, #10]
 80074d0:	2300      	movs	r3, #0
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f000 fa31 	bl	8007940 <I2C_TransferConfig>
 80074de:	e00f      	b.n	8007500 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074ee:	b2da      	uxtb	r2, r3
 80074f0:	8979      	ldrh	r1, [r7, #10]
 80074f2:	2300      	movs	r3, #0
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f000 fa20 	bl	8007940 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007504:	b29b      	uxth	r3, r3
 8007506:	2b00      	cmp	r3, #0
 8007508:	d19a      	bne.n	8007440 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	f000 f974 	bl	80077fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d001      	beq.n	800751e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	e01a      	b.n	8007554 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2220      	movs	r2, #32
 8007524:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	6859      	ldr	r1, [r3, #4]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	4b0b      	ldr	r3, [pc, #44]	@ (8007560 <HAL_I2C_Mem_Read+0x230>)
 8007532:	400b      	ands	r3, r1
 8007534:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2220      	movs	r2, #32
 800753a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800754e:	2300      	movs	r3, #0
 8007550:	e000      	b.n	8007554 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007552:	2302      	movs	r3, #2
  }
}
 8007554:	4618      	mov	r0, r3
 8007556:	3718      	adds	r7, #24
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	80002400 	.word	0x80002400
 8007560:	fe00e800 	.word	0xfe00e800

08007564 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af02      	add	r7, sp, #8
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	4608      	mov	r0, r1
 800756e:	4611      	mov	r1, r2
 8007570:	461a      	mov	r2, r3
 8007572:	4603      	mov	r3, r0
 8007574:	817b      	strh	r3, [r7, #10]
 8007576:	460b      	mov	r3, r1
 8007578:	813b      	strh	r3, [r7, #8]
 800757a:	4613      	mov	r3, r2
 800757c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800757e:	88fb      	ldrh	r3, [r7, #6]
 8007580:	b2da      	uxtb	r2, r3
 8007582:	8979      	ldrh	r1, [r7, #10]
 8007584:	4b20      	ldr	r3, [pc, #128]	@ (8007608 <I2C_RequestMemoryWrite+0xa4>)
 8007586:	9300      	str	r3, [sp, #0]
 8007588:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f000 f9d7 	bl	8007940 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007592:	69fa      	ldr	r2, [r7, #28]
 8007594:	69b9      	ldr	r1, [r7, #24]
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f000 f8f0 	bl	800777c <I2C_WaitOnTXISFlagUntilTimeout>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d001      	beq.n	80075a6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e02c      	b.n	8007600 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80075a6:	88fb      	ldrh	r3, [r7, #6]
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d105      	bne.n	80075b8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80075ac:	893b      	ldrh	r3, [r7, #8]
 80075ae:	b2da      	uxtb	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80075b6:	e015      	b.n	80075e4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80075b8:	893b      	ldrh	r3, [r7, #8]
 80075ba:	0a1b      	lsrs	r3, r3, #8
 80075bc:	b29b      	uxth	r3, r3
 80075be:	b2da      	uxtb	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075c6:	69fa      	ldr	r2, [r7, #28]
 80075c8:	69b9      	ldr	r1, [r7, #24]
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f000 f8d6 	bl	800777c <I2C_WaitOnTXISFlagUntilTimeout>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d001      	beq.n	80075da <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e012      	b.n	8007600 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80075da:	893b      	ldrh	r3, [r7, #8]
 80075dc:	b2da      	uxtb	r2, r3
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	2200      	movs	r2, #0
 80075ec:	2180      	movs	r1, #128	@ 0x80
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f000 f884 	bl	80076fc <I2C_WaitOnFlagUntilTimeout>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d001      	beq.n	80075fe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e000      	b.n	8007600 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	80002000 	.word	0x80002000

0800760c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b086      	sub	sp, #24
 8007610:	af02      	add	r7, sp, #8
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	4608      	mov	r0, r1
 8007616:	4611      	mov	r1, r2
 8007618:	461a      	mov	r2, r3
 800761a:	4603      	mov	r3, r0
 800761c:	817b      	strh	r3, [r7, #10]
 800761e:	460b      	mov	r3, r1
 8007620:	813b      	strh	r3, [r7, #8]
 8007622:	4613      	mov	r3, r2
 8007624:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007626:	88fb      	ldrh	r3, [r7, #6]
 8007628:	b2da      	uxtb	r2, r3
 800762a:	8979      	ldrh	r1, [r7, #10]
 800762c:	4b20      	ldr	r3, [pc, #128]	@ (80076b0 <I2C_RequestMemoryRead+0xa4>)
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	2300      	movs	r3, #0
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f000 f984 	bl	8007940 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007638:	69fa      	ldr	r2, [r7, #28]
 800763a:	69b9      	ldr	r1, [r7, #24]
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f000 f89d 	bl	800777c <I2C_WaitOnTXISFlagUntilTimeout>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d001      	beq.n	800764c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	e02c      	b.n	80076a6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800764c:	88fb      	ldrh	r3, [r7, #6]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d105      	bne.n	800765e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007652:	893b      	ldrh	r3, [r7, #8]
 8007654:	b2da      	uxtb	r2, r3
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	629a      	str	r2, [r3, #40]	@ 0x28
 800765c:	e015      	b.n	800768a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800765e:	893b      	ldrh	r3, [r7, #8]
 8007660:	0a1b      	lsrs	r3, r3, #8
 8007662:	b29b      	uxth	r3, r3
 8007664:	b2da      	uxtb	r2, r3
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800766c:	69fa      	ldr	r2, [r7, #28]
 800766e:	69b9      	ldr	r1, [r7, #24]
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	f000 f883 	bl	800777c <I2C_WaitOnTXISFlagUntilTimeout>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d001      	beq.n	8007680 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e012      	b.n	80076a6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007680:	893b      	ldrh	r3, [r7, #8]
 8007682:	b2da      	uxtb	r2, r3
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	2200      	movs	r2, #0
 8007692:	2140      	movs	r1, #64	@ 0x40
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 f831 	bl	80076fc <I2C_WaitOnFlagUntilTimeout>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d001      	beq.n	80076a4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e000      	b.n	80076a6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	80002000 	.word	0x80002000

080076b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	f003 0302 	and.w	r3, r3, #2
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d103      	bne.n	80076d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2200      	movs	r2, #0
 80076d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	699b      	ldr	r3, [r3, #24]
 80076d8:	f003 0301 	and.w	r3, r3, #1
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d007      	beq.n	80076f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	699a      	ldr	r2, [r3, #24]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f042 0201 	orr.w	r2, r2, #1
 80076ee:	619a      	str	r2, [r3, #24]
  }
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	603b      	str	r3, [r7, #0]
 8007708:	4613      	mov	r3, r2
 800770a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800770c:	e022      	b.n	8007754 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007714:	d01e      	beq.n	8007754 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007716:	f7fe ffb9 	bl	800668c <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	683a      	ldr	r2, [r7, #0]
 8007722:	429a      	cmp	r2, r3
 8007724:	d302      	bcc.n	800772c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d113      	bne.n	8007754 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007730:	f043 0220 	orr.w	r2, r3, #32
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2220      	movs	r2, #32
 800773c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e00f      	b.n	8007774 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	699a      	ldr	r2, [r3, #24]
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	4013      	ands	r3, r2
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	429a      	cmp	r2, r3
 8007762:	bf0c      	ite	eq
 8007764:	2301      	moveq	r3, #1
 8007766:	2300      	movne	r3, #0
 8007768:	b2db      	uxtb	r3, r3
 800776a:	461a      	mov	r2, r3
 800776c:	79fb      	ldrb	r3, [r7, #7]
 800776e:	429a      	cmp	r2, r3
 8007770:	d0cd      	beq.n	800770e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007788:	e02c      	b.n	80077e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	68b9      	ldr	r1, [r7, #8]
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f000 f870 	bl	8007874 <I2C_IsAcknowledgeFailed>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e02a      	b.n	80077f4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a4:	d01e      	beq.n	80077e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077a6:	f7fe ff71 	bl	800668c <HAL_GetTick>
 80077aa:	4602      	mov	r2, r0
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d302      	bcc.n	80077bc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d113      	bne.n	80077e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077c0:	f043 0220 	orr.w	r2, r3, #32
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2220      	movs	r2, #32
 80077cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e007      	b.n	80077f4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	699b      	ldr	r3, [r3, #24]
 80077ea:	f003 0302 	and.w	r3, r3, #2
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d1cb      	bne.n	800778a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3710      	adds	r7, #16
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007808:	e028      	b.n	800785c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	68b9      	ldr	r1, [r7, #8]
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f000 f830 	bl	8007874 <I2C_IsAcknowledgeFailed>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d001      	beq.n	800781e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e026      	b.n	800786c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800781e:	f7fe ff35 	bl	800668c <HAL_GetTick>
 8007822:	4602      	mov	r2, r0
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	429a      	cmp	r2, r3
 800782c:	d302      	bcc.n	8007834 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d113      	bne.n	800785c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007838:	f043 0220 	orr.w	r2, r3, #32
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2220      	movs	r2, #32
 8007844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2200      	movs	r2, #0
 800784c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e007      	b.n	800786c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	699b      	ldr	r3, [r3, #24]
 8007862:	f003 0320 	and.w	r3, r3, #32
 8007866:	2b20      	cmp	r3, #32
 8007868:	d1cf      	bne.n	800780a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	f003 0310 	and.w	r3, r3, #16
 800788a:	2b10      	cmp	r3, #16
 800788c:	d151      	bne.n	8007932 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800788e:	e022      	b.n	80078d6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007896:	d01e      	beq.n	80078d6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007898:	f7fe fef8 	bl	800668c <HAL_GetTick>
 800789c:	4602      	mov	r2, r0
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d302      	bcc.n	80078ae <I2C_IsAcknowledgeFailed+0x3a>
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d113      	bne.n	80078d6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078b2:	f043 0220 	orr.w	r2, r3, #32
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2220      	movs	r2, #32
 80078be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e02e      	b.n	8007934 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	f003 0320 	and.w	r3, r3, #32
 80078e0:	2b20      	cmp	r3, #32
 80078e2:	d1d5      	bne.n	8007890 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2210      	movs	r2, #16
 80078ea:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2220      	movs	r2, #32
 80078f2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f7ff fedd 	bl	80076b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	6859      	ldr	r1, [r3, #4]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	4b0d      	ldr	r3, [pc, #52]	@ (800793c <I2C_IsAcknowledgeFailed+0xc8>)
 8007906:	400b      	ands	r3, r1
 8007908:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800790e:	f043 0204 	orr.w	r2, r3, #4
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2220      	movs	r2, #32
 800791a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e000      	b.n	8007934 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007932:	2300      	movs	r3, #0
}
 8007934:	4618      	mov	r0, r3
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	fe00e800 	.word	0xfe00e800

08007940 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	607b      	str	r3, [r7, #4]
 800794a:	460b      	mov	r3, r1
 800794c:	817b      	strh	r3, [r7, #10]
 800794e:	4613      	mov	r3, r2
 8007950:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	685a      	ldr	r2, [r3, #4]
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	0d5b      	lsrs	r3, r3, #21
 800795c:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007960:	4b0d      	ldr	r3, [pc, #52]	@ (8007998 <I2C_TransferConfig+0x58>)
 8007962:	430b      	orrs	r3, r1
 8007964:	43db      	mvns	r3, r3
 8007966:	ea02 0103 	and.w	r1, r2, r3
 800796a:	897b      	ldrh	r3, [r7, #10]
 800796c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007970:	7a7b      	ldrb	r3, [r7, #9]
 8007972:	041b      	lsls	r3, r3, #16
 8007974:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007978:	431a      	orrs	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	431a      	orrs	r2, r3
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	431a      	orrs	r2, r3
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	430a      	orrs	r2, r1
 8007988:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800798a:	bf00      	nop
 800798c:	3714      	adds	r7, #20
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	03ff63ff 	.word	0x03ff63ff

0800799c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	2b20      	cmp	r3, #32
 80079b0:	d138      	bne.n	8007a24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d101      	bne.n	80079c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80079bc:	2302      	movs	r3, #2
 80079be:	e032      	b.n	8007a26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2224      	movs	r2, #36	@ 0x24
 80079cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f022 0201 	bic.w	r2, r2, #1
 80079de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80079ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6819      	ldr	r1, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	683a      	ldr	r2, [r7, #0]
 80079fc:	430a      	orrs	r2, r1
 80079fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f042 0201 	orr.w	r2, r2, #1
 8007a0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2220      	movs	r2, #32
 8007a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007a20:	2300      	movs	r3, #0
 8007a22:	e000      	b.n	8007a26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007a24:	2302      	movs	r3, #2
  }
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	370c      	adds	r7, #12
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
	...

08007a34 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007a34:	b480      	push	{r7}
 8007a36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a38:	4b05      	ldr	r3, [pc, #20]	@ (8007a50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a04      	ldr	r2, [pc, #16]	@ (8007a50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007a3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a42:	6013      	str	r3, [r2, #0]
}
 8007a44:	bf00      	nop
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	40007000 	.word	0x40007000

08007a54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007a54:	b480      	push	{r7}
 8007a56:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007a58:	4b04      	ldr	r3, [pc, #16]	@ (8007a6c <HAL_PWREx_GetVoltageRange+0x18>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	40007000 	.word	0x40007000

08007a70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a7e:	d130      	bne.n	8007ae2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a80:	4b23      	ldr	r3, [pc, #140]	@ (8007b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007a88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a8c:	d038      	beq.n	8007b00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007a8e:	4b20      	ldr	r3, [pc, #128]	@ (8007b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007a96:	4a1e      	ldr	r2, [pc, #120]	@ (8007b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007a98:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007a9c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8007b14 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2232      	movs	r2, #50	@ 0x32
 8007aa4:	fb02 f303 	mul.w	r3, r2, r3
 8007aa8:	4a1b      	ldr	r2, [pc, #108]	@ (8007b18 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8007aae:	0c9b      	lsrs	r3, r3, #18
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007ab4:	e002      	b.n	8007abc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007abc:	4b14      	ldr	r3, [pc, #80]	@ (8007b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007abe:	695b      	ldr	r3, [r3, #20]
 8007ac0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ac4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ac8:	d102      	bne.n	8007ad0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1f2      	bne.n	8007ab6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8007b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007ad2:	695b      	ldr	r3, [r3, #20]
 8007ad4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ad8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007adc:	d110      	bne.n	8007b00 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e00f      	b.n	8007b02 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8007b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007aea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007aee:	d007      	beq.n	8007b00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007af0:	4b07      	ldr	r3, [pc, #28]	@ (8007b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007af8:	4a05      	ldr	r2, [pc, #20]	@ (8007b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007afa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007afe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3714      	adds	r7, #20
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	40007000 	.word	0x40007000
 8007b14:	20000088 	.word	0x20000088
 8007b18:	431bde83 	.word	0x431bde83

08007b1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b088      	sub	sp, #32
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d101      	bne.n	8007b2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e3d8      	b.n	80082e0 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b2e:	4b97      	ldr	r3, [pc, #604]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f003 030c 	and.w	r3, r3, #12
 8007b36:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007b38:	4b94      	ldr	r3, [pc, #592]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	f003 0303 	and.w	r3, r3, #3
 8007b40:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0310 	and.w	r3, r3, #16
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	f000 80e4 	beq.w	8007d18 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d007      	beq.n	8007b66 <HAL_RCC_OscConfig+0x4a>
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	2b0c      	cmp	r3, #12
 8007b5a:	f040 808b 	bne.w	8007c74 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	f040 8087 	bne.w	8007c74 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007b66:	4b89      	ldr	r3, [pc, #548]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f003 0302 	and.w	r3, r3, #2
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d005      	beq.n	8007b7e <HAL_RCC_OscConfig+0x62>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	699b      	ldr	r3, [r3, #24]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d101      	bne.n	8007b7e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e3b0      	b.n	80082e0 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a1a      	ldr	r2, [r3, #32]
 8007b82:	4b82      	ldr	r3, [pc, #520]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 0308 	and.w	r3, r3, #8
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d004      	beq.n	8007b98 <HAL_RCC_OscConfig+0x7c>
 8007b8e:	4b7f      	ldr	r3, [pc, #508]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b96:	e005      	b.n	8007ba4 <HAL_RCC_OscConfig+0x88>
 8007b98:	4b7c      	ldr	r3, [pc, #496]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b9e:	091b      	lsrs	r3, r3, #4
 8007ba0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d223      	bcs.n	8007bf0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a1b      	ldr	r3, [r3, #32]
 8007bac:	4618      	mov	r0, r3
 8007bae:	f000 fd43 	bl	8008638 <RCC_SetFlashLatencyFromMSIRange>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d001      	beq.n	8007bbc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e391      	b.n	80082e0 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007bbc:	4b73      	ldr	r3, [pc, #460]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a72      	ldr	r2, [pc, #456]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007bc2:	f043 0308 	orr.w	r3, r3, #8
 8007bc6:	6013      	str	r3, [r2, #0]
 8007bc8:	4b70      	ldr	r3, [pc, #448]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a1b      	ldr	r3, [r3, #32]
 8007bd4:	496d      	ldr	r1, [pc, #436]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007bda:	4b6c      	ldr	r3, [pc, #432]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	69db      	ldr	r3, [r3, #28]
 8007be6:	021b      	lsls	r3, r3, #8
 8007be8:	4968      	ldr	r1, [pc, #416]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007bea:	4313      	orrs	r3, r2
 8007bec:	604b      	str	r3, [r1, #4]
 8007bee:	e025      	b.n	8007c3c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007bf0:	4b66      	ldr	r3, [pc, #408]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a65      	ldr	r2, [pc, #404]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007bf6:	f043 0308 	orr.w	r3, r3, #8
 8007bfa:	6013      	str	r3, [r2, #0]
 8007bfc:	4b63      	ldr	r3, [pc, #396]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a1b      	ldr	r3, [r3, #32]
 8007c08:	4960      	ldr	r1, [pc, #384]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007c0e:	4b5f      	ldr	r3, [pc, #380]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	69db      	ldr	r3, [r3, #28]
 8007c1a:	021b      	lsls	r3, r3, #8
 8007c1c:	495b      	ldr	r1, [pc, #364]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d109      	bne.n	8007c3c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a1b      	ldr	r3, [r3, #32]
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f000 fd03 	bl	8008638 <RCC_SetFlashLatencyFromMSIRange>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d001      	beq.n	8007c3c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e351      	b.n	80082e0 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007c3c:	f000 fc38 	bl	80084b0 <HAL_RCC_GetSysClockFreq>
 8007c40:	4602      	mov	r2, r0
 8007c42:	4b52      	ldr	r3, [pc, #328]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	091b      	lsrs	r3, r3, #4
 8007c48:	f003 030f 	and.w	r3, r3, #15
 8007c4c:	4950      	ldr	r1, [pc, #320]	@ (8007d90 <HAL_RCC_OscConfig+0x274>)
 8007c4e:	5ccb      	ldrb	r3, [r1, r3]
 8007c50:	f003 031f 	and.w	r3, r3, #31
 8007c54:	fa22 f303 	lsr.w	r3, r2, r3
 8007c58:	4a4e      	ldr	r2, [pc, #312]	@ (8007d94 <HAL_RCC_OscConfig+0x278>)
 8007c5a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007c5c:	4b4e      	ldr	r3, [pc, #312]	@ (8007d98 <HAL_RCC_OscConfig+0x27c>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7fe fcc7 	bl	80065f4 <HAL_InitTick>
 8007c66:	4603      	mov	r3, r0
 8007c68:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007c6a:	7bfb      	ldrb	r3, [r7, #15]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d052      	beq.n	8007d16 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
 8007c72:	e335      	b.n	80082e0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d032      	beq.n	8007ce2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007c7c:	4b43      	ldr	r3, [pc, #268]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a42      	ldr	r2, [pc, #264]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007c82:	f043 0301 	orr.w	r3, r3, #1
 8007c86:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007c88:	f7fe fd00 	bl	800668c <HAL_GetTick>
 8007c8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007c8e:	e008      	b.n	8007ca2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007c90:	f7fe fcfc 	bl	800668c <HAL_GetTick>
 8007c94:	4602      	mov	r2, r0
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	1ad3      	subs	r3, r2, r3
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d901      	bls.n	8007ca2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	e31e      	b.n	80082e0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007ca2:	4b3a      	ldr	r3, [pc, #232]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0302 	and.w	r3, r3, #2
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d0f0      	beq.n	8007c90 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007cae:	4b37      	ldr	r3, [pc, #220]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a36      	ldr	r2, [pc, #216]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007cb4:	f043 0308 	orr.w	r3, r3, #8
 8007cb8:	6013      	str	r3, [r2, #0]
 8007cba:	4b34      	ldr	r3, [pc, #208]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a1b      	ldr	r3, [r3, #32]
 8007cc6:	4931      	ldr	r1, [pc, #196]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007ccc:	4b2f      	ldr	r3, [pc, #188]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	69db      	ldr	r3, [r3, #28]
 8007cd8:	021b      	lsls	r3, r3, #8
 8007cda:	492c      	ldr	r1, [pc, #176]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	604b      	str	r3, [r1, #4]
 8007ce0:	e01a      	b.n	8007d18 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007ce2:	4b2a      	ldr	r3, [pc, #168]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a29      	ldr	r2, [pc, #164]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007ce8:	f023 0301 	bic.w	r3, r3, #1
 8007cec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007cee:	f7fe fccd 	bl	800668c <HAL_GetTick>
 8007cf2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007cf4:	e008      	b.n	8007d08 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007cf6:	f7fe fcc9 	bl	800668c <HAL_GetTick>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d901      	bls.n	8007d08 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8007d04:	2303      	movs	r3, #3
 8007d06:	e2eb      	b.n	80082e0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007d08:	4b20      	ldr	r3, [pc, #128]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 0302 	and.w	r3, r3, #2
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1f0      	bne.n	8007cf6 <HAL_RCC_OscConfig+0x1da>
 8007d14:	e000      	b.n	8007d18 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007d16:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 0301 	and.w	r3, r3, #1
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d074      	beq.n	8007e0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	2b08      	cmp	r3, #8
 8007d28:	d005      	beq.n	8007d36 <HAL_RCC_OscConfig+0x21a>
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	2b0c      	cmp	r3, #12
 8007d2e:	d10e      	bne.n	8007d4e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	2b03      	cmp	r3, #3
 8007d34:	d10b      	bne.n	8007d4e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d36:	4b15      	ldr	r3, [pc, #84]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d064      	beq.n	8007e0c <HAL_RCC_OscConfig+0x2f0>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d160      	bne.n	8007e0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e2c8      	b.n	80082e0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d56:	d106      	bne.n	8007d66 <HAL_RCC_OscConfig+0x24a>
 8007d58:	4b0c      	ldr	r3, [pc, #48]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a0b      	ldr	r2, [pc, #44]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007d5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d62:	6013      	str	r3, [r2, #0]
 8007d64:	e026      	b.n	8007db4 <HAL_RCC_OscConfig+0x298>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d6e:	d115      	bne.n	8007d9c <HAL_RCC_OscConfig+0x280>
 8007d70:	4b06      	ldr	r3, [pc, #24]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a05      	ldr	r2, [pc, #20]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007d76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d7a:	6013      	str	r3, [r2, #0]
 8007d7c:	4b03      	ldr	r3, [pc, #12]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a02      	ldr	r2, [pc, #8]	@ (8007d8c <HAL_RCC_OscConfig+0x270>)
 8007d82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d86:	6013      	str	r3, [r2, #0]
 8007d88:	e014      	b.n	8007db4 <HAL_RCC_OscConfig+0x298>
 8007d8a:	bf00      	nop
 8007d8c:	40021000 	.word	0x40021000
 8007d90:	080113e0 	.word	0x080113e0
 8007d94:	20000088 	.word	0x20000088
 8007d98:	20000154 	.word	0x20000154
 8007d9c:	4ba0      	ldr	r3, [pc, #640]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a9f      	ldr	r2, [pc, #636]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 8007da2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007da6:	6013      	str	r3, [r2, #0]
 8007da8:	4b9d      	ldr	r3, [pc, #628]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a9c      	ldr	r2, [pc, #624]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 8007dae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d013      	beq.n	8007de4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dbc:	f7fe fc66 	bl	800668c <HAL_GetTick>
 8007dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007dc2:	e008      	b.n	8007dd6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007dc4:	f7fe fc62 	bl	800668c <HAL_GetTick>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	2b64      	cmp	r3, #100	@ 0x64
 8007dd0:	d901      	bls.n	8007dd6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	e284      	b.n	80082e0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007dd6:	4b92      	ldr	r3, [pc, #584]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d0f0      	beq.n	8007dc4 <HAL_RCC_OscConfig+0x2a8>
 8007de2:	e014      	b.n	8007e0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007de4:	f7fe fc52 	bl	800668c <HAL_GetTick>
 8007de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007dea:	e008      	b.n	8007dfe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007dec:	f7fe fc4e 	bl	800668c <HAL_GetTick>
 8007df0:	4602      	mov	r2, r0
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	2b64      	cmp	r3, #100	@ 0x64
 8007df8:	d901      	bls.n	8007dfe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	e270      	b.n	80082e0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007dfe:	4b88      	ldr	r3, [pc, #544]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1f0      	bne.n	8007dec <HAL_RCC_OscConfig+0x2d0>
 8007e0a:	e000      	b.n	8007e0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 0302 	and.w	r3, r3, #2
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d060      	beq.n	8007edc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007e1a:	69bb      	ldr	r3, [r7, #24]
 8007e1c:	2b04      	cmp	r3, #4
 8007e1e:	d005      	beq.n	8007e2c <HAL_RCC_OscConfig+0x310>
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	2b0c      	cmp	r3, #12
 8007e24:	d119      	bne.n	8007e5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d116      	bne.n	8007e5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e2c:	4b7c      	ldr	r3, [pc, #496]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d005      	beq.n	8007e44 <HAL_RCC_OscConfig+0x328>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d101      	bne.n	8007e44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	e24d      	b.n	80082e0 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e44:	4b76      	ldr	r3, [pc, #472]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	061b      	lsls	r3, r3, #24
 8007e52:	4973      	ldr	r1, [pc, #460]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 8007e54:	4313      	orrs	r3, r2
 8007e56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e58:	e040      	b.n	8007edc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d023      	beq.n	8007eaa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e62:	4b6f      	ldr	r3, [pc, #444]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a6e      	ldr	r2, [pc, #440]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 8007e68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e6e:	f7fe fc0d 	bl	800668c <HAL_GetTick>
 8007e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e74:	e008      	b.n	8007e88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e76:	f7fe fc09 	bl	800668c <HAL_GetTick>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d901      	bls.n	8007e88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007e84:	2303      	movs	r3, #3
 8007e86:	e22b      	b.n	80082e0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e88:	4b65      	ldr	r3, [pc, #404]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d0f0      	beq.n	8007e76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e94:	4b62      	ldr	r3, [pc, #392]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	061b      	lsls	r3, r3, #24
 8007ea2:	495f      	ldr	r1, [pc, #380]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	604b      	str	r3, [r1, #4]
 8007ea8:	e018      	b.n	8007edc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007eaa:	4b5d      	ldr	r3, [pc, #372]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a5c      	ldr	r2, [pc, #368]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 8007eb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007eb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eb6:	f7fe fbe9 	bl	800668c <HAL_GetTick>
 8007eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007ebc:	e008      	b.n	8007ed0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ebe:	f7fe fbe5 	bl	800668c <HAL_GetTick>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	1ad3      	subs	r3, r2, r3
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d901      	bls.n	8007ed0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	e207      	b.n	80082e0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007ed0:	4b53      	ldr	r3, [pc, #332]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1f0      	bne.n	8007ebe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 0308 	and.w	r3, r3, #8
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d03c      	beq.n	8007f62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	695b      	ldr	r3, [r3, #20]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d01c      	beq.n	8007f2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ef0:	4b4b      	ldr	r3, [pc, #300]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 8007ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ef6:	4a4a      	ldr	r2, [pc, #296]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 8007ef8:	f043 0301 	orr.w	r3, r3, #1
 8007efc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f00:	f7fe fbc4 	bl	800668c <HAL_GetTick>
 8007f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007f06:	e008      	b.n	8007f1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f08:	f7fe fbc0 	bl	800668c <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d901      	bls.n	8007f1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e1e2      	b.n	80082e0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007f1a:	4b41      	ldr	r3, [pc, #260]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 8007f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f20:	f003 0302 	and.w	r3, r3, #2
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d0ef      	beq.n	8007f08 <HAL_RCC_OscConfig+0x3ec>
 8007f28:	e01b      	b.n	8007f62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f2a:	4b3d      	ldr	r3, [pc, #244]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 8007f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f30:	4a3b      	ldr	r2, [pc, #236]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 8007f32:	f023 0301 	bic.w	r3, r3, #1
 8007f36:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f3a:	f7fe fba7 	bl	800668c <HAL_GetTick>
 8007f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007f40:	e008      	b.n	8007f54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f42:	f7fe fba3 	bl	800668c <HAL_GetTick>
 8007f46:	4602      	mov	r2, r0
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d901      	bls.n	8007f54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007f50:	2303      	movs	r3, #3
 8007f52:	e1c5      	b.n	80082e0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007f54:	4b32      	ldr	r3, [pc, #200]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 8007f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f5a:	f003 0302 	and.w	r3, r3, #2
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1ef      	bne.n	8007f42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 0304 	and.w	r3, r3, #4
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f000 80a6 	beq.w	80080bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f70:	2300      	movs	r3, #0
 8007f72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007f74:	4b2a      	ldr	r3, [pc, #168]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 8007f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10d      	bne.n	8007f9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f80:	4b27      	ldr	r3, [pc, #156]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 8007f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f84:	4a26      	ldr	r2, [pc, #152]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 8007f86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f8c:	4b24      	ldr	r3, [pc, #144]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 8007f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f94:	60bb      	str	r3, [r7, #8]
 8007f96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f9c:	4b21      	ldr	r3, [pc, #132]	@ (8008024 <HAL_RCC_OscConfig+0x508>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d118      	bne.n	8007fda <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007fa8:	4b1e      	ldr	r3, [pc, #120]	@ (8008024 <HAL_RCC_OscConfig+0x508>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a1d      	ldr	r2, [pc, #116]	@ (8008024 <HAL_RCC_OscConfig+0x508>)
 8007fae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007fb4:	f7fe fb6a 	bl	800668c <HAL_GetTick>
 8007fb8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007fba:	e008      	b.n	8007fce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fbc:	f7fe fb66 	bl	800668c <HAL_GetTick>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d901      	bls.n	8007fce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	e188      	b.n	80082e0 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007fce:	4b15      	ldr	r3, [pc, #84]	@ (8008024 <HAL_RCC_OscConfig+0x508>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d0f0      	beq.n	8007fbc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d108      	bne.n	8007ff4 <HAL_RCC_OscConfig+0x4d8>
 8007fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 8007fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fe8:	4a0d      	ldr	r2, [pc, #52]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 8007fea:	f043 0301 	orr.w	r3, r3, #1
 8007fee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007ff2:	e029      	b.n	8008048 <HAL_RCC_OscConfig+0x52c>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	2b05      	cmp	r3, #5
 8007ffa:	d115      	bne.n	8008028 <HAL_RCC_OscConfig+0x50c>
 8007ffc:	4b08      	ldr	r3, [pc, #32]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 8007ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008002:	4a07      	ldr	r2, [pc, #28]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 8008004:	f043 0304 	orr.w	r3, r3, #4
 8008008:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800800c:	4b04      	ldr	r3, [pc, #16]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 800800e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008012:	4a03      	ldr	r2, [pc, #12]	@ (8008020 <HAL_RCC_OscConfig+0x504>)
 8008014:	f043 0301 	orr.w	r3, r3, #1
 8008018:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800801c:	e014      	b.n	8008048 <HAL_RCC_OscConfig+0x52c>
 800801e:	bf00      	nop
 8008020:	40021000 	.word	0x40021000
 8008024:	40007000 	.word	0x40007000
 8008028:	4b91      	ldr	r3, [pc, #580]	@ (8008270 <HAL_RCC_OscConfig+0x754>)
 800802a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800802e:	4a90      	ldr	r2, [pc, #576]	@ (8008270 <HAL_RCC_OscConfig+0x754>)
 8008030:	f023 0301 	bic.w	r3, r3, #1
 8008034:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008038:	4b8d      	ldr	r3, [pc, #564]	@ (8008270 <HAL_RCC_OscConfig+0x754>)
 800803a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800803e:	4a8c      	ldr	r2, [pc, #560]	@ (8008270 <HAL_RCC_OscConfig+0x754>)
 8008040:	f023 0304 	bic.w	r3, r3, #4
 8008044:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d016      	beq.n	800807e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008050:	f7fe fb1c 	bl	800668c <HAL_GetTick>
 8008054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008056:	e00a      	b.n	800806e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008058:	f7fe fb18 	bl	800668c <HAL_GetTick>
 800805c:	4602      	mov	r2, r0
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008066:	4293      	cmp	r3, r2
 8008068:	d901      	bls.n	800806e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800806a:	2303      	movs	r3, #3
 800806c:	e138      	b.n	80082e0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800806e:	4b80      	ldr	r3, [pc, #512]	@ (8008270 <HAL_RCC_OscConfig+0x754>)
 8008070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008074:	f003 0302 	and.w	r3, r3, #2
 8008078:	2b00      	cmp	r3, #0
 800807a:	d0ed      	beq.n	8008058 <HAL_RCC_OscConfig+0x53c>
 800807c:	e015      	b.n	80080aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800807e:	f7fe fb05 	bl	800668c <HAL_GetTick>
 8008082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008084:	e00a      	b.n	800809c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008086:	f7fe fb01 	bl	800668c <HAL_GetTick>
 800808a:	4602      	mov	r2, r0
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	1ad3      	subs	r3, r2, r3
 8008090:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008094:	4293      	cmp	r3, r2
 8008096:	d901      	bls.n	800809c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008098:	2303      	movs	r3, #3
 800809a:	e121      	b.n	80082e0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800809c:	4b74      	ldr	r3, [pc, #464]	@ (8008270 <HAL_RCC_OscConfig+0x754>)
 800809e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080a2:	f003 0302 	and.w	r3, r3, #2
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1ed      	bne.n	8008086 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80080aa:	7ffb      	ldrb	r3, [r7, #31]
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d105      	bne.n	80080bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080b0:	4b6f      	ldr	r3, [pc, #444]	@ (8008270 <HAL_RCC_OscConfig+0x754>)
 80080b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080b4:	4a6e      	ldr	r2, [pc, #440]	@ (8008270 <HAL_RCC_OscConfig+0x754>)
 80080b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80080ba:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f000 810c 	beq.w	80082de <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	f040 80d4 	bne.w	8008278 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80080d0:	4b67      	ldr	r3, [pc, #412]	@ (8008270 <HAL_RCC_OscConfig+0x754>)
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	f003 0203 	and.w	r2, r3, #3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d130      	bne.n	8008146 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ee:	3b01      	subs	r3, #1
 80080f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d127      	bne.n	8008146 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008100:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008102:	429a      	cmp	r2, r3
 8008104:	d11f      	bne.n	8008146 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008110:	2a07      	cmp	r2, #7
 8008112:	bf14      	ite	ne
 8008114:	2201      	movne	r2, #1
 8008116:	2200      	moveq	r2, #0
 8008118:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800811a:	4293      	cmp	r3, r2
 800811c:	d113      	bne.n	8008146 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008128:	085b      	lsrs	r3, r3, #1
 800812a:	3b01      	subs	r3, #1
 800812c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800812e:	429a      	cmp	r2, r3
 8008130:	d109      	bne.n	8008146 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800813c:	085b      	lsrs	r3, r3, #1
 800813e:	3b01      	subs	r3, #1
 8008140:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008142:	429a      	cmp	r2, r3
 8008144:	d06e      	beq.n	8008224 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	2b0c      	cmp	r3, #12
 800814a:	d069      	beq.n	8008220 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800814c:	4b48      	ldr	r3, [pc, #288]	@ (8008270 <HAL_RCC_OscConfig+0x754>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008154:	2b00      	cmp	r3, #0
 8008156:	d105      	bne.n	8008164 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008158:	4b45      	ldr	r3, [pc, #276]	@ (8008270 <HAL_RCC_OscConfig+0x754>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008160:	2b00      	cmp	r3, #0
 8008162:	d001      	beq.n	8008168 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e0bb      	b.n	80082e0 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008168:	4b41      	ldr	r3, [pc, #260]	@ (8008270 <HAL_RCC_OscConfig+0x754>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a40      	ldr	r2, [pc, #256]	@ (8008270 <HAL_RCC_OscConfig+0x754>)
 800816e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008172:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008174:	f7fe fa8a 	bl	800668c <HAL_GetTick>
 8008178:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800817a:	e008      	b.n	800818e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800817c:	f7fe fa86 	bl	800668c <HAL_GetTick>
 8008180:	4602      	mov	r2, r0
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	1ad3      	subs	r3, r2, r3
 8008186:	2b02      	cmp	r3, #2
 8008188:	d901      	bls.n	800818e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800818a:	2303      	movs	r3, #3
 800818c:	e0a8      	b.n	80082e0 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800818e:	4b38      	ldr	r3, [pc, #224]	@ (8008270 <HAL_RCC_OscConfig+0x754>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1f0      	bne.n	800817c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800819a:	4b35      	ldr	r3, [pc, #212]	@ (8008270 <HAL_RCC_OscConfig+0x754>)
 800819c:	68da      	ldr	r2, [r3, #12]
 800819e:	4b35      	ldr	r3, [pc, #212]	@ (8008274 <HAL_RCC_OscConfig+0x758>)
 80081a0:	4013      	ands	r3, r2
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80081aa:	3a01      	subs	r2, #1
 80081ac:	0112      	lsls	r2, r2, #4
 80081ae:	4311      	orrs	r1, r2
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80081b4:	0212      	lsls	r2, r2, #8
 80081b6:	4311      	orrs	r1, r2
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80081bc:	0852      	lsrs	r2, r2, #1
 80081be:	3a01      	subs	r2, #1
 80081c0:	0552      	lsls	r2, r2, #21
 80081c2:	4311      	orrs	r1, r2
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80081c8:	0852      	lsrs	r2, r2, #1
 80081ca:	3a01      	subs	r2, #1
 80081cc:	0652      	lsls	r2, r2, #25
 80081ce:	4311      	orrs	r1, r2
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80081d4:	0912      	lsrs	r2, r2, #4
 80081d6:	0452      	lsls	r2, r2, #17
 80081d8:	430a      	orrs	r2, r1
 80081da:	4925      	ldr	r1, [pc, #148]	@ (8008270 <HAL_RCC_OscConfig+0x754>)
 80081dc:	4313      	orrs	r3, r2
 80081de:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80081e0:	4b23      	ldr	r3, [pc, #140]	@ (8008270 <HAL_RCC_OscConfig+0x754>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a22      	ldr	r2, [pc, #136]	@ (8008270 <HAL_RCC_OscConfig+0x754>)
 80081e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80081ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80081ec:	4b20      	ldr	r3, [pc, #128]	@ (8008270 <HAL_RCC_OscConfig+0x754>)
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	4a1f      	ldr	r2, [pc, #124]	@ (8008270 <HAL_RCC_OscConfig+0x754>)
 80081f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80081f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80081f8:	f7fe fa48 	bl	800668c <HAL_GetTick>
 80081fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80081fe:	e008      	b.n	8008212 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008200:	f7fe fa44 	bl	800668c <HAL_GetTick>
 8008204:	4602      	mov	r2, r0
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	2b02      	cmp	r3, #2
 800820c:	d901      	bls.n	8008212 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	e066      	b.n	80082e0 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008212:	4b17      	ldr	r3, [pc, #92]	@ (8008270 <HAL_RCC_OscConfig+0x754>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d0f0      	beq.n	8008200 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800821e:	e05e      	b.n	80082de <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	e05d      	b.n	80082e0 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008224:	4b12      	ldr	r3, [pc, #72]	@ (8008270 <HAL_RCC_OscConfig+0x754>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800822c:	2b00      	cmp	r3, #0
 800822e:	d156      	bne.n	80082de <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008230:	4b0f      	ldr	r3, [pc, #60]	@ (8008270 <HAL_RCC_OscConfig+0x754>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a0e      	ldr	r2, [pc, #56]	@ (8008270 <HAL_RCC_OscConfig+0x754>)
 8008236:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800823a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800823c:	4b0c      	ldr	r3, [pc, #48]	@ (8008270 <HAL_RCC_OscConfig+0x754>)
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	4a0b      	ldr	r2, [pc, #44]	@ (8008270 <HAL_RCC_OscConfig+0x754>)
 8008242:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008246:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008248:	f7fe fa20 	bl	800668c <HAL_GetTick>
 800824c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800824e:	e008      	b.n	8008262 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008250:	f7fe fa1c 	bl	800668c <HAL_GetTick>
 8008254:	4602      	mov	r2, r0
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	2b02      	cmp	r3, #2
 800825c:	d901      	bls.n	8008262 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800825e:	2303      	movs	r3, #3
 8008260:	e03e      	b.n	80082e0 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008262:	4b03      	ldr	r3, [pc, #12]	@ (8008270 <HAL_RCC_OscConfig+0x754>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800826a:	2b00      	cmp	r3, #0
 800826c:	d0f0      	beq.n	8008250 <HAL_RCC_OscConfig+0x734>
 800826e:	e036      	b.n	80082de <HAL_RCC_OscConfig+0x7c2>
 8008270:	40021000 	.word	0x40021000
 8008274:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008278:	69bb      	ldr	r3, [r7, #24]
 800827a:	2b0c      	cmp	r3, #12
 800827c:	d02d      	beq.n	80082da <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800827e:	4b1a      	ldr	r3, [pc, #104]	@ (80082e8 <HAL_RCC_OscConfig+0x7cc>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a19      	ldr	r2, [pc, #100]	@ (80082e8 <HAL_RCC_OscConfig+0x7cc>)
 8008284:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008288:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800828a:	4b17      	ldr	r3, [pc, #92]	@ (80082e8 <HAL_RCC_OscConfig+0x7cc>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f003 5320 	and.w	r3, r3, #671088640	@ 0x28000000
 8008292:	2b00      	cmp	r3, #0
 8008294:	d105      	bne.n	80082a2 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008296:	4b14      	ldr	r3, [pc, #80]	@ (80082e8 <HAL_RCC_OscConfig+0x7cc>)
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	4a13      	ldr	r2, [pc, #76]	@ (80082e8 <HAL_RCC_OscConfig+0x7cc>)
 800829c:	f023 0303 	bic.w	r3, r3, #3
 80082a0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80082a2:	4b11      	ldr	r3, [pc, #68]	@ (80082e8 <HAL_RCC_OscConfig+0x7cc>)
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	4a10      	ldr	r2, [pc, #64]	@ (80082e8 <HAL_RCC_OscConfig+0x7cc>)
 80082a8:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 80082ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082b0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082b2:	f7fe f9eb 	bl	800668c <HAL_GetTick>
 80082b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082b8:	e008      	b.n	80082cc <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082ba:	f7fe f9e7 	bl	800668c <HAL_GetTick>
 80082be:	4602      	mov	r2, r0
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d901      	bls.n	80082cc <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e009      	b.n	80082e0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082cc:	4b06      	ldr	r3, [pc, #24]	@ (80082e8 <HAL_RCC_OscConfig+0x7cc>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1f0      	bne.n	80082ba <HAL_RCC_OscConfig+0x79e>
 80082d8:	e001      	b.n	80082de <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e000      	b.n	80082e0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3720      	adds	r7, #32
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	40021000 	.word	0x40021000

080082ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d101      	bne.n	8008300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80082fc:	2301      	movs	r3, #1
 80082fe:	e0c8      	b.n	8008492 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008300:	4b66      	ldr	r3, [pc, #408]	@ (800849c <HAL_RCC_ClockConfig+0x1b0>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 0307 	and.w	r3, r3, #7
 8008308:	683a      	ldr	r2, [r7, #0]
 800830a:	429a      	cmp	r2, r3
 800830c:	d910      	bls.n	8008330 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800830e:	4b63      	ldr	r3, [pc, #396]	@ (800849c <HAL_RCC_ClockConfig+0x1b0>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f023 0207 	bic.w	r2, r3, #7
 8008316:	4961      	ldr	r1, [pc, #388]	@ (800849c <HAL_RCC_ClockConfig+0x1b0>)
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	4313      	orrs	r3, r2
 800831c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800831e:	4b5f      	ldr	r3, [pc, #380]	@ (800849c <HAL_RCC_ClockConfig+0x1b0>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f003 0307 	and.w	r3, r3, #7
 8008326:	683a      	ldr	r2, [r7, #0]
 8008328:	429a      	cmp	r2, r3
 800832a:	d001      	beq.n	8008330 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e0b0      	b.n	8008492 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f003 0301 	and.w	r3, r3, #1
 8008338:	2b00      	cmp	r3, #0
 800833a:	d04c      	beq.n	80083d6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	2b03      	cmp	r3, #3
 8008342:	d107      	bne.n	8008354 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008344:	4b56      	ldr	r3, [pc, #344]	@ (80084a0 <HAL_RCC_ClockConfig+0x1b4>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800834c:	2b00      	cmp	r3, #0
 800834e:	d121      	bne.n	8008394 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	e09e      	b.n	8008492 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	2b02      	cmp	r3, #2
 800835a:	d107      	bne.n	800836c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800835c:	4b50      	ldr	r3, [pc, #320]	@ (80084a0 <HAL_RCC_ClockConfig+0x1b4>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d115      	bne.n	8008394 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008368:	2301      	movs	r3, #1
 800836a:	e092      	b.n	8008492 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d107      	bne.n	8008384 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008374:	4b4a      	ldr	r3, [pc, #296]	@ (80084a0 <HAL_RCC_ClockConfig+0x1b4>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 0302 	and.w	r3, r3, #2
 800837c:	2b00      	cmp	r3, #0
 800837e:	d109      	bne.n	8008394 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	e086      	b.n	8008492 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008384:	4b46      	ldr	r3, [pc, #280]	@ (80084a0 <HAL_RCC_ClockConfig+0x1b4>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800838c:	2b00      	cmp	r3, #0
 800838e:	d101      	bne.n	8008394 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e07e      	b.n	8008492 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008394:	4b42      	ldr	r3, [pc, #264]	@ (80084a0 <HAL_RCC_ClockConfig+0x1b4>)
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	f023 0203 	bic.w	r2, r3, #3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	493f      	ldr	r1, [pc, #252]	@ (80084a0 <HAL_RCC_ClockConfig+0x1b4>)
 80083a2:	4313      	orrs	r3, r2
 80083a4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083a6:	f7fe f971 	bl	800668c <HAL_GetTick>
 80083aa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083ac:	e00a      	b.n	80083c4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083ae:	f7fe f96d 	bl	800668c <HAL_GetTick>
 80083b2:	4602      	mov	r2, r0
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	1ad3      	subs	r3, r2, r3
 80083b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083bc:	4293      	cmp	r3, r2
 80083be:	d901      	bls.n	80083c4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80083c0:	2303      	movs	r3, #3
 80083c2:	e066      	b.n	8008492 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083c4:	4b36      	ldr	r3, [pc, #216]	@ (80084a0 <HAL_RCC_ClockConfig+0x1b4>)
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	f003 020c 	and.w	r2, r3, #12
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d1eb      	bne.n	80083ae <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 0302 	and.w	r3, r3, #2
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d008      	beq.n	80083f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083e2:	4b2f      	ldr	r3, [pc, #188]	@ (80084a0 <HAL_RCC_ClockConfig+0x1b4>)
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	492c      	ldr	r1, [pc, #176]	@ (80084a0 <HAL_RCC_ClockConfig+0x1b4>)
 80083f0:	4313      	orrs	r3, r2
 80083f2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80083f4:	4b29      	ldr	r3, [pc, #164]	@ (800849c <HAL_RCC_ClockConfig+0x1b0>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0307 	and.w	r3, r3, #7
 80083fc:	683a      	ldr	r2, [r7, #0]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d210      	bcs.n	8008424 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008402:	4b26      	ldr	r3, [pc, #152]	@ (800849c <HAL_RCC_ClockConfig+0x1b0>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f023 0207 	bic.w	r2, r3, #7
 800840a:	4924      	ldr	r1, [pc, #144]	@ (800849c <HAL_RCC_ClockConfig+0x1b0>)
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	4313      	orrs	r3, r2
 8008410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008412:	4b22      	ldr	r3, [pc, #136]	@ (800849c <HAL_RCC_ClockConfig+0x1b0>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 0307 	and.w	r3, r3, #7
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	429a      	cmp	r2, r3
 800841e:	d001      	beq.n	8008424 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	e036      	b.n	8008492 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 0304 	and.w	r3, r3, #4
 800842c:	2b00      	cmp	r3, #0
 800842e:	d008      	beq.n	8008442 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008430:	4b1b      	ldr	r3, [pc, #108]	@ (80084a0 <HAL_RCC_ClockConfig+0x1b4>)
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	4918      	ldr	r1, [pc, #96]	@ (80084a0 <HAL_RCC_ClockConfig+0x1b4>)
 800843e:	4313      	orrs	r3, r2
 8008440:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f003 0308 	and.w	r3, r3, #8
 800844a:	2b00      	cmp	r3, #0
 800844c:	d009      	beq.n	8008462 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800844e:	4b14      	ldr	r3, [pc, #80]	@ (80084a0 <HAL_RCC_ClockConfig+0x1b4>)
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	00db      	lsls	r3, r3, #3
 800845c:	4910      	ldr	r1, [pc, #64]	@ (80084a0 <HAL_RCC_ClockConfig+0x1b4>)
 800845e:	4313      	orrs	r3, r2
 8008460:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008462:	f000 f825 	bl	80084b0 <HAL_RCC_GetSysClockFreq>
 8008466:	4602      	mov	r2, r0
 8008468:	4b0d      	ldr	r3, [pc, #52]	@ (80084a0 <HAL_RCC_ClockConfig+0x1b4>)
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	091b      	lsrs	r3, r3, #4
 800846e:	f003 030f 	and.w	r3, r3, #15
 8008472:	490c      	ldr	r1, [pc, #48]	@ (80084a4 <HAL_RCC_ClockConfig+0x1b8>)
 8008474:	5ccb      	ldrb	r3, [r1, r3]
 8008476:	f003 031f 	and.w	r3, r3, #31
 800847a:	fa22 f303 	lsr.w	r3, r2, r3
 800847e:	4a0a      	ldr	r2, [pc, #40]	@ (80084a8 <HAL_RCC_ClockConfig+0x1bc>)
 8008480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008482:	4b0a      	ldr	r3, [pc, #40]	@ (80084ac <HAL_RCC_ClockConfig+0x1c0>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4618      	mov	r0, r3
 8008488:	f7fe f8b4 	bl	80065f4 <HAL_InitTick>
 800848c:	4603      	mov	r3, r0
 800848e:	72fb      	strb	r3, [r7, #11]

  return status;
 8008490:	7afb      	ldrb	r3, [r7, #11]
}
 8008492:	4618      	mov	r0, r3
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	40022000 	.word	0x40022000
 80084a0:	40021000 	.word	0x40021000
 80084a4:	080113e0 	.word	0x080113e0
 80084a8:	20000088 	.word	0x20000088
 80084ac:	20000154 	.word	0x20000154

080084b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b089      	sub	sp, #36	@ 0x24
 80084b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80084b6:	2300      	movs	r3, #0
 80084b8:	61fb      	str	r3, [r7, #28]
 80084ba:	2300      	movs	r3, #0
 80084bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084be:	4b3e      	ldr	r3, [pc, #248]	@ (80085b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	f003 030c 	and.w	r3, r3, #12
 80084c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80084c8:	4b3b      	ldr	r3, [pc, #236]	@ (80085b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	f003 0303 	and.w	r3, r3, #3
 80084d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d005      	beq.n	80084e4 <HAL_RCC_GetSysClockFreq+0x34>
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	2b0c      	cmp	r3, #12
 80084dc:	d121      	bne.n	8008522 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d11e      	bne.n	8008522 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80084e4:	4b34      	ldr	r3, [pc, #208]	@ (80085b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f003 0308 	and.w	r3, r3, #8
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d107      	bne.n	8008500 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80084f0:	4b31      	ldr	r3, [pc, #196]	@ (80085b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80084f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80084f6:	0a1b      	lsrs	r3, r3, #8
 80084f8:	f003 030f 	and.w	r3, r3, #15
 80084fc:	61fb      	str	r3, [r7, #28]
 80084fe:	e005      	b.n	800850c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008500:	4b2d      	ldr	r3, [pc, #180]	@ (80085b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	091b      	lsrs	r3, r3, #4
 8008506:	f003 030f 	and.w	r3, r3, #15
 800850a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800850c:	4a2b      	ldr	r2, [pc, #172]	@ (80085bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008514:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10d      	bne.n	8008538 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008520:	e00a      	b.n	8008538 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	2b04      	cmp	r3, #4
 8008526:	d102      	bne.n	800852e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008528:	4b25      	ldr	r3, [pc, #148]	@ (80085c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800852a:	61bb      	str	r3, [r7, #24]
 800852c:	e004      	b.n	8008538 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	2b08      	cmp	r3, #8
 8008532:	d101      	bne.n	8008538 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008534:	4b23      	ldr	r3, [pc, #140]	@ (80085c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8008536:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	2b0c      	cmp	r3, #12
 800853c:	d134      	bne.n	80085a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800853e:	4b1e      	ldr	r3, [pc, #120]	@ (80085b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	f003 0303 	and.w	r3, r3, #3
 8008546:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	2b02      	cmp	r3, #2
 800854c:	d003      	beq.n	8008556 <HAL_RCC_GetSysClockFreq+0xa6>
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	2b03      	cmp	r3, #3
 8008552:	d003      	beq.n	800855c <HAL_RCC_GetSysClockFreq+0xac>
 8008554:	e005      	b.n	8008562 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008556:	4b1a      	ldr	r3, [pc, #104]	@ (80085c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8008558:	617b      	str	r3, [r7, #20]
      break;
 800855a:	e005      	b.n	8008568 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800855c:	4b19      	ldr	r3, [pc, #100]	@ (80085c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800855e:	617b      	str	r3, [r7, #20]
      break;
 8008560:	e002      	b.n	8008568 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	617b      	str	r3, [r7, #20]
      break;
 8008566:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008568:	4b13      	ldr	r3, [pc, #76]	@ (80085b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	091b      	lsrs	r3, r3, #4
 800856e:	f003 0307 	and.w	r3, r3, #7
 8008572:	3301      	adds	r3, #1
 8008574:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008576:	4b10      	ldr	r3, [pc, #64]	@ (80085b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	0a1b      	lsrs	r3, r3, #8
 800857c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	fb03 f202 	mul.w	r2, r3, r2
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	fbb2 f3f3 	udiv	r3, r2, r3
 800858c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800858e:	4b0a      	ldr	r3, [pc, #40]	@ (80085b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	0e5b      	lsrs	r3, r3, #25
 8008594:	f003 0303 	and.w	r3, r3, #3
 8008598:	3301      	adds	r3, #1
 800859a:	005b      	lsls	r3, r3, #1
 800859c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800859e:	697a      	ldr	r2, [r7, #20]
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80085a8:	69bb      	ldr	r3, [r7, #24]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3724      	adds	r7, #36	@ 0x24
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	40021000 	.word	0x40021000
 80085bc:	080113f8 	.word	0x080113f8
 80085c0:	00f42400 	.word	0x00f42400
 80085c4:	007a1200 	.word	0x007a1200

080085c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085c8:	b480      	push	{r7}
 80085ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80085cc:	4b03      	ldr	r3, [pc, #12]	@ (80085dc <HAL_RCC_GetHCLKFreq+0x14>)
 80085ce:	681b      	ldr	r3, [r3, #0]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	20000088 	.word	0x20000088

080085e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80085e4:	f7ff fff0 	bl	80085c8 <HAL_RCC_GetHCLKFreq>
 80085e8:	4602      	mov	r2, r0
 80085ea:	4b06      	ldr	r3, [pc, #24]	@ (8008604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	0a1b      	lsrs	r3, r3, #8
 80085f0:	f003 0307 	and.w	r3, r3, #7
 80085f4:	4904      	ldr	r1, [pc, #16]	@ (8008608 <HAL_RCC_GetPCLK1Freq+0x28>)
 80085f6:	5ccb      	ldrb	r3, [r1, r3]
 80085f8:	f003 031f 	and.w	r3, r3, #31
 80085fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008600:	4618      	mov	r0, r3
 8008602:	bd80      	pop	{r7, pc}
 8008604:	40021000 	.word	0x40021000
 8008608:	080113f0 	.word	0x080113f0

0800860c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008610:	f7ff ffda 	bl	80085c8 <HAL_RCC_GetHCLKFreq>
 8008614:	4602      	mov	r2, r0
 8008616:	4b06      	ldr	r3, [pc, #24]	@ (8008630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	0adb      	lsrs	r3, r3, #11
 800861c:	f003 0307 	and.w	r3, r3, #7
 8008620:	4904      	ldr	r1, [pc, #16]	@ (8008634 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008622:	5ccb      	ldrb	r3, [r1, r3]
 8008624:	f003 031f 	and.w	r3, r3, #31
 8008628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800862c:	4618      	mov	r0, r3
 800862e:	bd80      	pop	{r7, pc}
 8008630:	40021000 	.word	0x40021000
 8008634:	080113f0 	.word	0x080113f0

08008638 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b086      	sub	sp, #24
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008640:	2300      	movs	r3, #0
 8008642:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008644:	4b2a      	ldr	r3, [pc, #168]	@ (80086f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800864c:	2b00      	cmp	r3, #0
 800864e:	d003      	beq.n	8008658 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008650:	f7ff fa00 	bl	8007a54 <HAL_PWREx_GetVoltageRange>
 8008654:	6178      	str	r0, [r7, #20]
 8008656:	e014      	b.n	8008682 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008658:	4b25      	ldr	r3, [pc, #148]	@ (80086f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800865a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800865c:	4a24      	ldr	r2, [pc, #144]	@ (80086f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800865e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008662:	6593      	str	r3, [r2, #88]	@ 0x58
 8008664:	4b22      	ldr	r3, [pc, #136]	@ (80086f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800866c:	60fb      	str	r3, [r7, #12]
 800866e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008670:	f7ff f9f0 	bl	8007a54 <HAL_PWREx_GetVoltageRange>
 8008674:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008676:	4b1e      	ldr	r3, [pc, #120]	@ (80086f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800867a:	4a1d      	ldr	r2, [pc, #116]	@ (80086f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800867c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008680:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008688:	d10b      	bne.n	80086a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2b80      	cmp	r3, #128	@ 0x80
 800868e:	d919      	bls.n	80086c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2ba0      	cmp	r3, #160	@ 0xa0
 8008694:	d902      	bls.n	800869c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008696:	2302      	movs	r3, #2
 8008698:	613b      	str	r3, [r7, #16]
 800869a:	e013      	b.n	80086c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800869c:	2301      	movs	r3, #1
 800869e:	613b      	str	r3, [r7, #16]
 80086a0:	e010      	b.n	80086c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2b80      	cmp	r3, #128	@ 0x80
 80086a6:	d902      	bls.n	80086ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80086a8:	2303      	movs	r3, #3
 80086aa:	613b      	str	r3, [r7, #16]
 80086ac:	e00a      	b.n	80086c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2b80      	cmp	r3, #128	@ 0x80
 80086b2:	d102      	bne.n	80086ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80086b4:	2302      	movs	r3, #2
 80086b6:	613b      	str	r3, [r7, #16]
 80086b8:	e004      	b.n	80086c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2b70      	cmp	r3, #112	@ 0x70
 80086be:	d101      	bne.n	80086c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80086c0:	2301      	movs	r3, #1
 80086c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80086c4:	4b0b      	ldr	r3, [pc, #44]	@ (80086f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f023 0207 	bic.w	r2, r3, #7
 80086cc:	4909      	ldr	r1, [pc, #36]	@ (80086f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80086d4:	4b07      	ldr	r3, [pc, #28]	@ (80086f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 0307 	and.w	r3, r3, #7
 80086dc:	693a      	ldr	r2, [r7, #16]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d001      	beq.n	80086e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e000      	b.n	80086e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3718      	adds	r7, #24
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	40021000 	.word	0x40021000
 80086f4:	40022000 	.word	0x40022000

080086f8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80086f8:	b480      	push	{r7}
 80086fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80086fc:	4b05      	ldr	r3, [pc, #20]	@ (8008714 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a04      	ldr	r2, [pc, #16]	@ (8008714 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008702:	f043 0304 	orr.w	r3, r3, #4
 8008706:	6013      	str	r3, [r2, #0]
}
 8008708:	bf00      	nop
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	40021000 	.word	0x40021000

08008718 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d101      	bne.n	800872a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	e07c      	b.n	8008824 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2200      	movs	r2, #0
 800872e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008736:	b2db      	uxtb	r3, r3
 8008738:	2b00      	cmp	r3, #0
 800873a:	d106      	bne.n	800874a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f7fc f8d7 	bl	80048f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2202      	movs	r2, #2
 800874e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008760:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800876a:	d902      	bls.n	8008772 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800876c:	2300      	movs	r3, #0
 800876e:	60fb      	str	r3, [r7, #12]
 8008770:	e002      	b.n	8008778 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008772:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008776:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008780:	d007      	beq.n	8008792 <HAL_SPI_Init+0x7a>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800878a:	d002      	beq.n	8008792 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008796:	2b00      	cmp	r3, #0
 8008798:	d10b      	bne.n	80087b2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80087a2:	d903      	bls.n	80087ac <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2202      	movs	r2, #2
 80087a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80087aa:	e002      	b.n	80087b2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	685a      	ldr	r2, [r3, #4]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	431a      	orrs	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	431a      	orrs	r2, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	695b      	ldr	r3, [r3, #20]
 80087c6:	431a      	orrs	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	699b      	ldr	r3, [r3, #24]
 80087cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80087d0:	431a      	orrs	r2, r3
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	69db      	ldr	r3, [r3, #28]
 80087d6:	431a      	orrs	r2, r3
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a1b      	ldr	r3, [r3, #32]
 80087dc:	ea42 0103 	orr.w	r1, r2, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	430a      	orrs	r2, r1
 80087ea:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	0c1b      	lsrs	r3, r3, #16
 80087f2:	f003 0204 	and.w	r2, r3, #4
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087fa:	431a      	orrs	r2, r3
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008800:	431a      	orrs	r2, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	ea42 0103 	orr.w	r1, r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	430a      	orrs	r2, r1
 8008812:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2201      	movs	r2, #1
 800881e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008822:	2300      	movs	r3, #0
}
 8008824:	4618      	mov	r0, r3
 8008826:	3710      	adds	r7, #16
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d101      	bne.n	800883e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	e01a      	b.n	8008874 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2202      	movs	r2, #2
 8008842:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008854:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f7fc f892 	bl	8004980 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	3708      	adds	r7, #8
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b088      	sub	sp, #32
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	603b      	str	r3, [r7, #0]
 8008888:	4613      	mov	r3, r2
 800888a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800888c:	2300      	movs	r3, #0
 800888e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008896:	2b01      	cmp	r3, #1
 8008898:	d101      	bne.n	800889e <HAL_SPI_Transmit+0x22>
 800889a:	2302      	movs	r3, #2
 800889c:	e150      	b.n	8008b40 <HAL_SPI_Transmit+0x2c4>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2201      	movs	r2, #1
 80088a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088a6:	f7fd fef1 	bl	800668c <HAL_GetTick>
 80088aa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80088ac:	88fb      	ldrh	r3, [r7, #6]
 80088ae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d002      	beq.n	80088c2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80088bc:	2302      	movs	r3, #2
 80088be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80088c0:	e135      	b.n	8008b2e <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d002      	beq.n	80088ce <HAL_SPI_Transmit+0x52>
 80088c8:	88fb      	ldrh	r3, [r7, #6]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d102      	bne.n	80088d4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80088d2:	e12c      	b.n	8008b2e <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2203      	movs	r2, #3
 80088d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2200      	movs	r2, #0
 80088e0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	68ba      	ldr	r2, [r7, #8]
 80088e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	88fa      	ldrh	r2, [r7, #6]
 80088ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	88fa      	ldrh	r2, [r7, #6]
 80088f2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2200      	movs	r2, #0
 8008906:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800891e:	d107      	bne.n	8008930 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800892e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800893a:	2b40      	cmp	r3, #64	@ 0x40
 800893c:	d007      	beq.n	800894e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800894c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008956:	d94b      	bls.n	80089f0 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d002      	beq.n	8008966 <HAL_SPI_Transmit+0xea>
 8008960:	8afb      	ldrh	r3, [r7, #22]
 8008962:	2b01      	cmp	r3, #1
 8008964:	d13e      	bne.n	80089e4 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800896a:	881a      	ldrh	r2, [r3, #0]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008976:	1c9a      	adds	r2, r3, #2
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008980:	b29b      	uxth	r3, r3
 8008982:	3b01      	subs	r3, #1
 8008984:	b29a      	uxth	r2, r3
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800898a:	e02b      	b.n	80089e4 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	f003 0302 	and.w	r3, r3, #2
 8008996:	2b02      	cmp	r3, #2
 8008998:	d112      	bne.n	80089c0 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800899e:	881a      	ldrh	r2, [r3, #0]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089aa:	1c9a      	adds	r2, r3, #2
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	3b01      	subs	r3, #1
 80089b8:	b29a      	uxth	r2, r3
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80089be:	e011      	b.n	80089e4 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089c0:	f7fd fe64 	bl	800668c <HAL_GetTick>
 80089c4:	4602      	mov	r2, r0
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	683a      	ldr	r2, [r7, #0]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d803      	bhi.n	80089d8 <HAL_SPI_Transmit+0x15c>
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d6:	d102      	bne.n	80089de <HAL_SPI_Transmit+0x162>
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d102      	bne.n	80089e4 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80089de:	2303      	movs	r3, #3
 80089e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80089e2:	e0a4      	b.n	8008b2e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1ce      	bne.n	800898c <HAL_SPI_Transmit+0x110>
 80089ee:	e07c      	b.n	8008aea <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d002      	beq.n	80089fe <HAL_SPI_Transmit+0x182>
 80089f8:	8afb      	ldrh	r3, [r7, #22]
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d170      	bne.n	8008ae0 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d912      	bls.n	8008a2e <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a0c:	881a      	ldrh	r2, [r3, #0]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a18:	1c9a      	adds	r2, r3, #2
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	3b02      	subs	r3, #2
 8008a26:	b29a      	uxth	r2, r3
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008a2c:	e058      	b.n	8008ae0 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	330c      	adds	r3, #12
 8008a38:	7812      	ldrb	r2, [r2, #0]
 8008a3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a40:	1c5a      	adds	r2, r3, #1
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008a54:	e044      	b.n	8008ae0 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	f003 0302 	and.w	r3, r3, #2
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	d12b      	bne.n	8008abc <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d912      	bls.n	8008a94 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a72:	881a      	ldrh	r2, [r3, #0]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a7e:	1c9a      	adds	r2, r3, #2
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	3b02      	subs	r3, #2
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008a92:	e025      	b.n	8008ae0 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	330c      	adds	r3, #12
 8008a9e:	7812      	ldrb	r2, [r2, #0]
 8008aa0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aa6:	1c5a      	adds	r2, r3, #1
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008aba:	e011      	b.n	8008ae0 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008abc:	f7fd fde6 	bl	800668c <HAL_GetTick>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	683a      	ldr	r2, [r7, #0]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d803      	bhi.n	8008ad4 <HAL_SPI_Transmit+0x258>
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ad2:	d102      	bne.n	8008ada <HAL_SPI_Transmit+0x25e>
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d102      	bne.n	8008ae0 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8008ada:	2303      	movs	r3, #3
 8008adc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008ade:	e026      	b.n	8008b2e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1b5      	bne.n	8008a56 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008aea:	69ba      	ldr	r2, [r7, #24]
 8008aec:	6839      	ldr	r1, [r7, #0]
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f000 fda8 	bl	8009644 <SPI_EndRxTxTransaction>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d002      	beq.n	8008b00 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2220      	movs	r2, #32
 8008afe:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d10a      	bne.n	8008b1e <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b08:	2300      	movs	r3, #0
 8008b0a:	613b      	str	r3, [r7, #16]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	613b      	str	r3, [r7, #16]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	613b      	str	r3, [r7, #16]
 8008b1c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d002      	beq.n	8008b2c <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	77fb      	strb	r3, [r7, #31]
 8008b2a:	e000      	b.n	8008b2e <HAL_SPI_Transmit+0x2b2>
  }

error:
 8008b2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2201      	movs	r2, #1
 8008b32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008b3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3720      	adds	r7, #32
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b088      	sub	sp, #32
 8008b4c:	af02      	add	r7, sp, #8
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	603b      	str	r3, [r7, #0]
 8008b54:	4613      	mov	r3, r2
 8008b56:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b64:	d112      	bne.n	8008b8c <HAL_SPI_Receive+0x44>
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d10e      	bne.n	8008b8c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2204      	movs	r2, #4
 8008b72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008b76:	88fa      	ldrh	r2, [r7, #6]
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	9300      	str	r3, [sp, #0]
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	68ba      	ldr	r2, [r7, #8]
 8008b80:	68b9      	ldr	r1, [r7, #8]
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f000 f908 	bl	8008d98 <HAL_SPI_TransmitReceive>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	e101      	b.n	8008d90 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d101      	bne.n	8008b9a <HAL_SPI_Receive+0x52>
 8008b96:	2302      	movs	r3, #2
 8008b98:	e0fa      	b.n	8008d90 <HAL_SPI_Receive+0x248>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ba2:	f7fd fd73 	bl	800668c <HAL_GetTick>
 8008ba6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d002      	beq.n	8008bba <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008bb4:	2302      	movs	r3, #2
 8008bb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008bb8:	e0e1      	b.n	8008d7e <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d002      	beq.n	8008bc6 <HAL_SPI_Receive+0x7e>
 8008bc0:	88fb      	ldrh	r3, [r7, #6]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d102      	bne.n	8008bcc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008bca:	e0d8      	b.n	8008d7e <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2204      	movs	r2, #4
 8008bd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	68ba      	ldr	r2, [r7, #8]
 8008bde:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	88fa      	ldrh	r2, [r7, #6]
 8008be4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	88fa      	ldrh	r2, [r7, #6]
 8008bec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2200      	movs	r2, #0
 8008c06:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008c16:	d908      	bls.n	8008c2a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	685a      	ldr	r2, [r3, #4]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008c26:	605a      	str	r2, [r3, #4]
 8008c28:	e007      	b.n	8008c3a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	685a      	ldr	r2, [r3, #4]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008c38:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c42:	d107      	bne.n	8008c54 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008c52:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c5e:	2b40      	cmp	r3, #64	@ 0x40
 8008c60:	d007      	beq.n	8008c72 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c70:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008c7a:	d867      	bhi.n	8008d4c <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008c7c:	e030      	b.n	8008ce0 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	f003 0301 	and.w	r3, r3, #1
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d117      	bne.n	8008cbc <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f103 020c 	add.w	r2, r3, #12
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c98:	7812      	ldrb	r2, [r2, #0]
 8008c9a:	b2d2      	uxtb	r2, r2
 8008c9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ca2:	1c5a      	adds	r2, r3, #1
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	b29a      	uxth	r2, r3
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008cba:	e011      	b.n	8008ce0 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cbc:	f7fd fce6 	bl	800668c <HAL_GetTick>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	1ad3      	subs	r3, r2, r3
 8008cc6:	683a      	ldr	r2, [r7, #0]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d803      	bhi.n	8008cd4 <HAL_SPI_Receive+0x18c>
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd2:	d102      	bne.n	8008cda <HAL_SPI_Receive+0x192>
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d102      	bne.n	8008ce0 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008cde:	e04e      	b.n	8008d7e <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1c8      	bne.n	8008c7e <HAL_SPI_Receive+0x136>
 8008cec:	e034      	b.n	8008d58 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	f003 0301 	and.w	r3, r3, #1
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d115      	bne.n	8008d28 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	68da      	ldr	r2, [r3, #12]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d06:	b292      	uxth	r2, r2
 8008d08:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d0e:	1c9a      	adds	r2, r3, #2
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008d26:	e011      	b.n	8008d4c <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d28:	f7fd fcb0 	bl	800668c <HAL_GetTick>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	1ad3      	subs	r3, r2, r3
 8008d32:	683a      	ldr	r2, [r7, #0]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d803      	bhi.n	8008d40 <HAL_SPI_Receive+0x1f8>
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d3e:	d102      	bne.n	8008d46 <HAL_SPI_Receive+0x1fe>
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d102      	bne.n	8008d4c <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8008d46:	2303      	movs	r3, #3
 8008d48:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008d4a:	e018      	b.n	8008d7e <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d1ca      	bne.n	8008cee <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d58:	693a      	ldr	r2, [r7, #16]
 8008d5a:	6839      	ldr	r1, [r7, #0]
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	f000 fc19 	bl	8009594 <SPI_EndRxTransaction>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d002      	beq.n	8008d6e <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2220      	movs	r2, #32
 8008d6c:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d002      	beq.n	8008d7c <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	75fb      	strb	r3, [r7, #23]
 8008d7a:	e000      	b.n	8008d7e <HAL_SPI_Receive+0x236>
  }

error :
 8008d7c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2201      	movs	r2, #1
 8008d82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3718      	adds	r7, #24
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b08a      	sub	sp, #40	@ 0x28
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	607a      	str	r2, [r7, #4]
 8008da4:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008da6:	2301      	movs	r3, #1
 8008da8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008daa:	2300      	movs	r3, #0
 8008dac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d101      	bne.n	8008dbe <HAL_SPI_TransmitReceive+0x26>
 8008dba:	2302      	movs	r3, #2
 8008dbc:	e1fb      	b.n	80091b6 <HAL_SPI_TransmitReceive+0x41e>
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008dc6:	f7fd fc61 	bl	800668c <HAL_GetTick>
 8008dca:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008dd2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008dda:	887b      	ldrh	r3, [r7, #2]
 8008ddc:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008dde:	887b      	ldrh	r3, [r7, #2]
 8008de0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008de2:	7efb      	ldrb	r3, [r7, #27]
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d00e      	beq.n	8008e06 <HAL_SPI_TransmitReceive+0x6e>
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008dee:	d106      	bne.n	8008dfe <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d102      	bne.n	8008dfe <HAL_SPI_TransmitReceive+0x66>
 8008df8:	7efb      	ldrb	r3, [r7, #27]
 8008dfa:	2b04      	cmp	r3, #4
 8008dfc:	d003      	beq.n	8008e06 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008dfe:	2302      	movs	r3, #2
 8008e00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008e04:	e1cd      	b.n	80091a2 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d005      	beq.n	8008e18 <HAL_SPI_TransmitReceive+0x80>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d002      	beq.n	8008e18 <HAL_SPI_TransmitReceive+0x80>
 8008e12:	887b      	ldrh	r3, [r7, #2]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d103      	bne.n	8008e20 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008e1e:	e1c0      	b.n	80091a2 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	2b04      	cmp	r3, #4
 8008e2a:	d003      	beq.n	8008e34 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2205      	movs	r2, #5
 8008e30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2200      	movs	r2, #0
 8008e38:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	887a      	ldrh	r2, [r7, #2]
 8008e44:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	887a      	ldrh	r2, [r7, #2]
 8008e4c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	68ba      	ldr	r2, [r7, #8]
 8008e54:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	887a      	ldrh	r2, [r7, #2]
 8008e5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	887a      	ldrh	r2, [r7, #2]
 8008e60:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2200      	movs	r2, #0
 8008e66:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008e76:	d802      	bhi.n	8008e7e <HAL_SPI_TransmitReceive+0xe6>
 8008e78:	8a3b      	ldrh	r3, [r7, #16]
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d908      	bls.n	8008e90 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	685a      	ldr	r2, [r3, #4]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008e8c:	605a      	str	r2, [r3, #4]
 8008e8e:	e007      	b.n	8008ea0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	685a      	ldr	r2, [r3, #4]
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008e9e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eaa:	2b40      	cmp	r3, #64	@ 0x40
 8008eac:	d007      	beq.n	8008ebe <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008ebc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008ec6:	d97c      	bls.n	8008fc2 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d002      	beq.n	8008ed6 <HAL_SPI_TransmitReceive+0x13e>
 8008ed0:	8a7b      	ldrh	r3, [r7, #18]
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d169      	bne.n	8008faa <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eda:	881a      	ldrh	r2, [r3, #0]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ee6:	1c9a      	adds	r2, r3, #2
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	3b01      	subs	r3, #1
 8008ef4:	b29a      	uxth	r2, r3
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008efa:	e056      	b.n	8008faa <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	f003 0302 	and.w	r3, r3, #2
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	d11b      	bne.n	8008f42 <HAL_SPI_TransmitReceive+0x1aa>
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d016      	beq.n	8008f42 <HAL_SPI_TransmitReceive+0x1aa>
 8008f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d113      	bne.n	8008f42 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f1e:	881a      	ldrh	r2, [r3, #0]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f2a:	1c9a      	adds	r2, r3, #2
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	3b01      	subs	r3, #1
 8008f38:	b29a      	uxth	r2, r3
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	f003 0301 	and.w	r3, r3, #1
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d11c      	bne.n	8008f8a <HAL_SPI_TransmitReceive+0x1f2>
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d016      	beq.n	8008f8a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	68da      	ldr	r2, [r3, #12]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f66:	b292      	uxth	r2, r2
 8008f68:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f6e:	1c9a      	adds	r2, r3, #2
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008f86:	2301      	movs	r3, #1
 8008f88:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008f8a:	f7fd fb7f 	bl	800668c <HAL_GetTick>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	1ad3      	subs	r3, r2, r3
 8008f94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d807      	bhi.n	8008faa <HAL_SPI_TransmitReceive+0x212>
 8008f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fa0:	d003      	beq.n	8008faa <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008fa2:	2303      	movs	r3, #3
 8008fa4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8008fa8:	e0fb      	b.n	80091a2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d1a3      	bne.n	8008efc <HAL_SPI_TransmitReceive+0x164>
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d19d      	bne.n	8008efc <HAL_SPI_TransmitReceive+0x164>
 8008fc0:	e0df      	b.n	8009182 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d003      	beq.n	8008fd2 <HAL_SPI_TransmitReceive+0x23a>
 8008fca:	8a7b      	ldrh	r3, [r7, #18]
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	f040 80cb 	bne.w	8009168 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d912      	bls.n	8009002 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fe0:	881a      	ldrh	r2, [r3, #0]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fec:	1c9a      	adds	r2, r3, #2
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	3b02      	subs	r3, #2
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009000:	e0b2      	b.n	8009168 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	330c      	adds	r3, #12
 800900c:	7812      	ldrb	r2, [r2, #0]
 800900e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009014:	1c5a      	adds	r2, r3, #1
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800901e:	b29b      	uxth	r3, r3
 8009020:	3b01      	subs	r3, #1
 8009022:	b29a      	uxth	r2, r3
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009028:	e09e      	b.n	8009168 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	f003 0302 	and.w	r3, r3, #2
 8009034:	2b02      	cmp	r3, #2
 8009036:	d134      	bne.n	80090a2 <HAL_SPI_TransmitReceive+0x30a>
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800903c:	b29b      	uxth	r3, r3
 800903e:	2b00      	cmp	r3, #0
 8009040:	d02f      	beq.n	80090a2 <HAL_SPI_TransmitReceive+0x30a>
 8009042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009044:	2b01      	cmp	r3, #1
 8009046:	d12c      	bne.n	80090a2 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800904c:	b29b      	uxth	r3, r3
 800904e:	2b01      	cmp	r3, #1
 8009050:	d912      	bls.n	8009078 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009056:	881a      	ldrh	r2, [r3, #0]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009062:	1c9a      	adds	r2, r3, #2
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800906c:	b29b      	uxth	r3, r3
 800906e:	3b02      	subs	r3, #2
 8009070:	b29a      	uxth	r2, r3
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009076:	e012      	b.n	800909e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	330c      	adds	r3, #12
 8009082:	7812      	ldrb	r2, [r2, #0]
 8009084:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800908a:	1c5a      	adds	r2, r3, #1
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009094:	b29b      	uxth	r3, r3
 8009096:	3b01      	subs	r3, #1
 8009098:	b29a      	uxth	r2, r3
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800909e:	2300      	movs	r3, #0
 80090a0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	f003 0301 	and.w	r3, r3, #1
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d148      	bne.n	8009142 <HAL_SPI_TransmitReceive+0x3aa>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d042      	beq.n	8009142 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d923      	bls.n	8009110 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	68da      	ldr	r2, [r3, #12]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090d2:	b292      	uxth	r2, r2
 80090d4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090da:	1c9a      	adds	r2, r3, #2
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	3b02      	subs	r3, #2
 80090ea:	b29a      	uxth	r2, r3
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d81f      	bhi.n	800913e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	685a      	ldr	r2, [r3, #4]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800910c:	605a      	str	r2, [r3, #4]
 800910e:	e016      	b.n	800913e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f103 020c 	add.w	r2, r3, #12
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800911c:	7812      	ldrb	r2, [r2, #0]
 800911e:	b2d2      	uxtb	r2, r2
 8009120:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009126:	1c5a      	adds	r2, r3, #1
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009132:	b29b      	uxth	r3, r3
 8009134:	3b01      	subs	r3, #1
 8009136:	b29a      	uxth	r2, r3
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800913e:	2301      	movs	r3, #1
 8009140:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009142:	f7fd faa3 	bl	800668c <HAL_GetTick>
 8009146:	4602      	mov	r2, r0
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	1ad3      	subs	r3, r2, r3
 800914c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800914e:	429a      	cmp	r2, r3
 8009150:	d803      	bhi.n	800915a <HAL_SPI_TransmitReceive+0x3c2>
 8009152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009158:	d102      	bne.n	8009160 <HAL_SPI_TransmitReceive+0x3c8>
 800915a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915c:	2b00      	cmp	r3, #0
 800915e:	d103      	bne.n	8009168 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8009160:	2303      	movs	r3, #3
 8009162:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8009166:	e01c      	b.n	80091a2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800916c:	b29b      	uxth	r3, r3
 800916e:	2b00      	cmp	r3, #0
 8009170:	f47f af5b 	bne.w	800902a <HAL_SPI_TransmitReceive+0x292>
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800917a:	b29b      	uxth	r3, r3
 800917c:	2b00      	cmp	r3, #0
 800917e:	f47f af54 	bne.w	800902a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009182:	69fa      	ldr	r2, [r7, #28]
 8009184:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	f000 fa5c 	bl	8009644 <SPI_EndRxTxTransaction>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d006      	beq.n	80091a0 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2220      	movs	r2, #32
 800919c:	661a      	str	r2, [r3, #96]	@ 0x60
 800919e:	e000      	b.n	80091a2 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80091a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2201      	movs	r2, #1
 80091a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2200      	movs	r2, #0
 80091ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80091b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3728      	adds	r7, #40	@ 0x28
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
	...

080091c0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b088      	sub	sp, #32
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80091d8:	69bb      	ldr	r3, [r7, #24]
 80091da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d10e      	bne.n	8009200 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d009      	beq.n	8009200 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d004      	beq.n	8009200 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	4798      	blx	r3
    return;
 80091fe:	e0ce      	b.n	800939e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	f003 0302 	and.w	r3, r3, #2
 8009206:	2b00      	cmp	r3, #0
 8009208:	d009      	beq.n	800921e <HAL_SPI_IRQHandler+0x5e>
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009210:	2b00      	cmp	r3, #0
 8009212:	d004      	beq.n	800921e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	4798      	blx	r3
    return;
 800921c:	e0bf      	b.n	800939e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	f003 0320 	and.w	r3, r3, #32
 8009224:	2b00      	cmp	r3, #0
 8009226:	d10a      	bne.n	800923e <HAL_SPI_IRQHandler+0x7e>
 8009228:	69bb      	ldr	r3, [r7, #24]
 800922a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800922e:	2b00      	cmp	r3, #0
 8009230:	d105      	bne.n	800923e <HAL_SPI_IRQHandler+0x7e>
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009238:	2b00      	cmp	r3, #0
 800923a:	f000 80b0 	beq.w	800939e <HAL_SPI_IRQHandler+0x1de>
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	f003 0320 	and.w	r3, r3, #32
 8009244:	2b00      	cmp	r3, #0
 8009246:	f000 80aa 	beq.w	800939e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009250:	2b00      	cmp	r3, #0
 8009252:	d023      	beq.n	800929c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800925a:	b2db      	uxtb	r3, r3
 800925c:	2b03      	cmp	r3, #3
 800925e:	d011      	beq.n	8009284 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009264:	f043 0204 	orr.w	r2, r3, #4
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800926c:	2300      	movs	r3, #0
 800926e:	617b      	str	r3, [r7, #20]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	68db      	ldr	r3, [r3, #12]
 8009276:	617b      	str	r3, [r7, #20]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	617b      	str	r3, [r7, #20]
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	e00b      	b.n	800929c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009284:	2300      	movs	r3, #0
 8009286:	613b      	str	r3, [r7, #16]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	613b      	str	r3, [r7, #16]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	613b      	str	r3, [r7, #16]
 8009298:	693b      	ldr	r3, [r7, #16]
        return;
 800929a:	e080      	b.n	800939e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	f003 0320 	and.w	r3, r3, #32
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d014      	beq.n	80092d0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092aa:	f043 0201 	orr.w	r2, r3, #1
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80092b2:	2300      	movs	r3, #0
 80092b4:	60fb      	str	r3, [r7, #12]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	60fb      	str	r3, [r7, #12]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80092cc:	601a      	str	r2, [r3, #0]
 80092ce:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80092d0:	69bb      	ldr	r3, [r7, #24]
 80092d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d00c      	beq.n	80092f4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092de:	f043 0208 	orr.w	r2, r3, #8
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80092e6:	2300      	movs	r3, #0
 80092e8:	60bb      	str	r3, [r7, #8]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	60bb      	str	r3, [r7, #8]
 80092f2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d04f      	beq.n	800939c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	685a      	ldr	r2, [r3, #4]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800930a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2201      	movs	r2, #1
 8009310:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	f003 0302 	and.w	r3, r3, #2
 800931a:	2b00      	cmp	r3, #0
 800931c:	d104      	bne.n	8009328 <HAL_SPI_IRQHandler+0x168>
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	f003 0301 	and.w	r3, r3, #1
 8009324:	2b00      	cmp	r3, #0
 8009326:	d034      	beq.n	8009392 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	685a      	ldr	r2, [r3, #4]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f022 0203 	bic.w	r2, r2, #3
 8009336:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800933c:	2b00      	cmp	r3, #0
 800933e:	d011      	beq.n	8009364 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009344:	4a17      	ldr	r2, [pc, #92]	@ (80093a4 <HAL_SPI_IRQHandler+0x1e4>)
 8009346:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800934c:	4618      	mov	r0, r3
 800934e:	f7fd fadc 	bl	800690a <HAL_DMA_Abort_IT>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d005      	beq.n	8009364 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800935c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009368:	2b00      	cmp	r3, #0
 800936a:	d016      	beq.n	800939a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009370:	4a0c      	ldr	r2, [pc, #48]	@ (80093a4 <HAL_SPI_IRQHandler+0x1e4>)
 8009372:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009378:	4618      	mov	r0, r3
 800937a:	f7fd fac6 	bl	800690a <HAL_DMA_Abort_IT>
 800937e:	4603      	mov	r3, r0
 8009380:	2b00      	cmp	r3, #0
 8009382:	d00a      	beq.n	800939a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009388:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8009390:	e003      	b.n	800939a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 f808 	bl	80093a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009398:	e000      	b.n	800939c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800939a:	bf00      	nop
    return;
 800939c:	bf00      	nop
  }
}
 800939e:	3720      	adds	r7, #32
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	080093bd 	.word	0x080093bd

080093a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80093b0:	bf00      	nop
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093c8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2200      	movs	r2, #0
 80093d6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	f7ff ffe5 	bl	80093a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80093de:	bf00      	nop
 80093e0:	3710      	adds	r7, #16
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b084      	sub	sp, #16
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	60f8      	str	r0, [r7, #12]
 80093ee:	60b9      	str	r1, [r7, #8]
 80093f0:	603b      	str	r3, [r7, #0]
 80093f2:	4613      	mov	r3, r2
 80093f4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80093f6:	e04c      	b.n	8009492 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093fe:	d048      	beq.n	8009492 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009400:	f7fd f944 	bl	800668c <HAL_GetTick>
 8009404:	4602      	mov	r2, r0
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	1ad3      	subs	r3, r2, r3
 800940a:	683a      	ldr	r2, [r7, #0]
 800940c:	429a      	cmp	r2, r3
 800940e:	d902      	bls.n	8009416 <SPI_WaitFlagStateUntilTimeout+0x30>
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d13d      	bne.n	8009492 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	685a      	ldr	r2, [r3, #4]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009424:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800942e:	d111      	bne.n	8009454 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009438:	d004      	beq.n	8009444 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009442:	d107      	bne.n	8009454 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009452:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009458:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800945c:	d10f      	bne.n	800947e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800946c:	601a      	str	r2, [r3, #0]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800947c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2201      	movs	r2, #1
 8009482:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2200      	movs	r2, #0
 800948a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800948e:	2303      	movs	r3, #3
 8009490:	e00f      	b.n	80094b2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	689a      	ldr	r2, [r3, #8]
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	4013      	ands	r3, r2
 800949c:	68ba      	ldr	r2, [r7, #8]
 800949e:	429a      	cmp	r2, r3
 80094a0:	bf0c      	ite	eq
 80094a2:	2301      	moveq	r3, #1
 80094a4:	2300      	movne	r3, #0
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	461a      	mov	r2, r3
 80094aa:	79fb      	ldrb	r3, [r7, #7]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d1a3      	bne.n	80093f8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b084      	sub	sp, #16
 80094be:	af00      	add	r7, sp, #0
 80094c0:	60f8      	str	r0, [r7, #12]
 80094c2:	60b9      	str	r1, [r7, #8]
 80094c4:	607a      	str	r2, [r7, #4]
 80094c6:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80094c8:	e057      	b.n	800957a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80094d0:	d106      	bne.n	80094e0 <SPI_WaitFifoStateUntilTimeout+0x26>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d103      	bne.n	80094e0 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	330c      	adds	r3, #12
 80094de:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e6:	d048      	beq.n	800957a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80094e8:	f7fd f8d0 	bl	800668c <HAL_GetTick>
 80094ec:	4602      	mov	r2, r0
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	1ad3      	subs	r3, r2, r3
 80094f2:	683a      	ldr	r2, [r7, #0]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d902      	bls.n	80094fe <SPI_WaitFifoStateUntilTimeout+0x44>
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d13d      	bne.n	800957a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	685a      	ldr	r2, [r3, #4]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800950c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009516:	d111      	bne.n	800953c <SPI_WaitFifoStateUntilTimeout+0x82>
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009520:	d004      	beq.n	800952c <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800952a:	d107      	bne.n	800953c <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800953a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009540:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009544:	d10f      	bne.n	8009566 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009554:	601a      	str	r2, [r3, #0]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009564:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2201      	movs	r2, #1
 800956a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2200      	movs	r2, #0
 8009572:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009576:	2303      	movs	r3, #3
 8009578:	e008      	b.n	800958c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	689a      	ldr	r2, [r3, #8]
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	4013      	ands	r3, r2
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	429a      	cmp	r2, r3
 8009588:	d19f      	bne.n	80094ca <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3710      	adds	r7, #16
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b086      	sub	sp, #24
 8009598:	af02      	add	r7, sp, #8
 800959a:	60f8      	str	r0, [r7, #12]
 800959c:	60b9      	str	r1, [r7, #8]
 800959e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80095a8:	d111      	bne.n	80095ce <SPI_EndRxTransaction+0x3a>
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095b2:	d004      	beq.n	80095be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095bc:	d107      	bne.n	80095ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80095cc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	9300      	str	r3, [sp, #0]
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	2200      	movs	r2, #0
 80095d6:	2180      	movs	r1, #128	@ 0x80
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f7ff ff04 	bl	80093e6 <SPI_WaitFlagStateUntilTimeout>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d007      	beq.n	80095f4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095e8:	f043 0220 	orr.w	r2, r3, #32
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80095f0:	2303      	movs	r3, #3
 80095f2:	e023      	b.n	800963c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80095fc:	d11d      	bne.n	800963a <SPI_EndRxTransaction+0xa6>
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009606:	d004      	beq.n	8009612 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009610:	d113      	bne.n	800963a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	9300      	str	r3, [sp, #0]
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	2200      	movs	r2, #0
 800961a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	f7ff ff4b 	bl	80094ba <SPI_WaitFifoStateUntilTimeout>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d007      	beq.n	800963a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800962e:	f043 0220 	orr.w	r2, r3, #32
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009636:	2303      	movs	r3, #3
 8009638:	e000      	b.n	800963c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800963a:	2300      	movs	r3, #0
}
 800963c:	4618      	mov	r0, r3
 800963e:	3710      	adds	r7, #16
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b086      	sub	sp, #24
 8009648:	af02      	add	r7, sp, #8
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	60b9      	str	r1, [r7, #8]
 800964e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	9300      	str	r3, [sp, #0]
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	2200      	movs	r2, #0
 8009658:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800965c:	68f8      	ldr	r0, [r7, #12]
 800965e:	f7ff ff2c 	bl	80094ba <SPI_WaitFifoStateUntilTimeout>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d007      	beq.n	8009678 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800966c:	f043 0220 	orr.w	r2, r3, #32
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009674:	2303      	movs	r3, #3
 8009676:	e027      	b.n	80096c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	9300      	str	r3, [sp, #0]
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	2200      	movs	r2, #0
 8009680:	2180      	movs	r1, #128	@ 0x80
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f7ff feaf 	bl	80093e6 <SPI_WaitFlagStateUntilTimeout>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d007      	beq.n	800969e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009692:	f043 0220 	orr.w	r2, r3, #32
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800969a:	2303      	movs	r3, #3
 800969c:	e014      	b.n	80096c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	9300      	str	r3, [sp, #0]
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	2200      	movs	r2, #0
 80096a6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80096aa:	68f8      	ldr	r0, [r7, #12]
 80096ac:	f7ff ff05 	bl	80094ba <SPI_WaitFifoStateUntilTimeout>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d007      	beq.n	80096c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096ba:	f043 0220 	orr.w	r2, r3, #32
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80096c2:	2303      	movs	r3, #3
 80096c4:	e000      	b.n	80096c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80096c6:	2300      	movs	r3, #0
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3710      	adds	r7, #16
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d101      	bne.n	80096e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	e01d      	b.n	800971e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096e8:	b2db      	uxtb	r3, r3
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d106      	bne.n	80096fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f7fb f9d6 	bl	8004aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2202      	movs	r2, #2
 8009700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	3304      	adds	r3, #4
 800970c:	4619      	mov	r1, r3
 800970e:	4610      	mov	r0, r2
 8009710:	f000 fae2 	bl	8009cd8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2201      	movs	r2, #1
 8009718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	4618      	mov	r0, r3
 8009720:	3708      	adds	r7, #8
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009726:	b580      	push	{r7, lr}
 8009728:	b082      	sub	sp, #8
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d101      	bne.n	8009738 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009734:	2301      	movs	r3, #1
 8009736:	e01d      	b.n	8009774 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800973e:	b2db      	uxtb	r3, r3
 8009740:	2b00      	cmp	r3, #0
 8009742:	d106      	bne.n	8009752 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 f815 	bl	800977c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2202      	movs	r2, #2
 8009756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	3304      	adds	r3, #4
 8009762:	4619      	mov	r1, r3
 8009764:	4610      	mov	r0, r2
 8009766:	f000 fab7 	bl	8009cd8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2201      	movs	r2, #1
 800976e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009772:	2300      	movs	r3, #0
}
 8009774:	4618      	mov	r0, r3
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009784:	bf00      	nop
 8009786:	370c      	adds	r7, #12
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2201      	movs	r2, #1
 80097a0:	6839      	ldr	r1, [r7, #0]
 80097a2:	4618      	mov	r0, r3
 80097a4:	f000 fea2 	bl	800a4ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a1e      	ldr	r2, [pc, #120]	@ (8009828 <HAL_TIM_PWM_Start+0x98>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d013      	beq.n	80097da <HAL_TIM_PWM_Start+0x4a>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a1d      	ldr	r2, [pc, #116]	@ (800982c <HAL_TIM_PWM_Start+0x9c>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d00e      	beq.n	80097da <HAL_TIM_PWM_Start+0x4a>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a1b      	ldr	r2, [pc, #108]	@ (8009830 <HAL_TIM_PWM_Start+0xa0>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d009      	beq.n	80097da <HAL_TIM_PWM_Start+0x4a>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a1a      	ldr	r2, [pc, #104]	@ (8009834 <HAL_TIM_PWM_Start+0xa4>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d004      	beq.n	80097da <HAL_TIM_PWM_Start+0x4a>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a18      	ldr	r2, [pc, #96]	@ (8009838 <HAL_TIM_PWM_Start+0xa8>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d101      	bne.n	80097de <HAL_TIM_PWM_Start+0x4e>
 80097da:	2301      	movs	r3, #1
 80097dc:	e000      	b.n	80097e0 <HAL_TIM_PWM_Start+0x50>
 80097de:	2300      	movs	r3, #0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d007      	beq.n	80097f4 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80097f2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	689a      	ldr	r2, [r3, #8]
 80097fa:	4b10      	ldr	r3, [pc, #64]	@ (800983c <HAL_TIM_PWM_Start+0xac>)
 80097fc:	4013      	ands	r3, r2
 80097fe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2b06      	cmp	r3, #6
 8009804:	d00b      	beq.n	800981e <HAL_TIM_PWM_Start+0x8e>
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800980c:	d007      	beq.n	800981e <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f042 0201 	orr.w	r2, r2, #1
 800981c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800981e:	2300      	movs	r3, #0
}
 8009820:	4618      	mov	r0, r3
 8009822:	3710      	adds	r7, #16
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	40012c00 	.word	0x40012c00
 800982c:	40013400 	.word	0x40013400
 8009830:	40014000 	.word	0x40014000
 8009834:	40014400 	.word	0x40014400
 8009838:	40014800 	.word	0x40014800
 800983c:	00010007 	.word	0x00010007

08009840 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2200      	movs	r2, #0
 8009850:	6839      	ldr	r1, [r7, #0]
 8009852:	4618      	mov	r0, r3
 8009854:	f000 fe4a 	bl	800a4ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a2a      	ldr	r2, [pc, #168]	@ (8009908 <HAL_TIM_PWM_Stop+0xc8>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d013      	beq.n	800988a <HAL_TIM_PWM_Stop+0x4a>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a29      	ldr	r2, [pc, #164]	@ (800990c <HAL_TIM_PWM_Stop+0xcc>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d00e      	beq.n	800988a <HAL_TIM_PWM_Stop+0x4a>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a27      	ldr	r2, [pc, #156]	@ (8009910 <HAL_TIM_PWM_Stop+0xd0>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d009      	beq.n	800988a <HAL_TIM_PWM_Stop+0x4a>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a26      	ldr	r2, [pc, #152]	@ (8009914 <HAL_TIM_PWM_Stop+0xd4>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d004      	beq.n	800988a <HAL_TIM_PWM_Stop+0x4a>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a24      	ldr	r2, [pc, #144]	@ (8009918 <HAL_TIM_PWM_Stop+0xd8>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d101      	bne.n	800988e <HAL_TIM_PWM_Stop+0x4e>
 800988a:	2301      	movs	r3, #1
 800988c:	e000      	b.n	8009890 <HAL_TIM_PWM_Stop+0x50>
 800988e:	2300      	movs	r3, #0
 8009890:	2b00      	cmp	r3, #0
 8009892:	d017      	beq.n	80098c4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	6a1a      	ldr	r2, [r3, #32]
 800989a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800989e:	4013      	ands	r3, r2
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d10f      	bne.n	80098c4 <HAL_TIM_PWM_Stop+0x84>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	6a1a      	ldr	r2, [r3, #32]
 80098aa:	f240 4344 	movw	r3, #1092	@ 0x444
 80098ae:	4013      	ands	r3, r2
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d107      	bne.n	80098c4 <HAL_TIM_PWM_Stop+0x84>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80098c2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	6a1a      	ldr	r2, [r3, #32]
 80098ca:	f241 1311 	movw	r3, #4369	@ 0x1111
 80098ce:	4013      	ands	r3, r2
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d10f      	bne.n	80098f4 <HAL_TIM_PWM_Stop+0xb4>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	6a1a      	ldr	r2, [r3, #32]
 80098da:	f240 4344 	movw	r3, #1092	@ 0x444
 80098de:	4013      	ands	r3, r2
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d107      	bne.n	80098f4 <HAL_TIM_PWM_Stop+0xb4>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f022 0201 	bic.w	r2, r2, #1
 80098f2:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2201      	movs	r2, #1
 80098f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80098fc:	2300      	movs	r3, #0
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3708      	adds	r7, #8
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	40012c00 	.word	0x40012c00
 800990c:	40013400 	.word	0x40013400
 8009910:	40014000 	.word	0x40014000
 8009914:	40014400 	.word	0x40014400
 8009918:	40014800 	.word	0x40014800

0800991c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800992e:	2b01      	cmp	r3, #1
 8009930:	d101      	bne.n	8009936 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009932:	2302      	movs	r3, #2
 8009934:	e105      	b.n	8009b42 <HAL_TIM_PWM_ConfigChannel+0x226>
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2201      	movs	r2, #1
 800993a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2202      	movs	r2, #2
 8009942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  switch (Channel)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2b14      	cmp	r3, #20
 800994a:	f200 80f0 	bhi.w	8009b2e <HAL_TIM_PWM_ConfigChannel+0x212>
 800994e:	a201      	add	r2, pc, #4	@ (adr r2, 8009954 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009954:	080099a9 	.word	0x080099a9
 8009958:	08009b2f 	.word	0x08009b2f
 800995c:	08009b2f 	.word	0x08009b2f
 8009960:	08009b2f 	.word	0x08009b2f
 8009964:	080099e9 	.word	0x080099e9
 8009968:	08009b2f 	.word	0x08009b2f
 800996c:	08009b2f 	.word	0x08009b2f
 8009970:	08009b2f 	.word	0x08009b2f
 8009974:	08009a2b 	.word	0x08009a2b
 8009978:	08009b2f 	.word	0x08009b2f
 800997c:	08009b2f 	.word	0x08009b2f
 8009980:	08009b2f 	.word	0x08009b2f
 8009984:	08009a6b 	.word	0x08009a6b
 8009988:	08009b2f 	.word	0x08009b2f
 800998c:	08009b2f 	.word	0x08009b2f
 8009990:	08009b2f 	.word	0x08009b2f
 8009994:	08009aad 	.word	0x08009aad
 8009998:	08009b2f 	.word	0x08009b2f
 800999c:	08009b2f 	.word	0x08009b2f
 80099a0:	08009b2f 	.word	0x08009b2f
 80099a4:	08009aed 	.word	0x08009aed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	68b9      	ldr	r1, [r7, #8]
 80099ae:	4618      	mov	r0, r3
 80099b0:	f000 fa2c 	bl	8009e0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	699a      	ldr	r2, [r3, #24]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f042 0208 	orr.w	r2, r2, #8
 80099c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	699a      	ldr	r2, [r3, #24]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f022 0204 	bic.w	r2, r2, #4
 80099d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	6999      	ldr	r1, [r3, #24]
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	691a      	ldr	r2, [r3, #16]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	430a      	orrs	r2, r1
 80099e4:	619a      	str	r2, [r3, #24]
      break;
 80099e6:	e0a3      	b.n	8009b30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	68b9      	ldr	r1, [r7, #8]
 80099ee:	4618      	mov	r0, r3
 80099f0:	f000 fa9c 	bl	8009f2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	699a      	ldr	r2, [r3, #24]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	699a      	ldr	r2, [r3, #24]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	6999      	ldr	r1, [r3, #24]
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	691b      	ldr	r3, [r3, #16]
 8009a1e:	021a      	lsls	r2, r3, #8
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	430a      	orrs	r2, r1
 8009a26:	619a      	str	r2, [r3, #24]
      break;
 8009a28:	e082      	b.n	8009b30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	68b9      	ldr	r1, [r7, #8]
 8009a30:	4618      	mov	r0, r3
 8009a32:	f000 fb05 	bl	800a040 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	69da      	ldr	r2, [r3, #28]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f042 0208 	orr.w	r2, r2, #8
 8009a44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	69da      	ldr	r2, [r3, #28]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f022 0204 	bic.w	r2, r2, #4
 8009a54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	69d9      	ldr	r1, [r3, #28]
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	691a      	ldr	r2, [r3, #16]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	430a      	orrs	r2, r1
 8009a66:	61da      	str	r2, [r3, #28]
      break;
 8009a68:	e062      	b.n	8009b30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	68b9      	ldr	r1, [r7, #8]
 8009a70:	4618      	mov	r0, r3
 8009a72:	f000 fb6d 	bl	800a150 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	69da      	ldr	r2, [r3, #28]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	69da      	ldr	r2, [r3, #28]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	69d9      	ldr	r1, [r3, #28]
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	691b      	ldr	r3, [r3, #16]
 8009aa0:	021a      	lsls	r2, r3, #8
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	430a      	orrs	r2, r1
 8009aa8:	61da      	str	r2, [r3, #28]
      break;
 8009aaa:	e041      	b.n	8009b30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	68b9      	ldr	r1, [r7, #8]
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f000 fbb6 	bl	800a224 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f042 0208 	orr.w	r2, r2, #8
 8009ac6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f022 0204 	bic.w	r2, r2, #4
 8009ad6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	691a      	ldr	r2, [r3, #16]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	430a      	orrs	r2, r1
 8009ae8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009aea:	e021      	b.n	8009b30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	68b9      	ldr	r1, [r7, #8]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f000 fbfa 	bl	800a2ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009b06:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009b16:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	691b      	ldr	r3, [r3, #16]
 8009b22:	021a      	lsls	r2, r3, #8
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	430a      	orrs	r2, r1
 8009b2a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009b2c:	e000      	b.n	8009b30 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8009b2e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3710      	adds	r7, #16
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	bf00      	nop

08009b4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d101      	bne.n	8009b64 <HAL_TIM_ConfigClockSource+0x18>
 8009b60:	2302      	movs	r3, #2
 8009b62:	e0b5      	b.n	8009cd0 <HAL_TIM_ConfigClockSource+0x184>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2201      	movs	r2, #1
 8009b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2202      	movs	r2, #2
 8009b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009b86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b8e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	68fa      	ldr	r2, [r7, #12]
 8009b96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ba0:	d03e      	beq.n	8009c20 <HAL_TIM_ConfigClockSource+0xd4>
 8009ba2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ba6:	f200 8087 	bhi.w	8009cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8009baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bae:	f000 8085 	beq.w	8009cbc <HAL_TIM_ConfigClockSource+0x170>
 8009bb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bb6:	d87f      	bhi.n	8009cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8009bb8:	2b70      	cmp	r3, #112	@ 0x70
 8009bba:	d01a      	beq.n	8009bf2 <HAL_TIM_ConfigClockSource+0xa6>
 8009bbc:	2b70      	cmp	r3, #112	@ 0x70
 8009bbe:	d87b      	bhi.n	8009cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8009bc0:	2b60      	cmp	r3, #96	@ 0x60
 8009bc2:	d050      	beq.n	8009c66 <HAL_TIM_ConfigClockSource+0x11a>
 8009bc4:	2b60      	cmp	r3, #96	@ 0x60
 8009bc6:	d877      	bhi.n	8009cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8009bc8:	2b50      	cmp	r3, #80	@ 0x50
 8009bca:	d03c      	beq.n	8009c46 <HAL_TIM_ConfigClockSource+0xfa>
 8009bcc:	2b50      	cmp	r3, #80	@ 0x50
 8009bce:	d873      	bhi.n	8009cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8009bd0:	2b40      	cmp	r3, #64	@ 0x40
 8009bd2:	d058      	beq.n	8009c86 <HAL_TIM_ConfigClockSource+0x13a>
 8009bd4:	2b40      	cmp	r3, #64	@ 0x40
 8009bd6:	d86f      	bhi.n	8009cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8009bd8:	2b30      	cmp	r3, #48	@ 0x30
 8009bda:	d064      	beq.n	8009ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8009bdc:	2b30      	cmp	r3, #48	@ 0x30
 8009bde:	d86b      	bhi.n	8009cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8009be0:	2b20      	cmp	r3, #32
 8009be2:	d060      	beq.n	8009ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8009be4:	2b20      	cmp	r3, #32
 8009be6:	d867      	bhi.n	8009cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d05c      	beq.n	8009ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8009bec:	2b10      	cmp	r3, #16
 8009bee:	d05a      	beq.n	8009ca6 <HAL_TIM_ConfigClockSource+0x15a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009bf0:	e062      	b.n	8009cb8 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6818      	ldr	r0, [r3, #0]
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	6899      	ldr	r1, [r3, #8]
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	685a      	ldr	r2, [r3, #4]
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	f000 fc53 	bl	800a4ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009c14:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	68fa      	ldr	r2, [r7, #12]
 8009c1c:	609a      	str	r2, [r3, #8]
      break;
 8009c1e:	e04e      	b.n	8009cbe <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6818      	ldr	r0, [r3, #0]
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	6899      	ldr	r1, [r3, #8]
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	685a      	ldr	r2, [r3, #4]
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	f000 fc3c 	bl	800a4ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	689a      	ldr	r2, [r3, #8]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009c42:	609a      	str	r2, [r3, #8]
      break;
 8009c44:	e03b      	b.n	8009cbe <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6818      	ldr	r0, [r3, #0]
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	6859      	ldr	r1, [r3, #4]
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	461a      	mov	r2, r3
 8009c54:	f000 fbb0 	bl	800a3b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2150      	movs	r1, #80	@ 0x50
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f000 fc09 	bl	800a476 <TIM_ITRx_SetConfig>
      break;
 8009c64:	e02b      	b.n	8009cbe <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6818      	ldr	r0, [r3, #0]
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	6859      	ldr	r1, [r3, #4]
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	68db      	ldr	r3, [r3, #12]
 8009c72:	461a      	mov	r2, r3
 8009c74:	f000 fbcf 	bl	800a416 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2160      	movs	r1, #96	@ 0x60
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f000 fbf9 	bl	800a476 <TIM_ITRx_SetConfig>
      break;
 8009c84:	e01b      	b.n	8009cbe <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6818      	ldr	r0, [r3, #0]
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	6859      	ldr	r1, [r3, #4]
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	68db      	ldr	r3, [r3, #12]
 8009c92:	461a      	mov	r2, r3
 8009c94:	f000 fb90 	bl	800a3b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	2140      	movs	r1, #64	@ 0x40
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f000 fbe9 	bl	800a476 <TIM_ITRx_SetConfig>
      break;
 8009ca4:	e00b      	b.n	8009cbe <HAL_TIM_ConfigClockSource+0x172>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4619      	mov	r1, r3
 8009cb0:	4610      	mov	r0, r2
 8009cb2:	f000 fbe0 	bl	800a476 <TIM_ITRx_SetConfig>
      break;
 8009cb6:	e002      	b.n	8009cbe <HAL_TIM_ConfigClockSource+0x172>
      break;
 8009cb8:	bf00      	nop
 8009cba:	e000      	b.n	8009cbe <HAL_TIM_ConfigClockSource+0x172>
      break;
 8009cbc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009cce:	2300      	movs	r3, #0
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3710      	adds	r7, #16
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b085      	sub	sp, #20
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	4a40      	ldr	r2, [pc, #256]	@ (8009dec <TIM_Base_SetConfig+0x114>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d013      	beq.n	8009d18 <TIM_Base_SetConfig+0x40>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cf6:	d00f      	beq.n	8009d18 <TIM_Base_SetConfig+0x40>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	4a3d      	ldr	r2, [pc, #244]	@ (8009df0 <TIM_Base_SetConfig+0x118>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d00b      	beq.n	8009d18 <TIM_Base_SetConfig+0x40>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4a3c      	ldr	r2, [pc, #240]	@ (8009df4 <TIM_Base_SetConfig+0x11c>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d007      	beq.n	8009d18 <TIM_Base_SetConfig+0x40>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	4a3b      	ldr	r2, [pc, #236]	@ (8009df8 <TIM_Base_SetConfig+0x120>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d003      	beq.n	8009d18 <TIM_Base_SetConfig+0x40>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	4a3a      	ldr	r2, [pc, #232]	@ (8009dfc <TIM_Base_SetConfig+0x124>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d108      	bne.n	8009d2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	4313      	orrs	r3, r2
 8009d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4a2f      	ldr	r2, [pc, #188]	@ (8009dec <TIM_Base_SetConfig+0x114>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d01f      	beq.n	8009d72 <TIM_Base_SetConfig+0x9a>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d38:	d01b      	beq.n	8009d72 <TIM_Base_SetConfig+0x9a>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4a2c      	ldr	r2, [pc, #176]	@ (8009df0 <TIM_Base_SetConfig+0x118>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d017      	beq.n	8009d72 <TIM_Base_SetConfig+0x9a>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4a2b      	ldr	r2, [pc, #172]	@ (8009df4 <TIM_Base_SetConfig+0x11c>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d013      	beq.n	8009d72 <TIM_Base_SetConfig+0x9a>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4a2a      	ldr	r2, [pc, #168]	@ (8009df8 <TIM_Base_SetConfig+0x120>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d00f      	beq.n	8009d72 <TIM_Base_SetConfig+0x9a>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4a29      	ldr	r2, [pc, #164]	@ (8009dfc <TIM_Base_SetConfig+0x124>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d00b      	beq.n	8009d72 <TIM_Base_SetConfig+0x9a>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4a28      	ldr	r2, [pc, #160]	@ (8009e00 <TIM_Base_SetConfig+0x128>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d007      	beq.n	8009d72 <TIM_Base_SetConfig+0x9a>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	4a27      	ldr	r2, [pc, #156]	@ (8009e04 <TIM_Base_SetConfig+0x12c>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d003      	beq.n	8009d72 <TIM_Base_SetConfig+0x9a>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	4a26      	ldr	r2, [pc, #152]	@ (8009e08 <TIM_Base_SetConfig+0x130>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d108      	bne.n	8009d84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	68db      	ldr	r3, [r3, #12]
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	4313      	orrs	r3, r2
 8009d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	695b      	ldr	r3, [r3, #20]
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	68fa      	ldr	r2, [r7, #12]
 8009d96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	689a      	ldr	r2, [r3, #8]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	4a10      	ldr	r2, [pc, #64]	@ (8009dec <TIM_Base_SetConfig+0x114>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d00f      	beq.n	8009dd0 <TIM_Base_SetConfig+0xf8>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	4a12      	ldr	r2, [pc, #72]	@ (8009dfc <TIM_Base_SetConfig+0x124>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d00b      	beq.n	8009dd0 <TIM_Base_SetConfig+0xf8>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4a11      	ldr	r2, [pc, #68]	@ (8009e00 <TIM_Base_SetConfig+0x128>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d007      	beq.n	8009dd0 <TIM_Base_SetConfig+0xf8>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	4a10      	ldr	r2, [pc, #64]	@ (8009e04 <TIM_Base_SetConfig+0x12c>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d003      	beq.n	8009dd0 <TIM_Base_SetConfig+0xf8>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a0f      	ldr	r2, [pc, #60]	@ (8009e08 <TIM_Base_SetConfig+0x130>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d103      	bne.n	8009dd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	691a      	ldr	r2, [r3, #16]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2201      	movs	r2, #1
 8009ddc:	615a      	str	r2, [r3, #20]
}
 8009dde:	bf00      	nop
 8009de0:	3714      	adds	r7, #20
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop
 8009dec:	40012c00 	.word	0x40012c00
 8009df0:	40000400 	.word	0x40000400
 8009df4:	40000800 	.word	0x40000800
 8009df8:	40000c00 	.word	0x40000c00
 8009dfc:	40013400 	.word	0x40013400
 8009e00:	40014000 	.word	0x40014000
 8009e04:	40014400 	.word	0x40014400
 8009e08:	40014800 	.word	0x40014800

08009e0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b087      	sub	sp, #28
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6a1b      	ldr	r3, [r3, #32]
 8009e1a:	f023 0201 	bic.w	r2, r3, #1
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a1b      	ldr	r3, [r3, #32]
 8009e26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	699b      	ldr	r3, [r3, #24]
 8009e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f023 0303 	bic.w	r3, r3, #3
 8009e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	f023 0302 	bic.w	r3, r3, #2
 8009e58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	697a      	ldr	r2, [r7, #20]
 8009e60:	4313      	orrs	r3, r2
 8009e62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4a2c      	ldr	r2, [pc, #176]	@ (8009f18 <TIM_OC1_SetConfig+0x10c>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d00f      	beq.n	8009e8c <TIM_OC1_SetConfig+0x80>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	4a2b      	ldr	r2, [pc, #172]	@ (8009f1c <TIM_OC1_SetConfig+0x110>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d00b      	beq.n	8009e8c <TIM_OC1_SetConfig+0x80>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4a2a      	ldr	r2, [pc, #168]	@ (8009f20 <TIM_OC1_SetConfig+0x114>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d007      	beq.n	8009e8c <TIM_OC1_SetConfig+0x80>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	4a29      	ldr	r2, [pc, #164]	@ (8009f24 <TIM_OC1_SetConfig+0x118>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d003      	beq.n	8009e8c <TIM_OC1_SetConfig+0x80>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	4a28      	ldr	r2, [pc, #160]	@ (8009f28 <TIM_OC1_SetConfig+0x11c>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d10c      	bne.n	8009ea6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	f023 0308 	bic.w	r3, r3, #8
 8009e92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	68db      	ldr	r3, [r3, #12]
 8009e98:	697a      	ldr	r2, [r7, #20]
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	f023 0304 	bic.w	r3, r3, #4
 8009ea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4a1b      	ldr	r2, [pc, #108]	@ (8009f18 <TIM_OC1_SetConfig+0x10c>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d00f      	beq.n	8009ece <TIM_OC1_SetConfig+0xc2>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4a1a      	ldr	r2, [pc, #104]	@ (8009f1c <TIM_OC1_SetConfig+0x110>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d00b      	beq.n	8009ece <TIM_OC1_SetConfig+0xc2>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	4a19      	ldr	r2, [pc, #100]	@ (8009f20 <TIM_OC1_SetConfig+0x114>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d007      	beq.n	8009ece <TIM_OC1_SetConfig+0xc2>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	4a18      	ldr	r2, [pc, #96]	@ (8009f24 <TIM_OC1_SetConfig+0x118>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d003      	beq.n	8009ece <TIM_OC1_SetConfig+0xc2>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	4a17      	ldr	r2, [pc, #92]	@ (8009f28 <TIM_OC1_SetConfig+0x11c>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d111      	bne.n	8009ef2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ed4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009edc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	695b      	ldr	r3, [r3, #20]
 8009ee2:	693a      	ldr	r2, [r7, #16]
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	699b      	ldr	r3, [r3, #24]
 8009eec:	693a      	ldr	r2, [r7, #16]
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	693a      	ldr	r2, [r7, #16]
 8009ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	685a      	ldr	r2, [r3, #4]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	697a      	ldr	r2, [r7, #20]
 8009f0a:	621a      	str	r2, [r3, #32]
}
 8009f0c:	bf00      	nop
 8009f0e:	371c      	adds	r7, #28
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr
 8009f18:	40012c00 	.word	0x40012c00
 8009f1c:	40013400 	.word	0x40013400
 8009f20:	40014000 	.word	0x40014000
 8009f24:	40014400 	.word	0x40014400
 8009f28:	40014800 	.word	0x40014800

08009f2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b087      	sub	sp, #28
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6a1b      	ldr	r3, [r3, #32]
 8009f3a:	f023 0210 	bic.w	r2, r3, #16
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a1b      	ldr	r3, [r3, #32]
 8009f46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	699b      	ldr	r3, [r3, #24]
 8009f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009f5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	021b      	lsls	r3, r3, #8
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	4313      	orrs	r3, r2
 8009f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	f023 0320 	bic.w	r3, r3, #32
 8009f7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	011b      	lsls	r3, r3, #4
 8009f82:	697a      	ldr	r2, [r7, #20]
 8009f84:	4313      	orrs	r3, r2
 8009f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	4a28      	ldr	r2, [pc, #160]	@ (800a02c <TIM_OC2_SetConfig+0x100>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d003      	beq.n	8009f98 <TIM_OC2_SetConfig+0x6c>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	4a27      	ldr	r2, [pc, #156]	@ (800a030 <TIM_OC2_SetConfig+0x104>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d10d      	bne.n	8009fb4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	011b      	lsls	r3, r3, #4
 8009fa6:	697a      	ldr	r2, [r7, #20]
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	4a1d      	ldr	r2, [pc, #116]	@ (800a02c <TIM_OC2_SetConfig+0x100>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d00f      	beq.n	8009fdc <TIM_OC2_SetConfig+0xb0>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	4a1c      	ldr	r2, [pc, #112]	@ (800a030 <TIM_OC2_SetConfig+0x104>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d00b      	beq.n	8009fdc <TIM_OC2_SetConfig+0xb0>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	4a1b      	ldr	r2, [pc, #108]	@ (800a034 <TIM_OC2_SetConfig+0x108>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d007      	beq.n	8009fdc <TIM_OC2_SetConfig+0xb0>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	4a1a      	ldr	r2, [pc, #104]	@ (800a038 <TIM_OC2_SetConfig+0x10c>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d003      	beq.n	8009fdc <TIM_OC2_SetConfig+0xb0>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4a19      	ldr	r2, [pc, #100]	@ (800a03c <TIM_OC2_SetConfig+0x110>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d113      	bne.n	800a004 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009fe2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009fea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	695b      	ldr	r3, [r3, #20]
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	693a      	ldr	r2, [r7, #16]
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	699b      	ldr	r3, [r3, #24]
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	693a      	ldr	r2, [r7, #16]
 800a000:	4313      	orrs	r3, r2
 800a002:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	693a      	ldr	r2, [r7, #16]
 800a008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	685a      	ldr	r2, [r3, #4]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	697a      	ldr	r2, [r7, #20]
 800a01c:	621a      	str	r2, [r3, #32]
}
 800a01e:	bf00      	nop
 800a020:	371c      	adds	r7, #28
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr
 800a02a:	bf00      	nop
 800a02c:	40012c00 	.word	0x40012c00
 800a030:	40013400 	.word	0x40013400
 800a034:	40014000 	.word	0x40014000
 800a038:	40014400 	.word	0x40014400
 800a03c:	40014800 	.word	0x40014800

0800a040 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a040:	b480      	push	{r7}
 800a042:	b087      	sub	sp, #28
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a1b      	ldr	r3, [r3, #32]
 800a04e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6a1b      	ldr	r3, [r3, #32]
 800a05a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	69db      	ldr	r3, [r3, #28]
 800a066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a06e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f023 0303 	bic.w	r3, r3, #3
 800a07a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	68fa      	ldr	r2, [r7, #12]
 800a082:	4313      	orrs	r3, r2
 800a084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a08c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	689b      	ldr	r3, [r3, #8]
 800a092:	021b      	lsls	r3, r3, #8
 800a094:	697a      	ldr	r2, [r7, #20]
 800a096:	4313      	orrs	r3, r2
 800a098:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4a27      	ldr	r2, [pc, #156]	@ (800a13c <TIM_OC3_SetConfig+0xfc>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d003      	beq.n	800a0aa <TIM_OC3_SetConfig+0x6a>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	4a26      	ldr	r2, [pc, #152]	@ (800a140 <TIM_OC3_SetConfig+0x100>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d10d      	bne.n	800a0c6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a0b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	021b      	lsls	r3, r3, #8
 800a0b8:	697a      	ldr	r2, [r7, #20]
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a0c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	4a1c      	ldr	r2, [pc, #112]	@ (800a13c <TIM_OC3_SetConfig+0xfc>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d00f      	beq.n	800a0ee <TIM_OC3_SetConfig+0xae>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	4a1b      	ldr	r2, [pc, #108]	@ (800a140 <TIM_OC3_SetConfig+0x100>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d00b      	beq.n	800a0ee <TIM_OC3_SetConfig+0xae>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	4a1a      	ldr	r2, [pc, #104]	@ (800a144 <TIM_OC3_SetConfig+0x104>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d007      	beq.n	800a0ee <TIM_OC3_SetConfig+0xae>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	4a19      	ldr	r2, [pc, #100]	@ (800a148 <TIM_OC3_SetConfig+0x108>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d003      	beq.n	800a0ee <TIM_OC3_SetConfig+0xae>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	4a18      	ldr	r2, [pc, #96]	@ (800a14c <TIM_OC3_SetConfig+0x10c>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d113      	bne.n	800a116 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a0f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a0fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	695b      	ldr	r3, [r3, #20]
 800a102:	011b      	lsls	r3, r3, #4
 800a104:	693a      	ldr	r2, [r7, #16]
 800a106:	4313      	orrs	r3, r2
 800a108:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	699b      	ldr	r3, [r3, #24]
 800a10e:	011b      	lsls	r3, r3, #4
 800a110:	693a      	ldr	r2, [r7, #16]
 800a112:	4313      	orrs	r3, r2
 800a114:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	693a      	ldr	r2, [r7, #16]
 800a11a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	68fa      	ldr	r2, [r7, #12]
 800a120:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	685a      	ldr	r2, [r3, #4]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	697a      	ldr	r2, [r7, #20]
 800a12e:	621a      	str	r2, [r3, #32]
}
 800a130:	bf00      	nop
 800a132:	371c      	adds	r7, #28
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr
 800a13c:	40012c00 	.word	0x40012c00
 800a140:	40013400 	.word	0x40013400
 800a144:	40014000 	.word	0x40014000
 800a148:	40014400 	.word	0x40014400
 800a14c:	40014800 	.word	0x40014800

0800a150 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a150:	b480      	push	{r7}
 800a152:	b087      	sub	sp, #28
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6a1b      	ldr	r3, [r3, #32]
 800a15e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6a1b      	ldr	r3, [r3, #32]
 800a16a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	69db      	ldr	r3, [r3, #28]
 800a176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a17e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a18a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	021b      	lsls	r3, r3, #8
 800a192:	68fa      	ldr	r2, [r7, #12]
 800a194:	4313      	orrs	r3, r2
 800a196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a19e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	031b      	lsls	r3, r3, #12
 800a1a6:	693a      	ldr	r2, [r7, #16]
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	4a18      	ldr	r2, [pc, #96]	@ (800a210 <TIM_OC4_SetConfig+0xc0>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d00f      	beq.n	800a1d4 <TIM_OC4_SetConfig+0x84>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4a17      	ldr	r2, [pc, #92]	@ (800a214 <TIM_OC4_SetConfig+0xc4>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d00b      	beq.n	800a1d4 <TIM_OC4_SetConfig+0x84>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4a16      	ldr	r2, [pc, #88]	@ (800a218 <TIM_OC4_SetConfig+0xc8>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d007      	beq.n	800a1d4 <TIM_OC4_SetConfig+0x84>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4a15      	ldr	r2, [pc, #84]	@ (800a21c <TIM_OC4_SetConfig+0xcc>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d003      	beq.n	800a1d4 <TIM_OC4_SetConfig+0x84>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	4a14      	ldr	r2, [pc, #80]	@ (800a220 <TIM_OC4_SetConfig+0xd0>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d109      	bne.n	800a1e8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a1da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	695b      	ldr	r3, [r3, #20]
 800a1e0:	019b      	lsls	r3, r3, #6
 800a1e2:	697a      	ldr	r2, [r7, #20]
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	697a      	ldr	r2, [r7, #20]
 800a1ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	68fa      	ldr	r2, [r7, #12]
 800a1f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	685a      	ldr	r2, [r3, #4]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	693a      	ldr	r2, [r7, #16]
 800a200:	621a      	str	r2, [r3, #32]
}
 800a202:	bf00      	nop
 800a204:	371c      	adds	r7, #28
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	40012c00 	.word	0x40012c00
 800a214:	40013400 	.word	0x40013400
 800a218:	40014000 	.word	0x40014000
 800a21c:	40014400 	.word	0x40014400
 800a220:	40014800 	.word	0x40014800

0800a224 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a224:	b480      	push	{r7}
 800a226:	b087      	sub	sp, #28
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a1b      	ldr	r3, [r3, #32]
 800a232:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6a1b      	ldr	r3, [r3, #32]
 800a23e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a24a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	68fa      	ldr	r2, [r7, #12]
 800a25e:	4313      	orrs	r3, r2
 800a260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a268:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	689b      	ldr	r3, [r3, #8]
 800a26e:	041b      	lsls	r3, r3, #16
 800a270:	693a      	ldr	r2, [r7, #16]
 800a272:	4313      	orrs	r3, r2
 800a274:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	4a17      	ldr	r2, [pc, #92]	@ (800a2d8 <TIM_OC5_SetConfig+0xb4>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d00f      	beq.n	800a29e <TIM_OC5_SetConfig+0x7a>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	4a16      	ldr	r2, [pc, #88]	@ (800a2dc <TIM_OC5_SetConfig+0xb8>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d00b      	beq.n	800a29e <TIM_OC5_SetConfig+0x7a>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	4a15      	ldr	r2, [pc, #84]	@ (800a2e0 <TIM_OC5_SetConfig+0xbc>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d007      	beq.n	800a29e <TIM_OC5_SetConfig+0x7a>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	4a14      	ldr	r2, [pc, #80]	@ (800a2e4 <TIM_OC5_SetConfig+0xc0>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d003      	beq.n	800a29e <TIM_OC5_SetConfig+0x7a>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	4a13      	ldr	r2, [pc, #76]	@ (800a2e8 <TIM_OC5_SetConfig+0xc4>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d109      	bne.n	800a2b2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a2a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	695b      	ldr	r3, [r3, #20]
 800a2aa:	021b      	lsls	r3, r3, #8
 800a2ac:	697a      	ldr	r2, [r7, #20]
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	697a      	ldr	r2, [r7, #20]
 800a2b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	68fa      	ldr	r2, [r7, #12]
 800a2bc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	685a      	ldr	r2, [r3, #4]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	693a      	ldr	r2, [r7, #16]
 800a2ca:	621a      	str	r2, [r3, #32]
}
 800a2cc:	bf00      	nop
 800a2ce:	371c      	adds	r7, #28
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr
 800a2d8:	40012c00 	.word	0x40012c00
 800a2dc:	40013400 	.word	0x40013400
 800a2e0:	40014000 	.word	0x40014000
 800a2e4:	40014400 	.word	0x40014400
 800a2e8:	40014800 	.word	0x40014800

0800a2ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b087      	sub	sp, #28
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6a1b      	ldr	r3, [r3, #32]
 800a2fa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a1b      	ldr	r3, [r3, #32]
 800a306:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a31a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a31e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	021b      	lsls	r3, r3, #8
 800a326:	68fa      	ldr	r2, [r7, #12]
 800a328:	4313      	orrs	r3, r2
 800a32a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a332:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	051b      	lsls	r3, r3, #20
 800a33a:	693a      	ldr	r2, [r7, #16]
 800a33c:	4313      	orrs	r3, r2
 800a33e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	4a18      	ldr	r2, [pc, #96]	@ (800a3a4 <TIM_OC6_SetConfig+0xb8>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d00f      	beq.n	800a368 <TIM_OC6_SetConfig+0x7c>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	4a17      	ldr	r2, [pc, #92]	@ (800a3a8 <TIM_OC6_SetConfig+0xbc>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d00b      	beq.n	800a368 <TIM_OC6_SetConfig+0x7c>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	4a16      	ldr	r2, [pc, #88]	@ (800a3ac <TIM_OC6_SetConfig+0xc0>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d007      	beq.n	800a368 <TIM_OC6_SetConfig+0x7c>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	4a15      	ldr	r2, [pc, #84]	@ (800a3b0 <TIM_OC6_SetConfig+0xc4>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d003      	beq.n	800a368 <TIM_OC6_SetConfig+0x7c>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	4a14      	ldr	r2, [pc, #80]	@ (800a3b4 <TIM_OC6_SetConfig+0xc8>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d109      	bne.n	800a37c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a36e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	695b      	ldr	r3, [r3, #20]
 800a374:	029b      	lsls	r3, r3, #10
 800a376:	697a      	ldr	r2, [r7, #20]
 800a378:	4313      	orrs	r3, r2
 800a37a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	697a      	ldr	r2, [r7, #20]
 800a380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	68fa      	ldr	r2, [r7, #12]
 800a386:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	685a      	ldr	r2, [r3, #4]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	693a      	ldr	r2, [r7, #16]
 800a394:	621a      	str	r2, [r3, #32]
}
 800a396:	bf00      	nop
 800a398:	371c      	adds	r7, #28
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	40012c00 	.word	0x40012c00
 800a3a8:	40013400 	.word	0x40013400
 800a3ac:	40014000 	.word	0x40014000
 800a3b0:	40014400 	.word	0x40014400
 800a3b4:	40014800 	.word	0x40014800

0800a3b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b087      	sub	sp, #28
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6a1b      	ldr	r3, [r3, #32]
 800a3c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6a1b      	ldr	r3, [r3, #32]
 800a3ce:	f023 0201 	bic.w	r2, r3, #1
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	699b      	ldr	r3, [r3, #24]
 800a3da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a3e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	011b      	lsls	r3, r3, #4
 800a3e8:	693a      	ldr	r2, [r7, #16]
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	f023 030a 	bic.w	r3, r3, #10
 800a3f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a3f6:	697a      	ldr	r2, [r7, #20]
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	693a      	ldr	r2, [r7, #16]
 800a402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	697a      	ldr	r2, [r7, #20]
 800a408:	621a      	str	r2, [r3, #32]
}
 800a40a:	bf00      	nop
 800a40c:	371c      	adds	r7, #28
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr

0800a416 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a416:	b480      	push	{r7}
 800a418:	b087      	sub	sp, #28
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	60f8      	str	r0, [r7, #12]
 800a41e:	60b9      	str	r1, [r7, #8]
 800a420:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	6a1b      	ldr	r3, [r3, #32]
 800a426:	f023 0210 	bic.w	r2, r3, #16
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	699b      	ldr	r3, [r3, #24]
 800a432:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6a1b      	ldr	r3, [r3, #32]
 800a438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a440:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	031b      	lsls	r3, r3, #12
 800a446:	697a      	ldr	r2, [r7, #20]
 800a448:	4313      	orrs	r3, r2
 800a44a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a452:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	011b      	lsls	r3, r3, #4
 800a458:	693a      	ldr	r2, [r7, #16]
 800a45a:	4313      	orrs	r3, r2
 800a45c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	697a      	ldr	r2, [r7, #20]
 800a462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	693a      	ldr	r2, [r7, #16]
 800a468:	621a      	str	r2, [r3, #32]
}
 800a46a:	bf00      	nop
 800a46c:	371c      	adds	r7, #28
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr

0800a476 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a476:	b480      	push	{r7}
 800a478:	b085      	sub	sp, #20
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	6078      	str	r0, [r7, #4]
 800a47e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a48c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a48e:	683a      	ldr	r2, [r7, #0]
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	4313      	orrs	r3, r2
 800a494:	f043 0307 	orr.w	r3, r3, #7
 800a498:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	68fa      	ldr	r2, [r7, #12]
 800a49e:	609a      	str	r2, [r3, #8]
}
 800a4a0:	bf00      	nop
 800a4a2:	3714      	adds	r7, #20
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr

0800a4ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b087      	sub	sp, #28
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	60b9      	str	r1, [r7, #8]
 800a4b6:	607a      	str	r2, [r7, #4]
 800a4b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	689b      	ldr	r3, [r3, #8]
 800a4be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a4c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	021a      	lsls	r2, r3, #8
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	431a      	orrs	r2, r3
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	697a      	ldr	r2, [r7, #20]
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	697a      	ldr	r2, [r7, #20]
 800a4de:	609a      	str	r2, [r3, #8]
}
 800a4e0:	bf00      	nop
 800a4e2:	371c      	adds	r7, #28
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b087      	sub	sp, #28
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	f003 031f 	and.w	r3, r3, #31
 800a4fe:	2201      	movs	r2, #1
 800a500:	fa02 f303 	lsl.w	r3, r2, r3
 800a504:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	6a1a      	ldr	r2, [r3, #32]
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	43db      	mvns	r3, r3
 800a50e:	401a      	ands	r2, r3
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	6a1a      	ldr	r2, [r3, #32]
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	f003 031f 	and.w	r3, r3, #31
 800a51e:	6879      	ldr	r1, [r7, #4]
 800a520:	fa01 f303 	lsl.w	r3, r1, r3
 800a524:	431a      	orrs	r2, r3
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	621a      	str	r2, [r3, #32]
}
 800a52a:	bf00      	nop
 800a52c:	371c      	adds	r7, #28
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr
	...

0800a538 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a538:	b480      	push	{r7}
 800a53a:	b085      	sub	sp, #20
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d101      	bne.n	800a550 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a54c:	2302      	movs	r3, #2
 800a54e:	e068      	b.n	800a622 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2202      	movs	r2, #2
 800a55c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	689b      	ldr	r3, [r3, #8]
 800a56e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a2e      	ldr	r2, [pc, #184]	@ (800a630 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d004      	beq.n	800a584 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a2d      	ldr	r2, [pc, #180]	@ (800a634 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d108      	bne.n	800a596 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a58a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	68fa      	ldr	r2, [r7, #12]
 800a592:	4313      	orrs	r3, r2
 800a594:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a59c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	68fa      	ldr	r2, [r7, #12]
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	68fa      	ldr	r2, [r7, #12]
 800a5ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a1e      	ldr	r2, [pc, #120]	@ (800a630 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d01d      	beq.n	800a5f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5c2:	d018      	beq.n	800a5f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4a1b      	ldr	r2, [pc, #108]	@ (800a638 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d013      	beq.n	800a5f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4a1a      	ldr	r2, [pc, #104]	@ (800a63c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d00e      	beq.n	800a5f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a18      	ldr	r2, [pc, #96]	@ (800a640 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d009      	beq.n	800a5f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4a13      	ldr	r2, [pc, #76]	@ (800a634 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d004      	beq.n	800a5f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a14      	ldr	r2, [pc, #80]	@ (800a644 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d10c      	bne.n	800a610 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a5fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	68ba      	ldr	r2, [r7, #8]
 800a604:	4313      	orrs	r3, r2
 800a606:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	68ba      	ldr	r2, [r7, #8]
 800a60e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2201      	movs	r2, #1
 800a614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a620:	2300      	movs	r3, #0
}
 800a622:	4618      	mov	r0, r3
 800a624:	3714      	adds	r7, #20
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr
 800a62e:	bf00      	nop
 800a630:	40012c00 	.word	0x40012c00
 800a634:	40013400 	.word	0x40013400
 800a638:	40000400 	.word	0x40000400
 800a63c:	40000800 	.word	0x40000800
 800a640:	40000c00 	.word	0x40000c00
 800a644:	40014000 	.word	0x40014000

0800a648 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d101      	bne.n	800a65a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a656:	2301      	movs	r3, #1
 800a658:	e040      	b.n	800a6dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d106      	bne.n	800a670 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2200      	movs	r2, #0
 800a666:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f7fa f9a6 	bl	80049bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2224      	movs	r2, #36	@ 0x24
 800a674:	675a      	str	r2, [r3, #116]	@ 0x74

  __HAL_UART_DISABLE(huart);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f022 0201 	bic.w	r2, r2, #1
 800a684:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 fab8 	bl	800abfc <UART_SetConfig>
 800a68c:	4603      	mov	r3, r0
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d101      	bne.n	800a696 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a692:	2301      	movs	r3, #1
 800a694:	e022      	b.n	800a6dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d002      	beq.n	800a6a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 fe4c 	bl	800b33c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	685a      	ldr	r2, [r3, #4]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a6b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	689a      	ldr	r2, [r3, #8]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a6c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f042 0201 	orr.w	r2, r2, #1
 800a6d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 fed3 	bl	800b480 <UART_CheckIdleState>
 800a6da:	4603      	mov	r3, r0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3708      	adds	r7, #8
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b08a      	sub	sp, #40	@ 0x28
 800a6e8:	af02      	add	r7, sp, #8
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	603b      	str	r3, [r7, #0]
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6f8:	2b20      	cmp	r3, #32
 800a6fa:	d17f      	bne.n	800a7fc <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d002      	beq.n	800a708 <HAL_UART_Transmit+0x24>
 800a702:	88fb      	ldrh	r3, [r7, #6]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d101      	bne.n	800a70c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a708:	2301      	movs	r3, #1
 800a70a:	e078      	b.n	800a7fe <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a712:	2b01      	cmp	r3, #1
 800a714:	d101      	bne.n	800a71a <HAL_UART_Transmit+0x36>
 800a716:	2302      	movs	r3, #2
 800a718:	e071      	b.n	800a7fe <HAL_UART_Transmit+0x11a>
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2201      	movs	r2, #1
 800a71e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2200      	movs	r2, #0
 800a726:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2221      	movs	r2, #33	@ 0x21
 800a72c:	675a      	str	r2, [r3, #116]	@ 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800a72e:	f7fb ffad 	bl	800668c <HAL_GetTick>
 800a732:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	88fa      	ldrh	r2, [r7, #6]
 800a738:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	88fa      	ldrh	r2, [r7, #6]
 800a740:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a74c:	d108      	bne.n	800a760 <HAL_UART_Transmit+0x7c>
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	691b      	ldr	r3, [r3, #16]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d104      	bne.n	800a760 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800a756:	2300      	movs	r3, #0
 800a758:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	61bb      	str	r3, [r7, #24]
 800a75e:	e003      	b.n	800a768 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a764:	2300      	movs	r3, #0
 800a766:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2200      	movs	r2, #0
 800a76c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    while (huart->TxXferCount > 0U)
 800a770:	e02c      	b.n	800a7cc <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	9300      	str	r3, [sp, #0]
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	2200      	movs	r2, #0
 800a77a:	2180      	movs	r1, #128	@ 0x80
 800a77c:	68f8      	ldr	r0, [r7, #12]
 800a77e:	f000 fec4 	bl	800b50a <UART_WaitOnFlagUntilTimeout>
 800a782:	4603      	mov	r3, r0
 800a784:	2b00      	cmp	r3, #0
 800a786:	d001      	beq.n	800a78c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800a788:	2303      	movs	r3, #3
 800a78a:	e038      	b.n	800a7fe <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800a78c:	69fb      	ldr	r3, [r7, #28]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d10b      	bne.n	800a7aa <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	881a      	ldrh	r2, [r3, #0]
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a79e:	b292      	uxth	r2, r2
 800a7a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a7a2:	69bb      	ldr	r3, [r7, #24]
 800a7a4:	3302      	adds	r3, #2
 800a7a6:	61bb      	str	r3, [r7, #24]
 800a7a8:	e007      	b.n	800a7ba <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a7aa:	69fb      	ldr	r3, [r7, #28]
 800a7ac:	781a      	ldrb	r2, [r3, #0]
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a7b4:	69fb      	ldr	r3, [r7, #28]
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	3b01      	subs	r3, #1
 800a7c4:	b29a      	uxth	r2, r3
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d1cc      	bne.n	800a772 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	9300      	str	r3, [sp, #0]
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	2140      	movs	r1, #64	@ 0x40
 800a7e2:	68f8      	ldr	r0, [r7, #12]
 800a7e4:	f000 fe91 	bl	800b50a <UART_WaitOnFlagUntilTimeout>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d001      	beq.n	800a7f2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a7ee:	2303      	movs	r3, #3
 800a7f0:	e005      	b.n	800a7fe <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2220      	movs	r2, #32
 800a7f6:	675a      	str	r2, [r3, #116]	@ 0x74

    return HAL_OK;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	e000      	b.n	800a7fe <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800a7fc:	2302      	movs	r3, #2
  }
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3720      	adds	r7, #32
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
	...

0800a808 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a808:	b480      	push	{r7}
 800a80a:	b085      	sub	sp, #20
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	60b9      	str	r1, [r7, #8]
 800a812:	4613      	mov	r3, r2
 800a814:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a81a:	2b20      	cmp	r3, #32
 800a81c:	f040 808a 	bne.w	800a934 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d002      	beq.n	800a82c <HAL_UART_Receive_IT+0x24>
 800a826:	88fb      	ldrh	r3, [r7, #6]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d101      	bne.n	800a830 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	e082      	b.n	800a936 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a836:	2b01      	cmp	r3, #1
 800a838:	d101      	bne.n	800a83e <HAL_UART_Receive_IT+0x36>
 800a83a:	2302      	movs	r3, #2
 800a83c:	e07b      	b.n	800a936 <HAL_UART_Receive_IT+0x12e>
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2201      	movs	r2, #1
 800a842:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    huart->pRxBuffPtr  = pData;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	68ba      	ldr	r2, [r7, #8]
 800a84a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferSize  = Size;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	88fa      	ldrh	r2, [r7, #6]
 800a850:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	88fa      	ldrh	r2, [r7, #6]
 800a858:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    huart->RxISR       = NULL;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2200      	movs	r2, #0
 800a860:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a86a:	d10e      	bne.n	800a88a <HAL_UART_Receive_IT+0x82>
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	691b      	ldr	r3, [r3, #16]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d105      	bne.n	800a880 <HAL_UART_Receive_IT+0x78>
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a87a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a87e:	e02d      	b.n	800a8dc <HAL_UART_Receive_IT+0xd4>
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	22ff      	movs	r2, #255	@ 0xff
 800a884:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a888:	e028      	b.n	800a8dc <HAL_UART_Receive_IT+0xd4>
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d10d      	bne.n	800a8ae <HAL_UART_Receive_IT+0xa6>
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	691b      	ldr	r3, [r3, #16]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d104      	bne.n	800a8a4 <HAL_UART_Receive_IT+0x9c>
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	22ff      	movs	r2, #255	@ 0xff
 800a89e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a8a2:	e01b      	b.n	800a8dc <HAL_UART_Receive_IT+0xd4>
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	227f      	movs	r2, #127	@ 0x7f
 800a8a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a8ac:	e016      	b.n	800a8dc <HAL_UART_Receive_IT+0xd4>
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	689b      	ldr	r3, [r3, #8]
 800a8b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8b6:	d10d      	bne.n	800a8d4 <HAL_UART_Receive_IT+0xcc>
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	691b      	ldr	r3, [r3, #16]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d104      	bne.n	800a8ca <HAL_UART_Receive_IT+0xc2>
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	227f      	movs	r2, #127	@ 0x7f
 800a8c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a8c8:	e008      	b.n	800a8dc <HAL_UART_Receive_IT+0xd4>
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	223f      	movs	r2, #63	@ 0x3f
 800a8ce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a8d2:	e003      	b.n	800a8dc <HAL_UART_Receive_IT+0xd4>
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2222      	movs	r2, #34	@ 0x22
 800a8e6:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	689a      	ldr	r2, [r3, #8]
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f042 0201 	orr.w	r2, r2, #1
 800a8f6:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a900:	d107      	bne.n	800a912 <HAL_UART_Receive_IT+0x10a>
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	691b      	ldr	r3, [r3, #16]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d103      	bne.n	800a912 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	4a0d      	ldr	r2, [pc, #52]	@ (800a944 <HAL_UART_Receive_IT+0x13c>)
 800a90e:	661a      	str	r2, [r3, #96]	@ 0x60
 800a910:	e002      	b.n	800a918 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	4a0c      	ldr	r2, [pc, #48]	@ (800a948 <HAL_UART_Receive_IT+0x140>)
 800a916:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    __HAL_UNLOCK(huart);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2200      	movs	r2, #0
 800a91c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f442 7290 	orr.w	r2, r2, #288	@ 0x120
 800a92e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800a930:	2300      	movs	r3, #0
 800a932:	e000      	b.n	800a936 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800a934:	2302      	movs	r3, #2
  }
}
 800a936:	4618      	mov	r0, r3
 800a938:	3714      	adds	r7, #20
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr
 800a942:	bf00      	nop
 800a944:	0800b749 	.word	0x0800b749
 800a948:	0800b69f 	.word	0x0800b69f

0800a94c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b088      	sub	sp, #32
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	69db      	ldr	r3, [r3, #28]
 800a95a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	689b      	ldr	r3, [r3, #8]
 800a96a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a96c:	69fa      	ldr	r2, [r7, #28]
 800a96e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a972:	4013      	ands	r3, r2
 800a974:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d113      	bne.n	800a9a4 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a97c:	69fb      	ldr	r3, [r7, #28]
 800a97e:	f003 0320 	and.w	r3, r3, #32
 800a982:	2b00      	cmp	r3, #0
 800a984:	d00e      	beq.n	800a9a4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a986:	69bb      	ldr	r3, [r7, #24]
 800a988:	f003 0320 	and.w	r3, r3, #32
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d009      	beq.n	800a9a4 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a994:	2b00      	cmp	r3, #0
 800a996:	f000 8113 	beq.w	800abc0 <HAL_UART_IRQHandler+0x274>
      {
        huart->RxISR(huart);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	4798      	blx	r3
      }
      return;
 800a9a2:	e10d      	b.n	800abc0 <HAL_UART_IRQHandler+0x274>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	f000 80d6 	beq.w	800ab58 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	f003 0301 	and.w	r3, r3, #1
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d105      	bne.n	800a9c2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800a9b6:	69bb      	ldr	r3, [r7, #24]
 800a9b8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	f000 80cb 	beq.w	800ab58 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	f003 0301 	and.w	r3, r3, #1
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d00e      	beq.n	800a9ea <HAL_UART_IRQHandler+0x9e>
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d009      	beq.n	800a9ea <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a9e2:	f043 0201 	orr.w	r2, r3, #1
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a9ea:	69fb      	ldr	r3, [r7, #28]
 800a9ec:	f003 0302 	and.w	r3, r3, #2
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d00e      	beq.n	800aa12 <HAL_UART_IRQHandler+0xc6>
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	f003 0301 	and.w	r3, r3, #1
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d009      	beq.n	800aa12 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	2202      	movs	r2, #2
 800aa04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa0a:	f043 0204 	orr.w	r2, r3, #4
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa12:	69fb      	ldr	r3, [r7, #28]
 800aa14:	f003 0304 	and.w	r3, r3, #4
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d00e      	beq.n	800aa3a <HAL_UART_IRQHandler+0xee>
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	f003 0301 	and.w	r3, r3, #1
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d009      	beq.n	800aa3a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	2204      	movs	r2, #4
 800aa2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa32:	f043 0202 	orr.w	r2, r3, #2
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	67da      	str	r2, [r3, #124]	@ 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aa3a:	69fb      	ldr	r3, [r7, #28]
 800aa3c:	f003 0308 	and.w	r3, r3, #8
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d013      	beq.n	800aa6c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aa44:	69bb      	ldr	r3, [r7, #24]
 800aa46:	f003 0320 	and.w	r3, r3, #32
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d104      	bne.n	800aa58 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d009      	beq.n	800aa6c <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	2208      	movs	r2, #8
 800aa5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa64:	f043 0208 	orr.w	r2, r3, #8
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d00f      	beq.n	800aa96 <HAL_UART_IRQHandler+0x14a>
 800aa76:	69bb      	ldr	r3, [r7, #24]
 800aa78:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d00a      	beq.n	800aa96 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aa88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa8e:	f043 0220 	orr.w	r2, r3, #32
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	f000 8092 	beq.w	800abc4 <HAL_UART_IRQHandler+0x278>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800aaa0:	69fb      	ldr	r3, [r7, #28]
 800aaa2:	f003 0320 	and.w	r3, r3, #32
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00c      	beq.n	800aac4 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800aaaa:	69bb      	ldr	r3, [r7, #24]
 800aaac:	f003 0320 	and.w	r3, r3, #32
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d007      	beq.n	800aac4 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d003      	beq.n	800aac4 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aac8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	689b      	ldr	r3, [r3, #8]
 800aad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aad4:	2b40      	cmp	r3, #64	@ 0x40
 800aad6:	d004      	beq.n	800aae2 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d031      	beq.n	800ab46 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f000 fd8c 	bl	800b600 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aaf2:	2b40      	cmp	r3, #64	@ 0x40
 800aaf4:	d123      	bne.n	800ab3e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	689a      	ldr	r2, [r3, #8]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ab04:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d013      	beq.n	800ab36 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab12:	4a2f      	ldr	r2, [pc, #188]	@ (800abd0 <HAL_UART_IRQHandler+0x284>)
 800ab14:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7fb fef5 	bl	800690a <HAL_DMA_Abort_IT>
 800ab20:	4603      	mov	r3, r0
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d016      	beq.n	800ab54 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800ab30:	4610      	mov	r0, r2
 800ab32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab34:	e00e      	b.n	800ab54 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 f856 	bl	800abe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab3c:	e00a      	b.n	800ab54 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 f852 	bl	800abe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab44:	e006      	b.n	800ab54 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 f84e 	bl	800abe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	67da      	str	r2, [r3, #124]	@ 0x7c
      }
    }
    return;
 800ab52:	e037      	b.n	800abc4 <HAL_UART_IRQHandler+0x278>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab54:	bf00      	nop
    return;
 800ab56:	e035      	b.n	800abc4 <HAL_UART_IRQHandler+0x278>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ab58:	69fb      	ldr	r3, [r7, #28]
 800ab5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d00d      	beq.n	800ab7e <HAL_UART_IRQHandler+0x232>
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d008      	beq.n	800ab7e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ab74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 fe3b 	bl	800b7f2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ab7c:	e025      	b.n	800abca <HAL_UART_IRQHandler+0x27e>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d00d      	beq.n	800aba4 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ab88:	69bb      	ldr	r3, [r7, #24]
 800ab8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d008      	beq.n	800aba4 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d016      	beq.n	800abc8 <HAL_UART_IRQHandler+0x27c>
    {
      huart->TxISR(huart);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	4798      	blx	r3
    }
    return;
 800aba2:	e011      	b.n	800abc8 <HAL_UART_IRQHandler+0x27c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aba4:	69fb      	ldr	r3, [r7, #28]
 800aba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d00d      	beq.n	800abca <HAL_UART_IRQHandler+0x27e>
 800abae:	69bb      	ldr	r3, [r7, #24]
 800abb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d008      	beq.n	800abca <HAL_UART_IRQHandler+0x27e>
  {
    UART_EndTransmit_IT(huart);
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 fd57 	bl	800b66c <UART_EndTransmit_IT>
    return;
 800abbe:	e004      	b.n	800abca <HAL_UART_IRQHandler+0x27e>
      return;
 800abc0:	bf00      	nop
 800abc2:	e002      	b.n	800abca <HAL_UART_IRQHandler+0x27e>
    return;
 800abc4:	bf00      	nop
 800abc6:	e000      	b.n	800abca <HAL_UART_IRQHandler+0x27e>
    return;
 800abc8:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800abca:	3720      	adds	r7, #32
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}
 800abd0:	0800b641 	.word	0x0800b641

0800abd4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b083      	sub	sp, #12
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800abdc:	bf00      	nop
 800abde:	370c      	adds	r7, #12
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr

0800abe8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800abe8:	b480      	push	{r7}
 800abea:	b083      	sub	sp, #12
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800abf0:	bf00      	nop
 800abf2:	370c      	adds	r7, #12
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800abfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac00:	b0a0      	sub	sp, #128	@ 0x80
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	65f8      	str	r0, [r7, #92]	@ 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800ac06:	2300      	movs	r3, #0
 800ac08:	677b      	str	r3, [r7, #116]	@ 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800ac10:	2300      	movs	r3, #0
 800ac12:	66fb      	str	r3, [r7, #108]	@ 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ac14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac16:	689a      	ldr	r2, [r3, #8]
 800ac18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac1a:	691b      	ldr	r3, [r3, #16]
 800ac1c:	431a      	orrs	r2, r3
 800ac1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac20:	695b      	ldr	r3, [r3, #20]
 800ac22:	431a      	orrs	r2, r3
 800ac24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac26:	69db      	ldr	r3, [r3, #28]
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ac2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	49a4      	ldr	r1, [pc, #656]	@ (800aec4 <UART_SetConfig+0x2c8>)
 800ac34:	4019      	ands	r1, r3
 800ac36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac38:	681a      	ldr	r2, [r3, #0]
 800ac3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ac3c:	430b      	orrs	r3, r1
 800ac3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ac4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac4c:	68d9      	ldr	r1, [r3, #12]
 800ac4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac50:	681a      	ldr	r2, [r3, #0]
 800ac52:	ea40 0301 	orr.w	r3, r0, r1
 800ac56:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ac58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac5a:	699b      	ldr	r3, [r3, #24]
 800ac5c:	67fb      	str	r3, [r7, #124]	@ 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ac5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	4b99      	ldr	r3, [pc, #612]	@ (800aec8 <UART_SetConfig+0x2cc>)
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d004      	beq.n	800ac72 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ac68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac6a:	6a1a      	ldr	r2, [r3, #32]
 800ac6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	67fb      	str	r3, [r7, #124]	@ 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800ac7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ac82:	430b      	orrs	r3, r1
 800ac84:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	4b90      	ldr	r3, [pc, #576]	@ (800aecc <UART_SetConfig+0x2d0>)
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d125      	bne.n	800acdc <UART_SetConfig+0xe0>
 800ac90:	4b8f      	ldr	r3, [pc, #572]	@ (800aed0 <UART_SetConfig+0x2d4>)
 800ac92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac96:	f003 0303 	and.w	r3, r3, #3
 800ac9a:	2b03      	cmp	r3, #3
 800ac9c:	d81a      	bhi.n	800acd4 <UART_SetConfig+0xd8>
 800ac9e:	a201      	add	r2, pc, #4	@ (adr r2, 800aca4 <UART_SetConfig+0xa8>)
 800aca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aca4:	0800acb5 	.word	0x0800acb5
 800aca8:	0800acc5 	.word	0x0800acc5
 800acac:	0800acbd 	.word	0x0800acbd
 800acb0:	0800accd 	.word	0x0800accd
 800acb4:	2301      	movs	r3, #1
 800acb6:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800acba:	e116      	b.n	800aeea <UART_SetConfig+0x2ee>
 800acbc:	2302      	movs	r3, #2
 800acbe:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800acc2:	e112      	b.n	800aeea <UART_SetConfig+0x2ee>
 800acc4:	2304      	movs	r3, #4
 800acc6:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800acca:	e10e      	b.n	800aeea <UART_SetConfig+0x2ee>
 800accc:	2308      	movs	r3, #8
 800acce:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800acd2:	e10a      	b.n	800aeea <UART_SetConfig+0x2ee>
 800acd4:	2310      	movs	r3, #16
 800acd6:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800acda:	e106      	b.n	800aeea <UART_SetConfig+0x2ee>
 800acdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800acde:	681a      	ldr	r2, [r3, #0]
 800ace0:	4b7c      	ldr	r3, [pc, #496]	@ (800aed4 <UART_SetConfig+0x2d8>)
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d138      	bne.n	800ad58 <UART_SetConfig+0x15c>
 800ace6:	4b7a      	ldr	r3, [pc, #488]	@ (800aed0 <UART_SetConfig+0x2d4>)
 800ace8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acec:	f003 030c 	and.w	r3, r3, #12
 800acf0:	2b0c      	cmp	r3, #12
 800acf2:	d82d      	bhi.n	800ad50 <UART_SetConfig+0x154>
 800acf4:	a201      	add	r2, pc, #4	@ (adr r2, 800acfc <UART_SetConfig+0x100>)
 800acf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acfa:	bf00      	nop
 800acfc:	0800ad31 	.word	0x0800ad31
 800ad00:	0800ad51 	.word	0x0800ad51
 800ad04:	0800ad51 	.word	0x0800ad51
 800ad08:	0800ad51 	.word	0x0800ad51
 800ad0c:	0800ad41 	.word	0x0800ad41
 800ad10:	0800ad51 	.word	0x0800ad51
 800ad14:	0800ad51 	.word	0x0800ad51
 800ad18:	0800ad51 	.word	0x0800ad51
 800ad1c:	0800ad39 	.word	0x0800ad39
 800ad20:	0800ad51 	.word	0x0800ad51
 800ad24:	0800ad51 	.word	0x0800ad51
 800ad28:	0800ad51 	.word	0x0800ad51
 800ad2c:	0800ad49 	.word	0x0800ad49
 800ad30:	2300      	movs	r3, #0
 800ad32:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800ad36:	e0d8      	b.n	800aeea <UART_SetConfig+0x2ee>
 800ad38:	2302      	movs	r3, #2
 800ad3a:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800ad3e:	e0d4      	b.n	800aeea <UART_SetConfig+0x2ee>
 800ad40:	2304      	movs	r3, #4
 800ad42:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800ad46:	e0d0      	b.n	800aeea <UART_SetConfig+0x2ee>
 800ad48:	2308      	movs	r3, #8
 800ad4a:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800ad4e:	e0cc      	b.n	800aeea <UART_SetConfig+0x2ee>
 800ad50:	2310      	movs	r3, #16
 800ad52:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800ad56:	e0c8      	b.n	800aeea <UART_SetConfig+0x2ee>
 800ad58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad5a:	681a      	ldr	r2, [r3, #0]
 800ad5c:	4b5e      	ldr	r3, [pc, #376]	@ (800aed8 <UART_SetConfig+0x2dc>)
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d125      	bne.n	800adae <UART_SetConfig+0x1b2>
 800ad62:	4b5b      	ldr	r3, [pc, #364]	@ (800aed0 <UART_SetConfig+0x2d4>)
 800ad64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad68:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ad6c:	2b30      	cmp	r3, #48	@ 0x30
 800ad6e:	d016      	beq.n	800ad9e <UART_SetConfig+0x1a2>
 800ad70:	2b30      	cmp	r3, #48	@ 0x30
 800ad72:	d818      	bhi.n	800ada6 <UART_SetConfig+0x1aa>
 800ad74:	2b20      	cmp	r3, #32
 800ad76:	d00a      	beq.n	800ad8e <UART_SetConfig+0x192>
 800ad78:	2b20      	cmp	r3, #32
 800ad7a:	d814      	bhi.n	800ada6 <UART_SetConfig+0x1aa>
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d002      	beq.n	800ad86 <UART_SetConfig+0x18a>
 800ad80:	2b10      	cmp	r3, #16
 800ad82:	d008      	beq.n	800ad96 <UART_SetConfig+0x19a>
 800ad84:	e00f      	b.n	800ada6 <UART_SetConfig+0x1aa>
 800ad86:	2300      	movs	r3, #0
 800ad88:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800ad8c:	e0ad      	b.n	800aeea <UART_SetConfig+0x2ee>
 800ad8e:	2302      	movs	r3, #2
 800ad90:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800ad94:	e0a9      	b.n	800aeea <UART_SetConfig+0x2ee>
 800ad96:	2304      	movs	r3, #4
 800ad98:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800ad9c:	e0a5      	b.n	800aeea <UART_SetConfig+0x2ee>
 800ad9e:	2308      	movs	r3, #8
 800ada0:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800ada4:	e0a1      	b.n	800aeea <UART_SetConfig+0x2ee>
 800ada6:	2310      	movs	r3, #16
 800ada8:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800adac:	e09d      	b.n	800aeea <UART_SetConfig+0x2ee>
 800adae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	4b4a      	ldr	r3, [pc, #296]	@ (800aedc <UART_SetConfig+0x2e0>)
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d125      	bne.n	800ae04 <UART_SetConfig+0x208>
 800adb8:	4b45      	ldr	r3, [pc, #276]	@ (800aed0 <UART_SetConfig+0x2d4>)
 800adba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800adbe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800adc2:	2bc0      	cmp	r3, #192	@ 0xc0
 800adc4:	d016      	beq.n	800adf4 <UART_SetConfig+0x1f8>
 800adc6:	2bc0      	cmp	r3, #192	@ 0xc0
 800adc8:	d818      	bhi.n	800adfc <UART_SetConfig+0x200>
 800adca:	2b80      	cmp	r3, #128	@ 0x80
 800adcc:	d00a      	beq.n	800ade4 <UART_SetConfig+0x1e8>
 800adce:	2b80      	cmp	r3, #128	@ 0x80
 800add0:	d814      	bhi.n	800adfc <UART_SetConfig+0x200>
 800add2:	2b00      	cmp	r3, #0
 800add4:	d002      	beq.n	800addc <UART_SetConfig+0x1e0>
 800add6:	2b40      	cmp	r3, #64	@ 0x40
 800add8:	d008      	beq.n	800adec <UART_SetConfig+0x1f0>
 800adda:	e00f      	b.n	800adfc <UART_SetConfig+0x200>
 800addc:	2300      	movs	r3, #0
 800adde:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800ade2:	e082      	b.n	800aeea <UART_SetConfig+0x2ee>
 800ade4:	2302      	movs	r3, #2
 800ade6:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800adea:	e07e      	b.n	800aeea <UART_SetConfig+0x2ee>
 800adec:	2304      	movs	r3, #4
 800adee:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800adf2:	e07a      	b.n	800aeea <UART_SetConfig+0x2ee>
 800adf4:	2308      	movs	r3, #8
 800adf6:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800adfa:	e076      	b.n	800aeea <UART_SetConfig+0x2ee>
 800adfc:	2310      	movs	r3, #16
 800adfe:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800ae02:	e072      	b.n	800aeea <UART_SetConfig+0x2ee>
 800ae04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	4b35      	ldr	r3, [pc, #212]	@ (800aee0 <UART_SetConfig+0x2e4>)
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	d12a      	bne.n	800ae64 <UART_SetConfig+0x268>
 800ae0e:	4b30      	ldr	r3, [pc, #192]	@ (800aed0 <UART_SetConfig+0x2d4>)
 800ae10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ae18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae1c:	d01a      	beq.n	800ae54 <UART_SetConfig+0x258>
 800ae1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae22:	d81b      	bhi.n	800ae5c <UART_SetConfig+0x260>
 800ae24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae28:	d00c      	beq.n	800ae44 <UART_SetConfig+0x248>
 800ae2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae2e:	d815      	bhi.n	800ae5c <UART_SetConfig+0x260>
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d003      	beq.n	800ae3c <UART_SetConfig+0x240>
 800ae34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae38:	d008      	beq.n	800ae4c <UART_SetConfig+0x250>
 800ae3a:	e00f      	b.n	800ae5c <UART_SetConfig+0x260>
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800ae42:	e052      	b.n	800aeea <UART_SetConfig+0x2ee>
 800ae44:	2302      	movs	r3, #2
 800ae46:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800ae4a:	e04e      	b.n	800aeea <UART_SetConfig+0x2ee>
 800ae4c:	2304      	movs	r3, #4
 800ae4e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800ae52:	e04a      	b.n	800aeea <UART_SetConfig+0x2ee>
 800ae54:	2308      	movs	r3, #8
 800ae56:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800ae5a:	e046      	b.n	800aeea <UART_SetConfig+0x2ee>
 800ae5c:	2310      	movs	r3, #16
 800ae5e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800ae62:	e042      	b.n	800aeea <UART_SetConfig+0x2ee>
 800ae64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae66:	681a      	ldr	r2, [r3, #0]
 800ae68:	4b17      	ldr	r3, [pc, #92]	@ (800aec8 <UART_SetConfig+0x2cc>)
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d13a      	bne.n	800aee4 <UART_SetConfig+0x2e8>
 800ae6e:	4b18      	ldr	r3, [pc, #96]	@ (800aed0 <UART_SetConfig+0x2d4>)
 800ae70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae74:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ae78:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ae7c:	d01a      	beq.n	800aeb4 <UART_SetConfig+0x2b8>
 800ae7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ae82:	d81b      	bhi.n	800aebc <UART_SetConfig+0x2c0>
 800ae84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae88:	d00c      	beq.n	800aea4 <UART_SetConfig+0x2a8>
 800ae8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae8e:	d815      	bhi.n	800aebc <UART_SetConfig+0x2c0>
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d003      	beq.n	800ae9c <UART_SetConfig+0x2a0>
 800ae94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae98:	d008      	beq.n	800aeac <UART_SetConfig+0x2b0>
 800ae9a:	e00f      	b.n	800aebc <UART_SetConfig+0x2c0>
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800aea2:	e022      	b.n	800aeea <UART_SetConfig+0x2ee>
 800aea4:	2302      	movs	r3, #2
 800aea6:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800aeaa:	e01e      	b.n	800aeea <UART_SetConfig+0x2ee>
 800aeac:	2304      	movs	r3, #4
 800aeae:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800aeb2:	e01a      	b.n	800aeea <UART_SetConfig+0x2ee>
 800aeb4:	2308      	movs	r3, #8
 800aeb6:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800aeba:	e016      	b.n	800aeea <UART_SetConfig+0x2ee>
 800aebc:	2310      	movs	r3, #16
 800aebe:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800aec2:	e012      	b.n	800aeea <UART_SetConfig+0x2ee>
 800aec4:	efff69f3 	.word	0xefff69f3
 800aec8:	40008000 	.word	0x40008000
 800aecc:	40013800 	.word	0x40013800
 800aed0:	40021000 	.word	0x40021000
 800aed4:	40004400 	.word	0x40004400
 800aed8:	40004800 	.word	0x40004800
 800aedc:	40004c00 	.word	0x40004c00
 800aee0:	40005000 	.word	0x40005000
 800aee4:	2310      	movs	r3, #16
 800aee6:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aeea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aeec:	681a      	ldr	r2, [r3, #0]
 800aeee:	4bb6      	ldr	r3, [pc, #728]	@ (800b1c8 <UART_SetConfig+0x5cc>)
 800aef0:	429a      	cmp	r2, r3
 800aef2:	f040 810c 	bne.w	800b10e <UART_SetConfig+0x512>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aef6:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800aefa:	2b08      	cmp	r3, #8
 800aefc:	d823      	bhi.n	800af46 <UART_SetConfig+0x34a>
 800aefe:	a201      	add	r2, pc, #4	@ (adr r2, 800af04 <UART_SetConfig+0x308>)
 800af00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af04:	0800af29 	.word	0x0800af29
 800af08:	0800af47 	.word	0x0800af47
 800af0c:	0800af31 	.word	0x0800af31
 800af10:	0800af47 	.word	0x0800af47
 800af14:	0800af37 	.word	0x0800af37
 800af18:	0800af47 	.word	0x0800af47
 800af1c:	0800af47 	.word	0x0800af47
 800af20:	0800af47 	.word	0x0800af47
 800af24:	0800af3f 	.word	0x0800af3f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800af28:	f7fd fb5a 	bl	80085e0 <HAL_RCC_GetPCLK1Freq>
 800af2c:	66f8      	str	r0, [r7, #108]	@ 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 800af2e:	e00e      	b.n	800af4e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800af30:	4ba6      	ldr	r3, [pc, #664]	@ (800b1cc <UART_SetConfig+0x5d0>)
 800af32:	66fb      	str	r3, [r7, #108]	@ 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 800af34:	e00b      	b.n	800af4e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800af36:	f7fd fabb 	bl	80084b0 <HAL_RCC_GetSysClockFreq>
 800af3a:	66f8      	str	r0, [r7, #108]	@ 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 800af3c:	e007      	b.n	800af4e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800af3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af42:	66fb      	str	r3, [r7, #108]	@ 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 800af44:	e003      	b.n	800af4e <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 800af46:	2301      	movs	r3, #1
 800af48:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
        break;
 800af4c:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800af4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af50:	2b00      	cmp	r3, #0
 800af52:	f000 81e5 	beq.w	800b320 <UART_SetConfig+0x724>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af58:	685a      	ldr	r2, [r3, #4]
 800af5a:	4613      	mov	r3, r2
 800af5c:	005b      	lsls	r3, r3, #1
 800af5e:	441a      	add	r2, r3
 800af60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af62:	4293      	cmp	r3, r2
 800af64:	d305      	bcc.n	800af72 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800af66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af68:	685b      	ldr	r3, [r3, #4]
 800af6a:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af6e:	4293      	cmp	r3, r2
 800af70:	d903      	bls.n	800af7a <UART_SetConfig+0x37e>
      {
        ret = HAL_ERROR;
 800af72:	2301      	movs	r3, #1
 800af74:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 800af78:	e1d2      	b.n	800b320 <UART_SetConfig+0x724>
      }
      else
      {
        switch (clocksource)
 800af7a:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800af7e:	2b08      	cmp	r3, #8
 800af80:	f200 80b0 	bhi.w	800b0e4 <UART_SetConfig+0x4e8>
 800af84:	a201      	add	r2, pc, #4	@ (adr r2, 800af8c <UART_SetConfig+0x390>)
 800af86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af8a:	bf00      	nop
 800af8c:	0800afb1 	.word	0x0800afb1
 800af90:	0800b0e5 	.word	0x0800b0e5
 800af94:	0800b011 	.word	0x0800b011
 800af98:	0800b0e5 	.word	0x0800b0e5
 800af9c:	0800b051 	.word	0x0800b051
 800afa0:	0800b0e5 	.word	0x0800b0e5
 800afa4:	0800b0e5 	.word	0x0800b0e5
 800afa8:	0800b0e5 	.word	0x0800b0e5
 800afac:	0800b0ad 	.word	0x0800b0ad
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800afb0:	f7fd fb16 	bl	80085e0 <HAL_RCC_GetPCLK1Freq>
 800afb4:	66b8      	str	r0, [r7, #104]	@ 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800afb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800afb8:	2200      	movs	r2, #0
 800afba:	4698      	mov	r8, r3
 800afbc:	4691      	mov	r9, r2
 800afbe:	f04f 0200 	mov.w	r2, #0
 800afc2:	f04f 0300 	mov.w	r3, #0
 800afc6:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800afca:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 800afce:	ea4f 2208 	mov.w	r2, r8, lsl #8
 800afd2:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800afd4:	6849      	ldr	r1, [r1, #4]
 800afd6:	0849      	lsrs	r1, r1, #1
 800afd8:	2000      	movs	r0, #0
 800afda:	6539      	str	r1, [r7, #80]	@ 0x50
 800afdc:	6578      	str	r0, [r7, #84]	@ 0x54
 800afde:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800afe2:	4621      	mov	r1, r4
 800afe4:	1851      	adds	r1, r2, r1
 800afe6:	64b9      	str	r1, [r7, #72]	@ 0x48
 800afe8:	4629      	mov	r1, r5
 800afea:	eb43 0101 	adc.w	r1, r3, r1
 800afee:	64f9      	str	r1, [r7, #76]	@ 0x4c
 800aff0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	2200      	movs	r2, #0
 800aff6:	643b      	str	r3, [r7, #64]	@ 0x40
 800aff8:	647a      	str	r2, [r7, #68]	@ 0x44
 800affa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800affe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800b002:	f7f5 fe21 	bl	8000c48 <__aeabi_uldivmod>
 800b006:	4602      	mov	r2, r0
 800b008:	460b      	mov	r3, r1
 800b00a:	4613      	mov	r3, r2
 800b00c:	677b      	str	r3, [r7, #116]	@ 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 800b00e:	e06d      	b.n	800b0ec <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800b010:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	085b      	lsrs	r3, r3, #1
 800b016:	2200      	movs	r2, #0
 800b018:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b01a:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800b01c:	4b6c      	ldr	r3, [pc, #432]	@ (800b1d0 <UART_SetConfig+0x5d4>)
 800b01e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800b022:	4602      	mov	r2, r0
 800b024:	18d3      	adds	r3, r2, r3
 800b026:	633b      	str	r3, [r7, #48]	@ 0x30
 800b028:	460b      	mov	r3, r1
 800b02a:	f143 0300 	adc.w	r3, r3, #0
 800b02e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b030:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	2200      	movs	r2, #0
 800b036:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b038:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b03a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b03e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800b042:	f7f5 fe01 	bl	8000c48 <__aeabi_uldivmod>
 800b046:	4602      	mov	r2, r0
 800b048:	460b      	mov	r3, r1
 800b04a:	4613      	mov	r3, r2
 800b04c:	677b      	str	r3, [r7, #116]	@ 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 800b04e:	e04d      	b.n	800b0ec <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800b050:	f7fd fa2e 	bl	80084b0 <HAL_RCC_GetSysClockFreq>
 800b054:	66b8      	str	r0, [r7, #104]	@ 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b056:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b058:	2200      	movs	r2, #0
 800b05a:	461c      	mov	r4, r3
 800b05c:	4615      	mov	r5, r2
 800b05e:	f04f 0200 	mov.w	r2, #0
 800b062:	f04f 0300 	mov.w	r3, #0
 800b066:	022b      	lsls	r3, r5, #8
 800b068:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800b06c:	0222      	lsls	r2, r4, #8
 800b06e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800b070:	6849      	ldr	r1, [r1, #4]
 800b072:	0849      	lsrs	r1, r1, #1
 800b074:	2000      	movs	r0, #0
 800b076:	6239      	str	r1, [r7, #32]
 800b078:	6278      	str	r0, [r7, #36]	@ 0x24
 800b07a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800b07e:	4621      	mov	r1, r4
 800b080:	1851      	adds	r1, r2, r1
 800b082:	61b9      	str	r1, [r7, #24]
 800b084:	4629      	mov	r1, r5
 800b086:	eb43 0101 	adc.w	r1, r3, r1
 800b08a:	61f9      	str	r1, [r7, #28]
 800b08c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	613b      	str	r3, [r7, #16]
 800b094:	617a      	str	r2, [r7, #20]
 800b096:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b09a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b09e:	f7f5 fdd3 	bl	8000c48 <__aeabi_uldivmod>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	4613      	mov	r3, r2
 800b0a8:	677b      	str	r3, [r7, #116]	@ 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 800b0aa:	e01f      	b.n	800b0ec <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800b0ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	085b      	lsrs	r3, r3, #1
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	469a      	mov	sl, r3
 800b0b6:	4693      	mov	fp, r2
 800b0b8:	f51a 0300 	adds.w	r3, sl, #8388608	@ 0x800000
 800b0bc:	60bb      	str	r3, [r7, #8]
 800b0be:	f14b 0300 	adc.w	r3, fp, #0
 800b0c2:	60fb      	str	r3, [r7, #12]
 800b0c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	603b      	str	r3, [r7, #0]
 800b0cc:	607a      	str	r2, [r7, #4]
 800b0ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b0d6:	f7f5 fdb7 	bl	8000c48 <__aeabi_uldivmod>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	460b      	mov	r3, r1
 800b0de:	4613      	mov	r3, r2
 800b0e0:	677b      	str	r3, [r7, #116]	@ 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 800b0e2:	e003      	b.n	800b0ec <UART_SetConfig+0x4f0>
          default:
            ret = HAL_ERROR;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
            break;
 800b0ea:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b0ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b0ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b0f2:	d308      	bcc.n	800b106 <UART_SetConfig+0x50a>
 800b0f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b0f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b0fa:	d204      	bcs.n	800b106 <UART_SetConfig+0x50a>
        {
          huart->Instance->BRR = usartdiv;
 800b0fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800b102:	60da      	str	r2, [r3, #12]
 800b104:	e10c      	b.n	800b320 <UART_SetConfig+0x724>
        }
        else
        {
          ret = HAL_ERROR;
 800b106:	2301      	movs	r3, #1
 800b108:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 800b10c:	e108      	b.n	800b320 <UART_SetConfig+0x724>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b10e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b110:	69db      	ldr	r3, [r3, #28]
 800b112:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b116:	f040 808f 	bne.w	800b238 <UART_SetConfig+0x63c>
  {
    switch (clocksource)
 800b11a:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800b11e:	2b08      	cmp	r3, #8
 800b120:	d864      	bhi.n	800b1ec <UART_SetConfig+0x5f0>
 800b122:	a201      	add	r2, pc, #4	@ (adr r2, 800b128 <UART_SetConfig+0x52c>)
 800b124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b128:	0800b14d 	.word	0x0800b14d
 800b12c:	0800b16d 	.word	0x0800b16d
 800b130:	0800b18d 	.word	0x0800b18d
 800b134:	0800b1ed 	.word	0x0800b1ed
 800b138:	0800b1a9 	.word	0x0800b1a9
 800b13c:	0800b1ed 	.word	0x0800b1ed
 800b140:	0800b1ed 	.word	0x0800b1ed
 800b144:	0800b1ed 	.word	0x0800b1ed
 800b148:	0800b1d5 	.word	0x0800b1d5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b14c:	f7fd fa48 	bl	80085e0 <HAL_RCC_GetPCLK1Freq>
 800b150:	66b8      	str	r0, [r7, #104]	@ 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b152:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b154:	005a      	lsls	r2, r3, #1
 800b156:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	085b      	lsrs	r3, r3, #1
 800b15c:	441a      	add	r2, r3
 800b15e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	fbb2 f3f3 	udiv	r3, r2, r3
 800b166:	b29b      	uxth	r3, r3
 800b168:	677b      	str	r3, [r7, #116]	@ 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800b16a:	e043      	b.n	800b1f4 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b16c:	f7fd fa4e 	bl	800860c <HAL_RCC_GetPCLK2Freq>
 800b170:	66b8      	str	r0, [r7, #104]	@ 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b172:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b174:	005a      	lsls	r2, r3, #1
 800b176:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	085b      	lsrs	r3, r3, #1
 800b17c:	441a      	add	r2, r3
 800b17e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	fbb2 f3f3 	udiv	r3, r2, r3
 800b186:	b29b      	uxth	r3, r3
 800b188:	677b      	str	r3, [r7, #116]	@ 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800b18a:	e033      	b.n	800b1f4 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b18c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	085b      	lsrs	r3, r3, #1
 800b192:	f103 73f4 	add.w	r3, r3, #31981568	@ 0x1e80000
 800b196:	f503 4390 	add.w	r3, r3, #18432	@ 0x4800
 800b19a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b19c:	6852      	ldr	r2, [r2, #4]
 800b19e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	677b      	str	r3, [r7, #116]	@ 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800b1a6:	e025      	b.n	800b1f4 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b1a8:	f7fd f982 	bl	80084b0 <HAL_RCC_GetSysClockFreq>
 800b1ac:	66b8      	str	r0, [r7, #104]	@ 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b1ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b1b0:	005a      	lsls	r2, r3, #1
 800b1b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	085b      	lsrs	r3, r3, #1
 800b1b8:	441a      	add	r2, r3
 800b1ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	677b      	str	r3, [r7, #116]	@ 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800b1c6:	e015      	b.n	800b1f4 <UART_SetConfig+0x5f8>
 800b1c8:	40008000 	.word	0x40008000
 800b1cc:	00f42400 	.word	0x00f42400
 800b1d0:	f4240000 	.word	0xf4240000
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b1d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	085b      	lsrs	r3, r3, #1
 800b1da:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 800b1de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	677b      	str	r3, [r7, #116]	@ 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800b1ea:	e003      	b.n	800b1f4 <UART_SetConfig+0x5f8>
      default:
        ret = HAL_ERROR;
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
        break;
 800b1f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b1f6:	2b0f      	cmp	r3, #15
 800b1f8:	d91a      	bls.n	800b230 <UART_SetConfig+0x634>
 800b1fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b1fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b200:	d216      	bcs.n	800b230 <UART_SetConfig+0x634>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b202:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b204:	b29b      	uxth	r3, r3
 800b206:	f023 030f 	bic.w	r3, r3, #15
 800b20a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b20e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b210:	085b      	lsrs	r3, r3, #1
 800b212:	b29b      	uxth	r3, r3
 800b214:	f003 0307 	and.w	r3, r3, #7
 800b218:	b29a      	uxth	r2, r3
 800b21a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800b21e:	4313      	orrs	r3, r2
 800b220:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
      huart->Instance->BRR = brrtemp;
 800b224:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 800b22c:	60da      	str	r2, [r3, #12]
 800b22e:	e077      	b.n	800b320 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 800b230:	2301      	movs	r3, #1
 800b232:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 800b236:	e073      	b.n	800b320 <UART_SetConfig+0x724>
    }
  }
  else
  {
    switch (clocksource)
 800b238:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800b23c:	2b08      	cmp	r3, #8
 800b23e:	d85c      	bhi.n	800b2fa <UART_SetConfig+0x6fe>
 800b240:	a201      	add	r2, pc, #4	@ (adr r2, 800b248 <UART_SetConfig+0x64c>)
 800b242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b246:	bf00      	nop
 800b248:	0800b26d 	.word	0x0800b26d
 800b24c:	0800b28b 	.word	0x0800b28b
 800b250:	0800b2a9 	.word	0x0800b2a9
 800b254:	0800b2fb 	.word	0x0800b2fb
 800b258:	0800b2c5 	.word	0x0800b2c5
 800b25c:	0800b2fb 	.word	0x0800b2fb
 800b260:	0800b2fb 	.word	0x0800b2fb
 800b264:	0800b2fb 	.word	0x0800b2fb
 800b268:	0800b2e3 	.word	0x0800b2e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b26c:	f7fd f9b8 	bl	80085e0 <HAL_RCC_GetPCLK1Freq>
 800b270:	66b8      	str	r0, [r7, #104]	@ 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b272:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b274:	685b      	ldr	r3, [r3, #4]
 800b276:	085a      	lsrs	r2, r3, #1
 800b278:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b27a:	441a      	add	r2, r3
 800b27c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	fbb2 f3f3 	udiv	r3, r2, r3
 800b284:	b29b      	uxth	r3, r3
 800b286:	677b      	str	r3, [r7, #116]	@ 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800b288:	e03b      	b.n	800b302 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b28a:	f7fd f9bf 	bl	800860c <HAL_RCC_GetPCLK2Freq>
 800b28e:	66b8      	str	r0, [r7, #104]	@ 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b290:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	085a      	lsrs	r2, r3, #1
 800b296:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b298:	441a      	add	r2, r3
 800b29a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2a2:	b29b      	uxth	r3, r3
 800b2a4:	677b      	str	r3, [r7, #116]	@ 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800b2a6:	e02c      	b.n	800b302 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b2a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	085b      	lsrs	r3, r3, #1
 800b2ae:	f503 0374 	add.w	r3, r3, #15990784	@ 0xf40000
 800b2b2:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 800b2b6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b2b8:	6852      	ldr	r2, [r2, #4]
 800b2ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2be:	b29b      	uxth	r3, r3
 800b2c0:	677b      	str	r3, [r7, #116]	@ 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800b2c2:	e01e      	b.n	800b302 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b2c4:	f7fd f8f4 	bl	80084b0 <HAL_RCC_GetSysClockFreq>
 800b2c8:	66b8      	str	r0, [r7, #104]	@ 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b2ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	085a      	lsrs	r2, r3, #1
 800b2d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b2d2:	441a      	add	r2, r3
 800b2d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2dc:	b29b      	uxth	r3, r3
 800b2de:	677b      	str	r3, [r7, #116]	@ 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800b2e0:	e00f      	b.n	800b302 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b2e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	085b      	lsrs	r3, r3, #1
 800b2e8:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 800b2ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2f4:	b29b      	uxth	r3, r3
 800b2f6:	677b      	str	r3, [r7, #116]	@ 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800b2f8:	e003      	b.n	800b302 <UART_SetConfig+0x706>
      default:
        ret = HAL_ERROR;
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
        break;
 800b300:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b302:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b304:	2b0f      	cmp	r3, #15
 800b306:	d908      	bls.n	800b31a <UART_SetConfig+0x71e>
 800b308:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b30a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b30e:	d204      	bcs.n	800b31a <UART_SetConfig+0x71e>
    {
      huart->Instance->BRR = usartdiv;
 800b310:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800b316:	60da      	str	r2, [r3, #12]
 800b318:	e002      	b.n	800b320 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 800b31a:	2301      	movs	r3, #1
 800b31c:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b320:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b322:	2200      	movs	r2, #0
 800b324:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->TxISR = NULL;
 800b326:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b328:	2200      	movs	r2, #0
 800b32a:	665a      	str	r2, [r3, #100]	@ 0x64

  return ret;
 800b32c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
}
 800b330:	4618      	mov	r0, r3
 800b332:	3780      	adds	r7, #128	@ 0x80
 800b334:	46bd      	mov	sp, r7
 800b336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b33a:	bf00      	nop

0800b33c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b083      	sub	sp, #12
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b348:	f003 0301 	and.w	r3, r3, #1
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d00a      	beq.n	800b366 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	430a      	orrs	r2, r1
 800b364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b36a:	f003 0302 	and.w	r3, r3, #2
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d00a      	beq.n	800b388 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	430a      	orrs	r2, r1
 800b386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b38c:	f003 0304 	and.w	r3, r3, #4
 800b390:	2b00      	cmp	r3, #0
 800b392:	d00a      	beq.n	800b3aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	430a      	orrs	r2, r1
 800b3a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3ae:	f003 0308 	and.w	r3, r3, #8
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d00a      	beq.n	800b3cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	430a      	orrs	r2, r1
 800b3ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3d0:	f003 0310 	and.w	r3, r3, #16
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d00a      	beq.n	800b3ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	689b      	ldr	r3, [r3, #8]
 800b3de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	430a      	orrs	r2, r1
 800b3ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3f2:	f003 0320 	and.w	r3, r3, #32
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d00a      	beq.n	800b410 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	689b      	ldr	r3, [r3, #8]
 800b400:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	430a      	orrs	r2, r1
 800b40e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d01a      	beq.n	800b452 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	430a      	orrs	r2, r1
 800b430:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b436:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b43a:	d10a      	bne.n	800b452 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	430a      	orrs	r2, r1
 800b450:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d00a      	beq.n	800b474 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	430a      	orrs	r2, r1
 800b472:	605a      	str	r2, [r3, #4]
  }
}
 800b474:	bf00      	nop
 800b476:	370c      	adds	r7, #12
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr

0800b480 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b086      	sub	sp, #24
 800b484:	af02      	add	r7, sp, #8
 800b486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2200      	movs	r2, #0
 800b48c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b48e:	f7fb f8fd 	bl	800668c <HAL_GetTick>
 800b492:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f003 0308 	and.w	r3, r3, #8
 800b49e:	2b08      	cmp	r3, #8
 800b4a0:	d10e      	bne.n	800b4c0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b4a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b4a6:	9300      	str	r3, [sp, #0]
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 f82a 	bl	800b50a <UART_WaitOnFlagUntilTimeout>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d001      	beq.n	800b4c0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b4bc:	2303      	movs	r3, #3
 800b4be:	e020      	b.n	800b502 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f003 0304 	and.w	r3, r3, #4
 800b4ca:	2b04      	cmp	r3, #4
 800b4cc:	d10e      	bne.n	800b4ec <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b4ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b4d2:	9300      	str	r3, [sp, #0]
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f000 f814 	bl	800b50a <UART_WaitOnFlagUntilTimeout>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d001      	beq.n	800b4ec <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b4e8:	2303      	movs	r3, #3
 800b4ea:	e00a      	b.n	800b502 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2220      	movs	r2, #32
 800b4f0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2220      	movs	r2, #32
 800b4f6:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UNLOCK(huart);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

  return HAL_OK;
 800b500:	2300      	movs	r3, #0
}
 800b502:	4618      	mov	r0, r3
 800b504:	3710      	adds	r7, #16
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}

0800b50a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b50a:	b580      	push	{r7, lr}
 800b50c:	b084      	sub	sp, #16
 800b50e:	af00      	add	r7, sp, #0
 800b510:	60f8      	str	r0, [r7, #12]
 800b512:	60b9      	str	r1, [r7, #8]
 800b514:	603b      	str	r3, [r7, #0]
 800b516:	4613      	mov	r3, r2
 800b518:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b51a:	e05d      	b.n	800b5d8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b51c:	69bb      	ldr	r3, [r7, #24]
 800b51e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b522:	d059      	beq.n	800b5d8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b524:	f7fb f8b2 	bl	800668c <HAL_GetTick>
 800b528:	4602      	mov	r2, r0
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	1ad3      	subs	r3, r2, r3
 800b52e:	69ba      	ldr	r2, [r7, #24]
 800b530:	429a      	cmp	r2, r3
 800b532:	d302      	bcc.n	800b53a <UART_WaitOnFlagUntilTimeout+0x30>
 800b534:	69bb      	ldr	r3, [r7, #24]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d11b      	bne.n	800b572 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	681a      	ldr	r2, [r3, #0]
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 800b548:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	689a      	ldr	r2, [r3, #8]
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f022 0201 	bic.w	r2, r2, #1
 800b558:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2220      	movs	r2, #32
 800b55e:	675a      	str	r2, [r3, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2220      	movs	r2, #32
 800b564:	679a      	str	r2, [r3, #120]	@ 0x78

        __HAL_UNLOCK(huart);
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2200      	movs	r2, #0
 800b56a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

        return HAL_TIMEOUT;
 800b56e:	2303      	movs	r3, #3
 800b570:	e042      	b.n	800b5f8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f003 0304 	and.w	r3, r3, #4
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d02b      	beq.n	800b5d8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	69db      	ldr	r3, [r3, #28]
 800b586:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b58a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b58e:	d123      	bne.n	800b5d8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b598:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	681a      	ldr	r2, [r3, #0]
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 800b5a8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	689a      	ldr	r2, [r3, #8]
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f022 0201 	bic.w	r2, r2, #1
 800b5b8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2220      	movs	r2, #32
 800b5be:	675a      	str	r2, [r3, #116]	@ 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	2220      	movs	r2, #32
 800b5c4:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2220      	movs	r2, #32
 800b5ca:	67da      	str	r2, [r3, #124]	@ 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          
          return HAL_TIMEOUT;
 800b5d4:	2303      	movs	r3, #3
 800b5d6:	e00f      	b.n	800b5f8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	69da      	ldr	r2, [r3, #28]
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	4013      	ands	r3, r2
 800b5e2:	68ba      	ldr	r2, [r7, #8]
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	bf0c      	ite	eq
 800b5e8:	2301      	moveq	r3, #1
 800b5ea:	2300      	movne	r3, #0
 800b5ec:	b2db      	uxtb	r3, r3
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	79fb      	ldrb	r3, [r7, #7]
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d092      	beq.n	800b51c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b5f6:	2300      	movs	r3, #0
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3710      	adds	r7, #16
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}

0800b600 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b600:	b480      	push	{r7}
 800b602:	b083      	sub	sp, #12
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	681a      	ldr	r2, [r3, #0]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 800b616:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	689a      	ldr	r2, [r3, #8]
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f022 0201 	bic.w	r2, r2, #1
 800b626:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2220      	movs	r2, #32
 800b62c:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2200      	movs	r2, #0
 800b632:	661a      	str	r2, [r3, #96]	@ 0x60
}
 800b634:	bf00      	nop
 800b636:	370c      	adds	r7, #12
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr

0800b640 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b084      	sub	sp, #16
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b64c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2200      	movs	r2, #0
 800b652:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	2200      	movs	r2, #0
 800b65a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b65e:	68f8      	ldr	r0, [r7, #12]
 800b660:	f7ff fac2 	bl	800abe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b664:	bf00      	nop
 800b666:	3710      	adds	r7, #16
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b682:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2220      	movs	r2, #32
 800b688:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2200      	movs	r2, #0
 800b68e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f7ff fa9f 	bl	800abd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b696:	bf00      	nop
 800b698:	3708      	adds	r7, #8
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}

0800b69e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b69e:	b580      	push	{r7, lr}
 800b6a0:	b084      	sub	sp, #16
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b6ac:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b6b2:	2b22      	cmp	r3, #34	@ 0x22
 800b6b4:	d13a      	bne.n	800b72c <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800b6bc:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b6be:	89bb      	ldrh	r3, [r7, #12]
 800b6c0:	b2d9      	uxtb	r1, r3
 800b6c2:	89fb      	ldrh	r3, [r7, #14]
 800b6c4:	b2da      	uxtb	r2, r3
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6ca:	400a      	ands	r2, r1
 800b6cc:	b2d2      	uxtb	r2, r2
 800b6ce:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6d4:	1c5a      	adds	r2, r3, #1
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b6e0:	b29b      	uxth	r3, r3
 800b6e2:	3b01      	subs	r3, #1
 800b6e4:	b29a      	uxth	r2, r3
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d123      	bne.n	800b740 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	681a      	ldr	r2, [r3, #0]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 800b706:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	689a      	ldr	r2, [r3, #8]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f022 0201 	bic.w	r2, r2, #1
 800b716:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2220      	movs	r2, #32
 800b71c:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2200      	movs	r2, #0
 800b722:	661a      	str	r2, [r3, #96]	@ 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f7f6 fee5 	bl	80024f4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b72a:	e009      	b.n	800b740 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	8b1b      	ldrh	r3, [r3, #24]
 800b732:	b29a      	uxth	r2, r3
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f042 0208 	orr.w	r2, r2, #8
 800b73c:	b292      	uxth	r2, r2
 800b73e:	831a      	strh	r2, [r3, #24]
}
 800b740:	bf00      	nop
 800b742:	3710      	adds	r7, #16
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b084      	sub	sp, #16
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b756:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b75c:	2b22      	cmp	r3, #34	@ 0x22
 800b75e:	d13a      	bne.n	800b7d6 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800b766:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b76c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800b76e:	89ba      	ldrh	r2, [r7, #12]
 800b770:	89fb      	ldrh	r3, [r7, #14]
 800b772:	4013      	ands	r3, r2
 800b774:	b29a      	uxth	r2, r3
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b77e:	1c9a      	adds	r2, r3, #2
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	3b01      	subs	r3, #1
 800b78e:	b29a      	uxth	r2, r3
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b79c:	b29b      	uxth	r3, r3
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d123      	bne.n	800b7ea <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	681a      	ldr	r2, [r3, #0]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 800b7b0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	689a      	ldr	r2, [r3, #8]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f022 0201 	bic.w	r2, r2, #1
 800b7c0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2220      	movs	r2, #32
 800b7c6:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	661a      	str	r2, [r3, #96]	@ 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f7f6 fe90 	bl	80024f4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b7d4:	e009      	b.n	800b7ea <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	8b1b      	ldrh	r3, [r3, #24]
 800b7dc:	b29a      	uxth	r2, r3
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f042 0208 	orr.w	r2, r2, #8
 800b7e6:	b292      	uxth	r2, r2
 800b7e8:	831a      	strh	r2, [r3, #24]
}
 800b7ea:	bf00      	nop
 800b7ec:	3710      	adds	r7, #16
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}

0800b7f2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b7f2:	b480      	push	{r7}
 800b7f4:	b083      	sub	sp, #12
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b7fa:	bf00      	nop
 800b7fc:	370c      	adds	r7, #12
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr
	...

0800b808 <findslot>:
 800b808:	4b0a      	ldr	r3, [pc, #40]	@ (800b834 <findslot+0x2c>)
 800b80a:	b510      	push	{r4, lr}
 800b80c:	4604      	mov	r4, r0
 800b80e:	6818      	ldr	r0, [r3, #0]
 800b810:	b118      	cbz	r0, 800b81a <findslot+0x12>
 800b812:	6a03      	ldr	r3, [r0, #32]
 800b814:	b90b      	cbnz	r3, 800b81a <findslot+0x12>
 800b816:	f000 fea5 	bl	800c564 <__sinit>
 800b81a:	2c13      	cmp	r4, #19
 800b81c:	d807      	bhi.n	800b82e <findslot+0x26>
 800b81e:	4806      	ldr	r0, [pc, #24]	@ (800b838 <findslot+0x30>)
 800b820:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800b824:	3201      	adds	r2, #1
 800b826:	d002      	beq.n	800b82e <findslot+0x26>
 800b828:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800b82c:	bd10      	pop	{r4, pc}
 800b82e:	2000      	movs	r0, #0
 800b830:	e7fc      	b.n	800b82c <findslot+0x24>
 800b832:	bf00      	nop
 800b834:	20000168 	.word	0x20000168
 800b838:	20001258 	.word	0x20001258

0800b83c <error>:
 800b83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b83e:	4604      	mov	r4, r0
 800b840:	f001 f916 	bl	800ca70 <__errno>
 800b844:	2613      	movs	r6, #19
 800b846:	4605      	mov	r5, r0
 800b848:	2700      	movs	r7, #0
 800b84a:	4630      	mov	r0, r6
 800b84c:	4639      	mov	r1, r7
 800b84e:	beab      	bkpt	0x00ab
 800b850:	4606      	mov	r6, r0
 800b852:	602e      	str	r6, [r5, #0]
 800b854:	4620      	mov	r0, r4
 800b856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b858 <checkerror>:
 800b858:	1c43      	adds	r3, r0, #1
 800b85a:	d101      	bne.n	800b860 <checkerror+0x8>
 800b85c:	f7ff bfee 	b.w	800b83c <error>
 800b860:	4770      	bx	lr

0800b862 <_swiread>:
 800b862:	b530      	push	{r4, r5, lr}
 800b864:	b085      	sub	sp, #20
 800b866:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800b86a:	9203      	str	r2, [sp, #12]
 800b86c:	2406      	movs	r4, #6
 800b86e:	ad01      	add	r5, sp, #4
 800b870:	4620      	mov	r0, r4
 800b872:	4629      	mov	r1, r5
 800b874:	beab      	bkpt	0x00ab
 800b876:	4604      	mov	r4, r0
 800b878:	4620      	mov	r0, r4
 800b87a:	f7ff ffed 	bl	800b858 <checkerror>
 800b87e:	b005      	add	sp, #20
 800b880:	bd30      	pop	{r4, r5, pc}

0800b882 <_read>:
 800b882:	b570      	push	{r4, r5, r6, lr}
 800b884:	460e      	mov	r6, r1
 800b886:	4614      	mov	r4, r2
 800b888:	f7ff ffbe 	bl	800b808 <findslot>
 800b88c:	4605      	mov	r5, r0
 800b88e:	b930      	cbnz	r0, 800b89e <_read+0x1c>
 800b890:	f001 f8ee 	bl	800ca70 <__errno>
 800b894:	2309      	movs	r3, #9
 800b896:	6003      	str	r3, [r0, #0]
 800b898:	f04f 30ff 	mov.w	r0, #4294967295
 800b89c:	bd70      	pop	{r4, r5, r6, pc}
 800b89e:	6800      	ldr	r0, [r0, #0]
 800b8a0:	4622      	mov	r2, r4
 800b8a2:	4631      	mov	r1, r6
 800b8a4:	f7ff ffdd 	bl	800b862 <_swiread>
 800b8a8:	1c43      	adds	r3, r0, #1
 800b8aa:	d0f5      	beq.n	800b898 <_read+0x16>
 800b8ac:	686b      	ldr	r3, [r5, #4]
 800b8ae:	1a20      	subs	r0, r4, r0
 800b8b0:	4403      	add	r3, r0
 800b8b2:	606b      	str	r3, [r5, #4]
 800b8b4:	e7f2      	b.n	800b89c <_read+0x1a>

0800b8b6 <_swilseek>:
 800b8b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8b8:	460c      	mov	r4, r1
 800b8ba:	4616      	mov	r6, r2
 800b8bc:	f7ff ffa4 	bl	800b808 <findslot>
 800b8c0:	4605      	mov	r5, r0
 800b8c2:	b940      	cbnz	r0, 800b8d6 <_swilseek+0x20>
 800b8c4:	f001 f8d4 	bl	800ca70 <__errno>
 800b8c8:	2309      	movs	r3, #9
 800b8ca:	6003      	str	r3, [r0, #0]
 800b8cc:	f04f 34ff 	mov.w	r4, #4294967295
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	b003      	add	sp, #12
 800b8d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8d6:	2e02      	cmp	r6, #2
 800b8d8:	d903      	bls.n	800b8e2 <_swilseek+0x2c>
 800b8da:	f001 f8c9 	bl	800ca70 <__errno>
 800b8de:	2316      	movs	r3, #22
 800b8e0:	e7f3      	b.n	800b8ca <_swilseek+0x14>
 800b8e2:	2e01      	cmp	r6, #1
 800b8e4:	d112      	bne.n	800b90c <_swilseek+0x56>
 800b8e6:	6843      	ldr	r3, [r0, #4]
 800b8e8:	18e4      	adds	r4, r4, r3
 800b8ea:	d4f6      	bmi.n	800b8da <_swilseek+0x24>
 800b8ec:	682b      	ldr	r3, [r5, #0]
 800b8ee:	260a      	movs	r6, #10
 800b8f0:	e9cd 3400 	strd	r3, r4, [sp]
 800b8f4:	466f      	mov	r7, sp
 800b8f6:	4630      	mov	r0, r6
 800b8f8:	4639      	mov	r1, r7
 800b8fa:	beab      	bkpt	0x00ab
 800b8fc:	4606      	mov	r6, r0
 800b8fe:	4630      	mov	r0, r6
 800b900:	f7ff ffaa 	bl	800b858 <checkerror>
 800b904:	2800      	cmp	r0, #0
 800b906:	dbe1      	blt.n	800b8cc <_swilseek+0x16>
 800b908:	606c      	str	r4, [r5, #4]
 800b90a:	e7e1      	b.n	800b8d0 <_swilseek+0x1a>
 800b90c:	2e02      	cmp	r6, #2
 800b90e:	6803      	ldr	r3, [r0, #0]
 800b910:	d1ec      	bne.n	800b8ec <_swilseek+0x36>
 800b912:	9300      	str	r3, [sp, #0]
 800b914:	260c      	movs	r6, #12
 800b916:	466f      	mov	r7, sp
 800b918:	4630      	mov	r0, r6
 800b91a:	4639      	mov	r1, r7
 800b91c:	beab      	bkpt	0x00ab
 800b91e:	4606      	mov	r6, r0
 800b920:	4630      	mov	r0, r6
 800b922:	f7ff ff99 	bl	800b858 <checkerror>
 800b926:	1c43      	adds	r3, r0, #1
 800b928:	d0d0      	beq.n	800b8cc <_swilseek+0x16>
 800b92a:	4404      	add	r4, r0
 800b92c:	e7de      	b.n	800b8ec <_swilseek+0x36>

0800b92e <_lseek>:
 800b92e:	f7ff bfc2 	b.w	800b8b6 <_swilseek>

0800b932 <_swiwrite>:
 800b932:	b530      	push	{r4, r5, lr}
 800b934:	b085      	sub	sp, #20
 800b936:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800b93a:	9203      	str	r2, [sp, #12]
 800b93c:	2405      	movs	r4, #5
 800b93e:	ad01      	add	r5, sp, #4
 800b940:	4620      	mov	r0, r4
 800b942:	4629      	mov	r1, r5
 800b944:	beab      	bkpt	0x00ab
 800b946:	4604      	mov	r4, r0
 800b948:	4620      	mov	r0, r4
 800b94a:	f7ff ff85 	bl	800b858 <checkerror>
 800b94e:	b005      	add	sp, #20
 800b950:	bd30      	pop	{r4, r5, pc}

0800b952 <_write>:
 800b952:	b570      	push	{r4, r5, r6, lr}
 800b954:	460e      	mov	r6, r1
 800b956:	4615      	mov	r5, r2
 800b958:	f7ff ff56 	bl	800b808 <findslot>
 800b95c:	4604      	mov	r4, r0
 800b95e:	b930      	cbnz	r0, 800b96e <_write+0x1c>
 800b960:	f001 f886 	bl	800ca70 <__errno>
 800b964:	2309      	movs	r3, #9
 800b966:	6003      	str	r3, [r0, #0]
 800b968:	f04f 30ff 	mov.w	r0, #4294967295
 800b96c:	bd70      	pop	{r4, r5, r6, pc}
 800b96e:	6800      	ldr	r0, [r0, #0]
 800b970:	462a      	mov	r2, r5
 800b972:	4631      	mov	r1, r6
 800b974:	f7ff ffdd 	bl	800b932 <_swiwrite>
 800b978:	1e03      	subs	r3, r0, #0
 800b97a:	dbf5      	blt.n	800b968 <_write+0x16>
 800b97c:	6862      	ldr	r2, [r4, #4]
 800b97e:	1ae8      	subs	r0, r5, r3
 800b980:	4402      	add	r2, r0
 800b982:	42ab      	cmp	r3, r5
 800b984:	6062      	str	r2, [r4, #4]
 800b986:	d1f1      	bne.n	800b96c <_write+0x1a>
 800b988:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b98c:	2000      	movs	r0, #0
 800b98e:	f7ff bf55 	b.w	800b83c <error>

0800b992 <_swiclose>:
 800b992:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b994:	2402      	movs	r4, #2
 800b996:	9001      	str	r0, [sp, #4]
 800b998:	ad01      	add	r5, sp, #4
 800b99a:	4620      	mov	r0, r4
 800b99c:	4629      	mov	r1, r5
 800b99e:	beab      	bkpt	0x00ab
 800b9a0:	4604      	mov	r4, r0
 800b9a2:	4620      	mov	r0, r4
 800b9a4:	f7ff ff58 	bl	800b858 <checkerror>
 800b9a8:	b003      	add	sp, #12
 800b9aa:	bd30      	pop	{r4, r5, pc}

0800b9ac <_close>:
 800b9ac:	b538      	push	{r3, r4, r5, lr}
 800b9ae:	4605      	mov	r5, r0
 800b9b0:	f7ff ff2a 	bl	800b808 <findslot>
 800b9b4:	4604      	mov	r4, r0
 800b9b6:	b930      	cbnz	r0, 800b9c6 <_close+0x1a>
 800b9b8:	f001 f85a 	bl	800ca70 <__errno>
 800b9bc:	2309      	movs	r3, #9
 800b9be:	6003      	str	r3, [r0, #0]
 800b9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c4:	bd38      	pop	{r3, r4, r5, pc}
 800b9c6:	3d01      	subs	r5, #1
 800b9c8:	2d01      	cmp	r5, #1
 800b9ca:	d809      	bhi.n	800b9e0 <_close+0x34>
 800b9cc:	4b07      	ldr	r3, [pc, #28]	@ (800b9ec <_close+0x40>)
 800b9ce:	689a      	ldr	r2, [r3, #8]
 800b9d0:	691b      	ldr	r3, [r3, #16]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d104      	bne.n	800b9e0 <_close+0x34>
 800b9d6:	f04f 33ff 	mov.w	r3, #4294967295
 800b9da:	6023      	str	r3, [r4, #0]
 800b9dc:	2000      	movs	r0, #0
 800b9de:	e7f1      	b.n	800b9c4 <_close+0x18>
 800b9e0:	6820      	ldr	r0, [r4, #0]
 800b9e2:	f7ff ffd6 	bl	800b992 <_swiclose>
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	d0f5      	beq.n	800b9d6 <_close+0x2a>
 800b9ea:	e7eb      	b.n	800b9c4 <_close+0x18>
 800b9ec:	20001258 	.word	0x20001258

0800b9f0 <_getpid>:
 800b9f0:	2001      	movs	r0, #1
 800b9f2:	4770      	bx	lr

0800b9f4 <_swistat>:
 800b9f4:	b570      	push	{r4, r5, r6, lr}
 800b9f6:	460c      	mov	r4, r1
 800b9f8:	f7ff ff06 	bl	800b808 <findslot>
 800b9fc:	4605      	mov	r5, r0
 800b9fe:	b930      	cbnz	r0, 800ba0e <_swistat+0x1a>
 800ba00:	f001 f836 	bl	800ca70 <__errno>
 800ba04:	2309      	movs	r3, #9
 800ba06:	6003      	str	r3, [r0, #0]
 800ba08:	f04f 30ff 	mov.w	r0, #4294967295
 800ba0c:	bd70      	pop	{r4, r5, r6, pc}
 800ba0e:	6863      	ldr	r3, [r4, #4]
 800ba10:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800ba14:	6063      	str	r3, [r4, #4]
 800ba16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba1a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800ba1c:	260c      	movs	r6, #12
 800ba1e:	4630      	mov	r0, r6
 800ba20:	4629      	mov	r1, r5
 800ba22:	beab      	bkpt	0x00ab
 800ba24:	4605      	mov	r5, r0
 800ba26:	4628      	mov	r0, r5
 800ba28:	f7ff ff16 	bl	800b858 <checkerror>
 800ba2c:	1c43      	adds	r3, r0, #1
 800ba2e:	d0eb      	beq.n	800ba08 <_swistat+0x14>
 800ba30:	6120      	str	r0, [r4, #16]
 800ba32:	2000      	movs	r0, #0
 800ba34:	e7ea      	b.n	800ba0c <_swistat+0x18>

0800ba36 <_fstat>:
 800ba36:	460b      	mov	r3, r1
 800ba38:	b510      	push	{r4, lr}
 800ba3a:	2100      	movs	r1, #0
 800ba3c:	4604      	mov	r4, r0
 800ba3e:	2258      	movs	r2, #88	@ 0x58
 800ba40:	4618      	mov	r0, r3
 800ba42:	f000 ff3d 	bl	800c8c0 <memset>
 800ba46:	4601      	mov	r1, r0
 800ba48:	4620      	mov	r0, r4
 800ba4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba4e:	f7ff bfd1 	b.w	800b9f4 <_swistat>

0800ba52 <_isatty>:
 800ba52:	b570      	push	{r4, r5, r6, lr}
 800ba54:	f7ff fed8 	bl	800b808 <findslot>
 800ba58:	2409      	movs	r4, #9
 800ba5a:	4605      	mov	r5, r0
 800ba5c:	b920      	cbnz	r0, 800ba68 <_isatty+0x16>
 800ba5e:	f001 f807 	bl	800ca70 <__errno>
 800ba62:	6004      	str	r4, [r0, #0]
 800ba64:	2000      	movs	r0, #0
 800ba66:	bd70      	pop	{r4, r5, r6, pc}
 800ba68:	4620      	mov	r0, r4
 800ba6a:	4629      	mov	r1, r5
 800ba6c:	beab      	bkpt	0x00ab
 800ba6e:	4604      	mov	r4, r0
 800ba70:	2c01      	cmp	r4, #1
 800ba72:	4620      	mov	r0, r4
 800ba74:	d0f7      	beq.n	800ba66 <_isatty+0x14>
 800ba76:	f000 fffb 	bl	800ca70 <__errno>
 800ba7a:	2513      	movs	r5, #19
 800ba7c:	4604      	mov	r4, r0
 800ba7e:	2600      	movs	r6, #0
 800ba80:	4628      	mov	r0, r5
 800ba82:	4631      	mov	r1, r6
 800ba84:	beab      	bkpt	0x00ab
 800ba86:	4605      	mov	r5, r0
 800ba88:	6025      	str	r5, [r4, #0]
 800ba8a:	e7eb      	b.n	800ba64 <_isatty+0x12>

0800ba8c <atoi>:
 800ba8c:	220a      	movs	r2, #10
 800ba8e:	2100      	movs	r1, #0
 800ba90:	f000 b87a 	b.w	800bb88 <strtol>

0800ba94 <_strtol_l.constprop.0>:
 800ba94:	2b24      	cmp	r3, #36	@ 0x24
 800ba96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba9a:	4686      	mov	lr, r0
 800ba9c:	4690      	mov	r8, r2
 800ba9e:	d801      	bhi.n	800baa4 <_strtol_l.constprop.0+0x10>
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d106      	bne.n	800bab2 <_strtol_l.constprop.0+0x1e>
 800baa4:	f000 ffe4 	bl	800ca70 <__errno>
 800baa8:	2316      	movs	r3, #22
 800baaa:	6003      	str	r3, [r0, #0]
 800baac:	2000      	movs	r0, #0
 800baae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bab2:	4834      	ldr	r0, [pc, #208]	@ (800bb84 <_strtol_l.constprop.0+0xf0>)
 800bab4:	460d      	mov	r5, r1
 800bab6:	462a      	mov	r2, r5
 800bab8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800babc:	5d06      	ldrb	r6, [r0, r4]
 800babe:	f016 0608 	ands.w	r6, r6, #8
 800bac2:	d1f8      	bne.n	800bab6 <_strtol_l.constprop.0+0x22>
 800bac4:	2c2d      	cmp	r4, #45	@ 0x2d
 800bac6:	d12d      	bne.n	800bb24 <_strtol_l.constprop.0+0x90>
 800bac8:	782c      	ldrb	r4, [r5, #0]
 800baca:	2601      	movs	r6, #1
 800bacc:	1c95      	adds	r5, r2, #2
 800bace:	f033 0210 	bics.w	r2, r3, #16
 800bad2:	d109      	bne.n	800bae8 <_strtol_l.constprop.0+0x54>
 800bad4:	2c30      	cmp	r4, #48	@ 0x30
 800bad6:	d12a      	bne.n	800bb2e <_strtol_l.constprop.0+0x9a>
 800bad8:	782a      	ldrb	r2, [r5, #0]
 800bada:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bade:	2a58      	cmp	r2, #88	@ 0x58
 800bae0:	d125      	bne.n	800bb2e <_strtol_l.constprop.0+0x9a>
 800bae2:	786c      	ldrb	r4, [r5, #1]
 800bae4:	2310      	movs	r3, #16
 800bae6:	3502      	adds	r5, #2
 800bae8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800baec:	f10c 3cff 	add.w	ip, ip, #4294967295
 800baf0:	2200      	movs	r2, #0
 800baf2:	fbbc f9f3 	udiv	r9, ip, r3
 800baf6:	4610      	mov	r0, r2
 800baf8:	fb03 ca19 	mls	sl, r3, r9, ip
 800bafc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bb00:	2f09      	cmp	r7, #9
 800bb02:	d81b      	bhi.n	800bb3c <_strtol_l.constprop.0+0xa8>
 800bb04:	463c      	mov	r4, r7
 800bb06:	42a3      	cmp	r3, r4
 800bb08:	dd27      	ble.n	800bb5a <_strtol_l.constprop.0+0xc6>
 800bb0a:	1c57      	adds	r7, r2, #1
 800bb0c:	d007      	beq.n	800bb1e <_strtol_l.constprop.0+0x8a>
 800bb0e:	4581      	cmp	r9, r0
 800bb10:	d320      	bcc.n	800bb54 <_strtol_l.constprop.0+0xc0>
 800bb12:	d101      	bne.n	800bb18 <_strtol_l.constprop.0+0x84>
 800bb14:	45a2      	cmp	sl, r4
 800bb16:	db1d      	blt.n	800bb54 <_strtol_l.constprop.0+0xc0>
 800bb18:	fb00 4003 	mla	r0, r0, r3, r4
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb22:	e7eb      	b.n	800bafc <_strtol_l.constprop.0+0x68>
 800bb24:	2c2b      	cmp	r4, #43	@ 0x2b
 800bb26:	bf04      	itt	eq
 800bb28:	782c      	ldrbeq	r4, [r5, #0]
 800bb2a:	1c95      	addeq	r5, r2, #2
 800bb2c:	e7cf      	b.n	800bace <_strtol_l.constprop.0+0x3a>
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d1da      	bne.n	800bae8 <_strtol_l.constprop.0+0x54>
 800bb32:	2c30      	cmp	r4, #48	@ 0x30
 800bb34:	bf0c      	ite	eq
 800bb36:	2308      	moveq	r3, #8
 800bb38:	230a      	movne	r3, #10
 800bb3a:	e7d5      	b.n	800bae8 <_strtol_l.constprop.0+0x54>
 800bb3c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bb40:	2f19      	cmp	r7, #25
 800bb42:	d801      	bhi.n	800bb48 <_strtol_l.constprop.0+0xb4>
 800bb44:	3c37      	subs	r4, #55	@ 0x37
 800bb46:	e7de      	b.n	800bb06 <_strtol_l.constprop.0+0x72>
 800bb48:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bb4c:	2f19      	cmp	r7, #25
 800bb4e:	d804      	bhi.n	800bb5a <_strtol_l.constprop.0+0xc6>
 800bb50:	3c57      	subs	r4, #87	@ 0x57
 800bb52:	e7d8      	b.n	800bb06 <_strtol_l.constprop.0+0x72>
 800bb54:	f04f 32ff 	mov.w	r2, #4294967295
 800bb58:	e7e1      	b.n	800bb1e <_strtol_l.constprop.0+0x8a>
 800bb5a:	1c53      	adds	r3, r2, #1
 800bb5c:	d108      	bne.n	800bb70 <_strtol_l.constprop.0+0xdc>
 800bb5e:	2322      	movs	r3, #34	@ 0x22
 800bb60:	f8ce 3000 	str.w	r3, [lr]
 800bb64:	4660      	mov	r0, ip
 800bb66:	f1b8 0f00 	cmp.w	r8, #0
 800bb6a:	d0a0      	beq.n	800baae <_strtol_l.constprop.0+0x1a>
 800bb6c:	1e69      	subs	r1, r5, #1
 800bb6e:	e006      	b.n	800bb7e <_strtol_l.constprop.0+0xea>
 800bb70:	b106      	cbz	r6, 800bb74 <_strtol_l.constprop.0+0xe0>
 800bb72:	4240      	negs	r0, r0
 800bb74:	f1b8 0f00 	cmp.w	r8, #0
 800bb78:	d099      	beq.n	800baae <_strtol_l.constprop.0+0x1a>
 800bb7a:	2a00      	cmp	r2, #0
 800bb7c:	d1f6      	bne.n	800bb6c <_strtol_l.constprop.0+0xd8>
 800bb7e:	f8c8 1000 	str.w	r1, [r8]
 800bb82:	e794      	b.n	800baae <_strtol_l.constprop.0+0x1a>
 800bb84:	08012909 	.word	0x08012909

0800bb88 <strtol>:
 800bb88:	4613      	mov	r3, r2
 800bb8a:	460a      	mov	r2, r1
 800bb8c:	4601      	mov	r1, r0
 800bb8e:	4802      	ldr	r0, [pc, #8]	@ (800bb98 <strtol+0x10>)
 800bb90:	6800      	ldr	r0, [r0, #0]
 800bb92:	f7ff bf7f 	b.w	800ba94 <_strtol_l.constprop.0>
 800bb96:	bf00      	nop
 800bb98:	20000168 	.word	0x20000168

0800bb9c <__cvt>:
 800bb9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bba0:	ec57 6b10 	vmov	r6, r7, d0
 800bba4:	2f00      	cmp	r7, #0
 800bba6:	460c      	mov	r4, r1
 800bba8:	4619      	mov	r1, r3
 800bbaa:	463b      	mov	r3, r7
 800bbac:	bfbb      	ittet	lt
 800bbae:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bbb2:	461f      	movlt	r7, r3
 800bbb4:	2300      	movge	r3, #0
 800bbb6:	232d      	movlt	r3, #45	@ 0x2d
 800bbb8:	700b      	strb	r3, [r1, #0]
 800bbba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bbbc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800bbc0:	4691      	mov	r9, r2
 800bbc2:	f023 0820 	bic.w	r8, r3, #32
 800bbc6:	bfbc      	itt	lt
 800bbc8:	4632      	movlt	r2, r6
 800bbca:	4616      	movlt	r6, r2
 800bbcc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bbd0:	d005      	beq.n	800bbde <__cvt+0x42>
 800bbd2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bbd6:	d100      	bne.n	800bbda <__cvt+0x3e>
 800bbd8:	3401      	adds	r4, #1
 800bbda:	2102      	movs	r1, #2
 800bbdc:	e000      	b.n	800bbe0 <__cvt+0x44>
 800bbde:	2103      	movs	r1, #3
 800bbe0:	ab03      	add	r3, sp, #12
 800bbe2:	9301      	str	r3, [sp, #4]
 800bbe4:	ab02      	add	r3, sp, #8
 800bbe6:	9300      	str	r3, [sp, #0]
 800bbe8:	ec47 6b10 	vmov	d0, r6, r7
 800bbec:	4653      	mov	r3, sl
 800bbee:	4622      	mov	r2, r4
 800bbf0:	f001 f822 	bl	800cc38 <_dtoa_r>
 800bbf4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bbf8:	4605      	mov	r5, r0
 800bbfa:	d119      	bne.n	800bc30 <__cvt+0x94>
 800bbfc:	f019 0f01 	tst.w	r9, #1
 800bc00:	d00e      	beq.n	800bc20 <__cvt+0x84>
 800bc02:	eb00 0904 	add.w	r9, r0, r4
 800bc06:	2200      	movs	r2, #0
 800bc08:	2300      	movs	r3, #0
 800bc0a:	4630      	mov	r0, r6
 800bc0c:	4639      	mov	r1, r7
 800bc0e:	f7f4 ff5b 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc12:	b108      	cbz	r0, 800bc18 <__cvt+0x7c>
 800bc14:	f8cd 900c 	str.w	r9, [sp, #12]
 800bc18:	2230      	movs	r2, #48	@ 0x30
 800bc1a:	9b03      	ldr	r3, [sp, #12]
 800bc1c:	454b      	cmp	r3, r9
 800bc1e:	d31e      	bcc.n	800bc5e <__cvt+0xc2>
 800bc20:	9b03      	ldr	r3, [sp, #12]
 800bc22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc24:	1b5b      	subs	r3, r3, r5
 800bc26:	4628      	mov	r0, r5
 800bc28:	6013      	str	r3, [r2, #0]
 800bc2a:	b004      	add	sp, #16
 800bc2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc30:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bc34:	eb00 0904 	add.w	r9, r0, r4
 800bc38:	d1e5      	bne.n	800bc06 <__cvt+0x6a>
 800bc3a:	7803      	ldrb	r3, [r0, #0]
 800bc3c:	2b30      	cmp	r3, #48	@ 0x30
 800bc3e:	d10a      	bne.n	800bc56 <__cvt+0xba>
 800bc40:	2200      	movs	r2, #0
 800bc42:	2300      	movs	r3, #0
 800bc44:	4630      	mov	r0, r6
 800bc46:	4639      	mov	r1, r7
 800bc48:	f7f4 ff3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc4c:	b918      	cbnz	r0, 800bc56 <__cvt+0xba>
 800bc4e:	f1c4 0401 	rsb	r4, r4, #1
 800bc52:	f8ca 4000 	str.w	r4, [sl]
 800bc56:	f8da 3000 	ldr.w	r3, [sl]
 800bc5a:	4499      	add	r9, r3
 800bc5c:	e7d3      	b.n	800bc06 <__cvt+0x6a>
 800bc5e:	1c59      	adds	r1, r3, #1
 800bc60:	9103      	str	r1, [sp, #12]
 800bc62:	701a      	strb	r2, [r3, #0]
 800bc64:	e7d9      	b.n	800bc1a <__cvt+0x7e>

0800bc66 <__exponent>:
 800bc66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc68:	2900      	cmp	r1, #0
 800bc6a:	bfba      	itte	lt
 800bc6c:	4249      	neglt	r1, r1
 800bc6e:	232d      	movlt	r3, #45	@ 0x2d
 800bc70:	232b      	movge	r3, #43	@ 0x2b
 800bc72:	2909      	cmp	r1, #9
 800bc74:	7002      	strb	r2, [r0, #0]
 800bc76:	7043      	strb	r3, [r0, #1]
 800bc78:	dd29      	ble.n	800bcce <__exponent+0x68>
 800bc7a:	f10d 0307 	add.w	r3, sp, #7
 800bc7e:	461d      	mov	r5, r3
 800bc80:	270a      	movs	r7, #10
 800bc82:	461a      	mov	r2, r3
 800bc84:	fbb1 f6f7 	udiv	r6, r1, r7
 800bc88:	fb07 1416 	mls	r4, r7, r6, r1
 800bc8c:	3430      	adds	r4, #48	@ 0x30
 800bc8e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bc92:	460c      	mov	r4, r1
 800bc94:	2c63      	cmp	r4, #99	@ 0x63
 800bc96:	f103 33ff 	add.w	r3, r3, #4294967295
 800bc9a:	4631      	mov	r1, r6
 800bc9c:	dcf1      	bgt.n	800bc82 <__exponent+0x1c>
 800bc9e:	3130      	adds	r1, #48	@ 0x30
 800bca0:	1e94      	subs	r4, r2, #2
 800bca2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bca6:	1c41      	adds	r1, r0, #1
 800bca8:	4623      	mov	r3, r4
 800bcaa:	42ab      	cmp	r3, r5
 800bcac:	d30a      	bcc.n	800bcc4 <__exponent+0x5e>
 800bcae:	f10d 0309 	add.w	r3, sp, #9
 800bcb2:	1a9b      	subs	r3, r3, r2
 800bcb4:	42ac      	cmp	r4, r5
 800bcb6:	bf88      	it	hi
 800bcb8:	2300      	movhi	r3, #0
 800bcba:	3302      	adds	r3, #2
 800bcbc:	4403      	add	r3, r0
 800bcbe:	1a18      	subs	r0, r3, r0
 800bcc0:	b003      	add	sp, #12
 800bcc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcc4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bcc8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bccc:	e7ed      	b.n	800bcaa <__exponent+0x44>
 800bcce:	2330      	movs	r3, #48	@ 0x30
 800bcd0:	3130      	adds	r1, #48	@ 0x30
 800bcd2:	7083      	strb	r3, [r0, #2]
 800bcd4:	70c1      	strb	r1, [r0, #3]
 800bcd6:	1d03      	adds	r3, r0, #4
 800bcd8:	e7f1      	b.n	800bcbe <__exponent+0x58>
	...

0800bcdc <_printf_float>:
 800bcdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bce0:	b08d      	sub	sp, #52	@ 0x34
 800bce2:	460c      	mov	r4, r1
 800bce4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bce8:	4616      	mov	r6, r2
 800bcea:	461f      	mov	r7, r3
 800bcec:	4605      	mov	r5, r0
 800bcee:	f000 fe75 	bl	800c9dc <_localeconv_r>
 800bcf2:	6803      	ldr	r3, [r0, #0]
 800bcf4:	9304      	str	r3, [sp, #16]
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7f4 faba 	bl	8000270 <strlen>
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd00:	f8d8 3000 	ldr.w	r3, [r8]
 800bd04:	9005      	str	r0, [sp, #20]
 800bd06:	3307      	adds	r3, #7
 800bd08:	f023 0307 	bic.w	r3, r3, #7
 800bd0c:	f103 0208 	add.w	r2, r3, #8
 800bd10:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bd14:	f8d4 b000 	ldr.w	fp, [r4]
 800bd18:	f8c8 2000 	str.w	r2, [r8]
 800bd1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bd20:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bd24:	9307      	str	r3, [sp, #28]
 800bd26:	f8cd 8018 	str.w	r8, [sp, #24]
 800bd2a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bd2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd32:	4b9c      	ldr	r3, [pc, #624]	@ (800bfa4 <_printf_float+0x2c8>)
 800bd34:	f04f 32ff 	mov.w	r2, #4294967295
 800bd38:	f7f4 fef8 	bl	8000b2c <__aeabi_dcmpun>
 800bd3c:	bb70      	cbnz	r0, 800bd9c <_printf_float+0xc0>
 800bd3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd42:	4b98      	ldr	r3, [pc, #608]	@ (800bfa4 <_printf_float+0x2c8>)
 800bd44:	f04f 32ff 	mov.w	r2, #4294967295
 800bd48:	f7f4 fed2 	bl	8000af0 <__aeabi_dcmple>
 800bd4c:	bb30      	cbnz	r0, 800bd9c <_printf_float+0xc0>
 800bd4e:	2200      	movs	r2, #0
 800bd50:	2300      	movs	r3, #0
 800bd52:	4640      	mov	r0, r8
 800bd54:	4649      	mov	r1, r9
 800bd56:	f7f4 fec1 	bl	8000adc <__aeabi_dcmplt>
 800bd5a:	b110      	cbz	r0, 800bd62 <_printf_float+0x86>
 800bd5c:	232d      	movs	r3, #45	@ 0x2d
 800bd5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bd62:	4a91      	ldr	r2, [pc, #580]	@ (800bfa8 <_printf_float+0x2cc>)
 800bd64:	4b91      	ldr	r3, [pc, #580]	@ (800bfac <_printf_float+0x2d0>)
 800bd66:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bd6a:	bf94      	ite	ls
 800bd6c:	4690      	movls	r8, r2
 800bd6e:	4698      	movhi	r8, r3
 800bd70:	2303      	movs	r3, #3
 800bd72:	6123      	str	r3, [r4, #16]
 800bd74:	f02b 0304 	bic.w	r3, fp, #4
 800bd78:	6023      	str	r3, [r4, #0]
 800bd7a:	f04f 0900 	mov.w	r9, #0
 800bd7e:	9700      	str	r7, [sp, #0]
 800bd80:	4633      	mov	r3, r6
 800bd82:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bd84:	4621      	mov	r1, r4
 800bd86:	4628      	mov	r0, r5
 800bd88:	f000 f9d2 	bl	800c130 <_printf_common>
 800bd8c:	3001      	adds	r0, #1
 800bd8e:	f040 808d 	bne.w	800beac <_printf_float+0x1d0>
 800bd92:	f04f 30ff 	mov.w	r0, #4294967295
 800bd96:	b00d      	add	sp, #52	@ 0x34
 800bd98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd9c:	4642      	mov	r2, r8
 800bd9e:	464b      	mov	r3, r9
 800bda0:	4640      	mov	r0, r8
 800bda2:	4649      	mov	r1, r9
 800bda4:	f7f4 fec2 	bl	8000b2c <__aeabi_dcmpun>
 800bda8:	b140      	cbz	r0, 800bdbc <_printf_float+0xe0>
 800bdaa:	464b      	mov	r3, r9
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	bfbc      	itt	lt
 800bdb0:	232d      	movlt	r3, #45	@ 0x2d
 800bdb2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bdb6:	4a7e      	ldr	r2, [pc, #504]	@ (800bfb0 <_printf_float+0x2d4>)
 800bdb8:	4b7e      	ldr	r3, [pc, #504]	@ (800bfb4 <_printf_float+0x2d8>)
 800bdba:	e7d4      	b.n	800bd66 <_printf_float+0x8a>
 800bdbc:	6863      	ldr	r3, [r4, #4]
 800bdbe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bdc2:	9206      	str	r2, [sp, #24]
 800bdc4:	1c5a      	adds	r2, r3, #1
 800bdc6:	d13b      	bne.n	800be40 <_printf_float+0x164>
 800bdc8:	2306      	movs	r3, #6
 800bdca:	6063      	str	r3, [r4, #4]
 800bdcc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	6022      	str	r2, [r4, #0]
 800bdd4:	9303      	str	r3, [sp, #12]
 800bdd6:	ab0a      	add	r3, sp, #40	@ 0x28
 800bdd8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bddc:	ab09      	add	r3, sp, #36	@ 0x24
 800bdde:	9300      	str	r3, [sp, #0]
 800bde0:	6861      	ldr	r1, [r4, #4]
 800bde2:	ec49 8b10 	vmov	d0, r8, r9
 800bde6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bdea:	4628      	mov	r0, r5
 800bdec:	f7ff fed6 	bl	800bb9c <__cvt>
 800bdf0:	9b06      	ldr	r3, [sp, #24]
 800bdf2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bdf4:	2b47      	cmp	r3, #71	@ 0x47
 800bdf6:	4680      	mov	r8, r0
 800bdf8:	d129      	bne.n	800be4e <_printf_float+0x172>
 800bdfa:	1cc8      	adds	r0, r1, #3
 800bdfc:	db02      	blt.n	800be04 <_printf_float+0x128>
 800bdfe:	6863      	ldr	r3, [r4, #4]
 800be00:	4299      	cmp	r1, r3
 800be02:	dd41      	ble.n	800be88 <_printf_float+0x1ac>
 800be04:	f1aa 0a02 	sub.w	sl, sl, #2
 800be08:	fa5f fa8a 	uxtb.w	sl, sl
 800be0c:	3901      	subs	r1, #1
 800be0e:	4652      	mov	r2, sl
 800be10:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800be14:	9109      	str	r1, [sp, #36]	@ 0x24
 800be16:	f7ff ff26 	bl	800bc66 <__exponent>
 800be1a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800be1c:	1813      	adds	r3, r2, r0
 800be1e:	2a01      	cmp	r2, #1
 800be20:	4681      	mov	r9, r0
 800be22:	6123      	str	r3, [r4, #16]
 800be24:	dc02      	bgt.n	800be2c <_printf_float+0x150>
 800be26:	6822      	ldr	r2, [r4, #0]
 800be28:	07d2      	lsls	r2, r2, #31
 800be2a:	d501      	bpl.n	800be30 <_printf_float+0x154>
 800be2c:	3301      	adds	r3, #1
 800be2e:	6123      	str	r3, [r4, #16]
 800be30:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800be34:	2b00      	cmp	r3, #0
 800be36:	d0a2      	beq.n	800bd7e <_printf_float+0xa2>
 800be38:	232d      	movs	r3, #45	@ 0x2d
 800be3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be3e:	e79e      	b.n	800bd7e <_printf_float+0xa2>
 800be40:	9a06      	ldr	r2, [sp, #24]
 800be42:	2a47      	cmp	r2, #71	@ 0x47
 800be44:	d1c2      	bne.n	800bdcc <_printf_float+0xf0>
 800be46:	2b00      	cmp	r3, #0
 800be48:	d1c0      	bne.n	800bdcc <_printf_float+0xf0>
 800be4a:	2301      	movs	r3, #1
 800be4c:	e7bd      	b.n	800bdca <_printf_float+0xee>
 800be4e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800be52:	d9db      	bls.n	800be0c <_printf_float+0x130>
 800be54:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800be58:	d118      	bne.n	800be8c <_printf_float+0x1b0>
 800be5a:	2900      	cmp	r1, #0
 800be5c:	6863      	ldr	r3, [r4, #4]
 800be5e:	dd0b      	ble.n	800be78 <_printf_float+0x19c>
 800be60:	6121      	str	r1, [r4, #16]
 800be62:	b913      	cbnz	r3, 800be6a <_printf_float+0x18e>
 800be64:	6822      	ldr	r2, [r4, #0]
 800be66:	07d0      	lsls	r0, r2, #31
 800be68:	d502      	bpl.n	800be70 <_printf_float+0x194>
 800be6a:	3301      	adds	r3, #1
 800be6c:	440b      	add	r3, r1
 800be6e:	6123      	str	r3, [r4, #16]
 800be70:	65a1      	str	r1, [r4, #88]	@ 0x58
 800be72:	f04f 0900 	mov.w	r9, #0
 800be76:	e7db      	b.n	800be30 <_printf_float+0x154>
 800be78:	b913      	cbnz	r3, 800be80 <_printf_float+0x1a4>
 800be7a:	6822      	ldr	r2, [r4, #0]
 800be7c:	07d2      	lsls	r2, r2, #31
 800be7e:	d501      	bpl.n	800be84 <_printf_float+0x1a8>
 800be80:	3302      	adds	r3, #2
 800be82:	e7f4      	b.n	800be6e <_printf_float+0x192>
 800be84:	2301      	movs	r3, #1
 800be86:	e7f2      	b.n	800be6e <_printf_float+0x192>
 800be88:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800be8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be8e:	4299      	cmp	r1, r3
 800be90:	db05      	blt.n	800be9e <_printf_float+0x1c2>
 800be92:	6823      	ldr	r3, [r4, #0]
 800be94:	6121      	str	r1, [r4, #16]
 800be96:	07d8      	lsls	r0, r3, #31
 800be98:	d5ea      	bpl.n	800be70 <_printf_float+0x194>
 800be9a:	1c4b      	adds	r3, r1, #1
 800be9c:	e7e7      	b.n	800be6e <_printf_float+0x192>
 800be9e:	2900      	cmp	r1, #0
 800bea0:	bfd4      	ite	le
 800bea2:	f1c1 0202 	rsble	r2, r1, #2
 800bea6:	2201      	movgt	r2, #1
 800bea8:	4413      	add	r3, r2
 800beaa:	e7e0      	b.n	800be6e <_printf_float+0x192>
 800beac:	6823      	ldr	r3, [r4, #0]
 800beae:	055a      	lsls	r2, r3, #21
 800beb0:	d407      	bmi.n	800bec2 <_printf_float+0x1e6>
 800beb2:	6923      	ldr	r3, [r4, #16]
 800beb4:	4642      	mov	r2, r8
 800beb6:	4631      	mov	r1, r6
 800beb8:	4628      	mov	r0, r5
 800beba:	47b8      	blx	r7
 800bebc:	3001      	adds	r0, #1
 800bebe:	d12b      	bne.n	800bf18 <_printf_float+0x23c>
 800bec0:	e767      	b.n	800bd92 <_printf_float+0xb6>
 800bec2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bec6:	f240 80dd 	bls.w	800c084 <_printf_float+0x3a8>
 800beca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bece:	2200      	movs	r2, #0
 800bed0:	2300      	movs	r3, #0
 800bed2:	f7f4 fdf9 	bl	8000ac8 <__aeabi_dcmpeq>
 800bed6:	2800      	cmp	r0, #0
 800bed8:	d033      	beq.n	800bf42 <_printf_float+0x266>
 800beda:	4a37      	ldr	r2, [pc, #220]	@ (800bfb8 <_printf_float+0x2dc>)
 800bedc:	2301      	movs	r3, #1
 800bede:	4631      	mov	r1, r6
 800bee0:	4628      	mov	r0, r5
 800bee2:	47b8      	blx	r7
 800bee4:	3001      	adds	r0, #1
 800bee6:	f43f af54 	beq.w	800bd92 <_printf_float+0xb6>
 800beea:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800beee:	4543      	cmp	r3, r8
 800bef0:	db02      	blt.n	800bef8 <_printf_float+0x21c>
 800bef2:	6823      	ldr	r3, [r4, #0]
 800bef4:	07d8      	lsls	r0, r3, #31
 800bef6:	d50f      	bpl.n	800bf18 <_printf_float+0x23c>
 800bef8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800befc:	4631      	mov	r1, r6
 800befe:	4628      	mov	r0, r5
 800bf00:	47b8      	blx	r7
 800bf02:	3001      	adds	r0, #1
 800bf04:	f43f af45 	beq.w	800bd92 <_printf_float+0xb6>
 800bf08:	f04f 0900 	mov.w	r9, #0
 800bf0c:	f108 38ff 	add.w	r8, r8, #4294967295
 800bf10:	f104 0a1a 	add.w	sl, r4, #26
 800bf14:	45c8      	cmp	r8, r9
 800bf16:	dc09      	bgt.n	800bf2c <_printf_float+0x250>
 800bf18:	6823      	ldr	r3, [r4, #0]
 800bf1a:	079b      	lsls	r3, r3, #30
 800bf1c:	f100 8103 	bmi.w	800c126 <_printf_float+0x44a>
 800bf20:	68e0      	ldr	r0, [r4, #12]
 800bf22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf24:	4298      	cmp	r0, r3
 800bf26:	bfb8      	it	lt
 800bf28:	4618      	movlt	r0, r3
 800bf2a:	e734      	b.n	800bd96 <_printf_float+0xba>
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	4652      	mov	r2, sl
 800bf30:	4631      	mov	r1, r6
 800bf32:	4628      	mov	r0, r5
 800bf34:	47b8      	blx	r7
 800bf36:	3001      	adds	r0, #1
 800bf38:	f43f af2b 	beq.w	800bd92 <_printf_float+0xb6>
 800bf3c:	f109 0901 	add.w	r9, r9, #1
 800bf40:	e7e8      	b.n	800bf14 <_printf_float+0x238>
 800bf42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	dc39      	bgt.n	800bfbc <_printf_float+0x2e0>
 800bf48:	4a1b      	ldr	r2, [pc, #108]	@ (800bfb8 <_printf_float+0x2dc>)
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	4631      	mov	r1, r6
 800bf4e:	4628      	mov	r0, r5
 800bf50:	47b8      	blx	r7
 800bf52:	3001      	adds	r0, #1
 800bf54:	f43f af1d 	beq.w	800bd92 <_printf_float+0xb6>
 800bf58:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bf5c:	ea59 0303 	orrs.w	r3, r9, r3
 800bf60:	d102      	bne.n	800bf68 <_printf_float+0x28c>
 800bf62:	6823      	ldr	r3, [r4, #0]
 800bf64:	07d9      	lsls	r1, r3, #31
 800bf66:	d5d7      	bpl.n	800bf18 <_printf_float+0x23c>
 800bf68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf6c:	4631      	mov	r1, r6
 800bf6e:	4628      	mov	r0, r5
 800bf70:	47b8      	blx	r7
 800bf72:	3001      	adds	r0, #1
 800bf74:	f43f af0d 	beq.w	800bd92 <_printf_float+0xb6>
 800bf78:	f04f 0a00 	mov.w	sl, #0
 800bf7c:	f104 0b1a 	add.w	fp, r4, #26
 800bf80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf82:	425b      	negs	r3, r3
 800bf84:	4553      	cmp	r3, sl
 800bf86:	dc01      	bgt.n	800bf8c <_printf_float+0x2b0>
 800bf88:	464b      	mov	r3, r9
 800bf8a:	e793      	b.n	800beb4 <_printf_float+0x1d8>
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	465a      	mov	r2, fp
 800bf90:	4631      	mov	r1, r6
 800bf92:	4628      	mov	r0, r5
 800bf94:	47b8      	blx	r7
 800bf96:	3001      	adds	r0, #1
 800bf98:	f43f aefb 	beq.w	800bd92 <_printf_float+0xb6>
 800bf9c:	f10a 0a01 	add.w	sl, sl, #1
 800bfa0:	e7ee      	b.n	800bf80 <_printf_float+0x2a4>
 800bfa2:	bf00      	nop
 800bfa4:	7fefffff 	.word	0x7fefffff
 800bfa8:	08012a09 	.word	0x08012a09
 800bfac:	08012a0d 	.word	0x08012a0d
 800bfb0:	08012a11 	.word	0x08012a11
 800bfb4:	08012a15 	.word	0x08012a15
 800bfb8:	08012a19 	.word	0x08012a19
 800bfbc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bfbe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bfc2:	4553      	cmp	r3, sl
 800bfc4:	bfa8      	it	ge
 800bfc6:	4653      	movge	r3, sl
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	4699      	mov	r9, r3
 800bfcc:	dc36      	bgt.n	800c03c <_printf_float+0x360>
 800bfce:	f04f 0b00 	mov.w	fp, #0
 800bfd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bfd6:	f104 021a 	add.w	r2, r4, #26
 800bfda:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bfdc:	9306      	str	r3, [sp, #24]
 800bfde:	eba3 0309 	sub.w	r3, r3, r9
 800bfe2:	455b      	cmp	r3, fp
 800bfe4:	dc31      	bgt.n	800c04a <_printf_float+0x36e>
 800bfe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfe8:	459a      	cmp	sl, r3
 800bfea:	dc3a      	bgt.n	800c062 <_printf_float+0x386>
 800bfec:	6823      	ldr	r3, [r4, #0]
 800bfee:	07da      	lsls	r2, r3, #31
 800bff0:	d437      	bmi.n	800c062 <_printf_float+0x386>
 800bff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bff4:	ebaa 0903 	sub.w	r9, sl, r3
 800bff8:	9b06      	ldr	r3, [sp, #24]
 800bffa:	ebaa 0303 	sub.w	r3, sl, r3
 800bffe:	4599      	cmp	r9, r3
 800c000:	bfa8      	it	ge
 800c002:	4699      	movge	r9, r3
 800c004:	f1b9 0f00 	cmp.w	r9, #0
 800c008:	dc33      	bgt.n	800c072 <_printf_float+0x396>
 800c00a:	f04f 0800 	mov.w	r8, #0
 800c00e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c012:	f104 0b1a 	add.w	fp, r4, #26
 800c016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c018:	ebaa 0303 	sub.w	r3, sl, r3
 800c01c:	eba3 0309 	sub.w	r3, r3, r9
 800c020:	4543      	cmp	r3, r8
 800c022:	f77f af79 	ble.w	800bf18 <_printf_float+0x23c>
 800c026:	2301      	movs	r3, #1
 800c028:	465a      	mov	r2, fp
 800c02a:	4631      	mov	r1, r6
 800c02c:	4628      	mov	r0, r5
 800c02e:	47b8      	blx	r7
 800c030:	3001      	adds	r0, #1
 800c032:	f43f aeae 	beq.w	800bd92 <_printf_float+0xb6>
 800c036:	f108 0801 	add.w	r8, r8, #1
 800c03a:	e7ec      	b.n	800c016 <_printf_float+0x33a>
 800c03c:	4642      	mov	r2, r8
 800c03e:	4631      	mov	r1, r6
 800c040:	4628      	mov	r0, r5
 800c042:	47b8      	blx	r7
 800c044:	3001      	adds	r0, #1
 800c046:	d1c2      	bne.n	800bfce <_printf_float+0x2f2>
 800c048:	e6a3      	b.n	800bd92 <_printf_float+0xb6>
 800c04a:	2301      	movs	r3, #1
 800c04c:	4631      	mov	r1, r6
 800c04e:	4628      	mov	r0, r5
 800c050:	9206      	str	r2, [sp, #24]
 800c052:	47b8      	blx	r7
 800c054:	3001      	adds	r0, #1
 800c056:	f43f ae9c 	beq.w	800bd92 <_printf_float+0xb6>
 800c05a:	9a06      	ldr	r2, [sp, #24]
 800c05c:	f10b 0b01 	add.w	fp, fp, #1
 800c060:	e7bb      	b.n	800bfda <_printf_float+0x2fe>
 800c062:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c066:	4631      	mov	r1, r6
 800c068:	4628      	mov	r0, r5
 800c06a:	47b8      	blx	r7
 800c06c:	3001      	adds	r0, #1
 800c06e:	d1c0      	bne.n	800bff2 <_printf_float+0x316>
 800c070:	e68f      	b.n	800bd92 <_printf_float+0xb6>
 800c072:	9a06      	ldr	r2, [sp, #24]
 800c074:	464b      	mov	r3, r9
 800c076:	4442      	add	r2, r8
 800c078:	4631      	mov	r1, r6
 800c07a:	4628      	mov	r0, r5
 800c07c:	47b8      	blx	r7
 800c07e:	3001      	adds	r0, #1
 800c080:	d1c3      	bne.n	800c00a <_printf_float+0x32e>
 800c082:	e686      	b.n	800bd92 <_printf_float+0xb6>
 800c084:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c088:	f1ba 0f01 	cmp.w	sl, #1
 800c08c:	dc01      	bgt.n	800c092 <_printf_float+0x3b6>
 800c08e:	07db      	lsls	r3, r3, #31
 800c090:	d536      	bpl.n	800c100 <_printf_float+0x424>
 800c092:	2301      	movs	r3, #1
 800c094:	4642      	mov	r2, r8
 800c096:	4631      	mov	r1, r6
 800c098:	4628      	mov	r0, r5
 800c09a:	47b8      	blx	r7
 800c09c:	3001      	adds	r0, #1
 800c09e:	f43f ae78 	beq.w	800bd92 <_printf_float+0xb6>
 800c0a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0a6:	4631      	mov	r1, r6
 800c0a8:	4628      	mov	r0, r5
 800c0aa:	47b8      	blx	r7
 800c0ac:	3001      	adds	r0, #1
 800c0ae:	f43f ae70 	beq.w	800bd92 <_printf_float+0xb6>
 800c0b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c0be:	f7f4 fd03 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0c2:	b9c0      	cbnz	r0, 800c0f6 <_printf_float+0x41a>
 800c0c4:	4653      	mov	r3, sl
 800c0c6:	f108 0201 	add.w	r2, r8, #1
 800c0ca:	4631      	mov	r1, r6
 800c0cc:	4628      	mov	r0, r5
 800c0ce:	47b8      	blx	r7
 800c0d0:	3001      	adds	r0, #1
 800c0d2:	d10c      	bne.n	800c0ee <_printf_float+0x412>
 800c0d4:	e65d      	b.n	800bd92 <_printf_float+0xb6>
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	465a      	mov	r2, fp
 800c0da:	4631      	mov	r1, r6
 800c0dc:	4628      	mov	r0, r5
 800c0de:	47b8      	blx	r7
 800c0e0:	3001      	adds	r0, #1
 800c0e2:	f43f ae56 	beq.w	800bd92 <_printf_float+0xb6>
 800c0e6:	f108 0801 	add.w	r8, r8, #1
 800c0ea:	45d0      	cmp	r8, sl
 800c0ec:	dbf3      	blt.n	800c0d6 <_printf_float+0x3fa>
 800c0ee:	464b      	mov	r3, r9
 800c0f0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c0f4:	e6df      	b.n	800beb6 <_printf_float+0x1da>
 800c0f6:	f04f 0800 	mov.w	r8, #0
 800c0fa:	f104 0b1a 	add.w	fp, r4, #26
 800c0fe:	e7f4      	b.n	800c0ea <_printf_float+0x40e>
 800c100:	2301      	movs	r3, #1
 800c102:	4642      	mov	r2, r8
 800c104:	e7e1      	b.n	800c0ca <_printf_float+0x3ee>
 800c106:	2301      	movs	r3, #1
 800c108:	464a      	mov	r2, r9
 800c10a:	4631      	mov	r1, r6
 800c10c:	4628      	mov	r0, r5
 800c10e:	47b8      	blx	r7
 800c110:	3001      	adds	r0, #1
 800c112:	f43f ae3e 	beq.w	800bd92 <_printf_float+0xb6>
 800c116:	f108 0801 	add.w	r8, r8, #1
 800c11a:	68e3      	ldr	r3, [r4, #12]
 800c11c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c11e:	1a5b      	subs	r3, r3, r1
 800c120:	4543      	cmp	r3, r8
 800c122:	dcf0      	bgt.n	800c106 <_printf_float+0x42a>
 800c124:	e6fc      	b.n	800bf20 <_printf_float+0x244>
 800c126:	f04f 0800 	mov.w	r8, #0
 800c12a:	f104 0919 	add.w	r9, r4, #25
 800c12e:	e7f4      	b.n	800c11a <_printf_float+0x43e>

0800c130 <_printf_common>:
 800c130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c134:	4616      	mov	r6, r2
 800c136:	4698      	mov	r8, r3
 800c138:	688a      	ldr	r2, [r1, #8]
 800c13a:	690b      	ldr	r3, [r1, #16]
 800c13c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c140:	4293      	cmp	r3, r2
 800c142:	bfb8      	it	lt
 800c144:	4613      	movlt	r3, r2
 800c146:	6033      	str	r3, [r6, #0]
 800c148:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c14c:	4607      	mov	r7, r0
 800c14e:	460c      	mov	r4, r1
 800c150:	b10a      	cbz	r2, 800c156 <_printf_common+0x26>
 800c152:	3301      	adds	r3, #1
 800c154:	6033      	str	r3, [r6, #0]
 800c156:	6823      	ldr	r3, [r4, #0]
 800c158:	0699      	lsls	r1, r3, #26
 800c15a:	bf42      	ittt	mi
 800c15c:	6833      	ldrmi	r3, [r6, #0]
 800c15e:	3302      	addmi	r3, #2
 800c160:	6033      	strmi	r3, [r6, #0]
 800c162:	6825      	ldr	r5, [r4, #0]
 800c164:	f015 0506 	ands.w	r5, r5, #6
 800c168:	d106      	bne.n	800c178 <_printf_common+0x48>
 800c16a:	f104 0a19 	add.w	sl, r4, #25
 800c16e:	68e3      	ldr	r3, [r4, #12]
 800c170:	6832      	ldr	r2, [r6, #0]
 800c172:	1a9b      	subs	r3, r3, r2
 800c174:	42ab      	cmp	r3, r5
 800c176:	dc26      	bgt.n	800c1c6 <_printf_common+0x96>
 800c178:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c17c:	6822      	ldr	r2, [r4, #0]
 800c17e:	3b00      	subs	r3, #0
 800c180:	bf18      	it	ne
 800c182:	2301      	movne	r3, #1
 800c184:	0692      	lsls	r2, r2, #26
 800c186:	d42b      	bmi.n	800c1e0 <_printf_common+0xb0>
 800c188:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c18c:	4641      	mov	r1, r8
 800c18e:	4638      	mov	r0, r7
 800c190:	47c8      	blx	r9
 800c192:	3001      	adds	r0, #1
 800c194:	d01e      	beq.n	800c1d4 <_printf_common+0xa4>
 800c196:	6823      	ldr	r3, [r4, #0]
 800c198:	6922      	ldr	r2, [r4, #16]
 800c19a:	f003 0306 	and.w	r3, r3, #6
 800c19e:	2b04      	cmp	r3, #4
 800c1a0:	bf02      	ittt	eq
 800c1a2:	68e5      	ldreq	r5, [r4, #12]
 800c1a4:	6833      	ldreq	r3, [r6, #0]
 800c1a6:	1aed      	subeq	r5, r5, r3
 800c1a8:	68a3      	ldr	r3, [r4, #8]
 800c1aa:	bf0c      	ite	eq
 800c1ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c1b0:	2500      	movne	r5, #0
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	bfc4      	itt	gt
 800c1b6:	1a9b      	subgt	r3, r3, r2
 800c1b8:	18ed      	addgt	r5, r5, r3
 800c1ba:	2600      	movs	r6, #0
 800c1bc:	341a      	adds	r4, #26
 800c1be:	42b5      	cmp	r5, r6
 800c1c0:	d11a      	bne.n	800c1f8 <_printf_common+0xc8>
 800c1c2:	2000      	movs	r0, #0
 800c1c4:	e008      	b.n	800c1d8 <_printf_common+0xa8>
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	4652      	mov	r2, sl
 800c1ca:	4641      	mov	r1, r8
 800c1cc:	4638      	mov	r0, r7
 800c1ce:	47c8      	blx	r9
 800c1d0:	3001      	adds	r0, #1
 800c1d2:	d103      	bne.n	800c1dc <_printf_common+0xac>
 800c1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1dc:	3501      	adds	r5, #1
 800c1de:	e7c6      	b.n	800c16e <_printf_common+0x3e>
 800c1e0:	18e1      	adds	r1, r4, r3
 800c1e2:	1c5a      	adds	r2, r3, #1
 800c1e4:	2030      	movs	r0, #48	@ 0x30
 800c1e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c1ea:	4422      	add	r2, r4
 800c1ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c1f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c1f4:	3302      	adds	r3, #2
 800c1f6:	e7c7      	b.n	800c188 <_printf_common+0x58>
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	4622      	mov	r2, r4
 800c1fc:	4641      	mov	r1, r8
 800c1fe:	4638      	mov	r0, r7
 800c200:	47c8      	blx	r9
 800c202:	3001      	adds	r0, #1
 800c204:	d0e6      	beq.n	800c1d4 <_printf_common+0xa4>
 800c206:	3601      	adds	r6, #1
 800c208:	e7d9      	b.n	800c1be <_printf_common+0x8e>
	...

0800c20c <_printf_i>:
 800c20c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c210:	7e0f      	ldrb	r7, [r1, #24]
 800c212:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c214:	2f78      	cmp	r7, #120	@ 0x78
 800c216:	4691      	mov	r9, r2
 800c218:	4680      	mov	r8, r0
 800c21a:	460c      	mov	r4, r1
 800c21c:	469a      	mov	sl, r3
 800c21e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c222:	d807      	bhi.n	800c234 <_printf_i+0x28>
 800c224:	2f62      	cmp	r7, #98	@ 0x62
 800c226:	d80a      	bhi.n	800c23e <_printf_i+0x32>
 800c228:	2f00      	cmp	r7, #0
 800c22a:	f000 80d2 	beq.w	800c3d2 <_printf_i+0x1c6>
 800c22e:	2f58      	cmp	r7, #88	@ 0x58
 800c230:	f000 80b9 	beq.w	800c3a6 <_printf_i+0x19a>
 800c234:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c238:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c23c:	e03a      	b.n	800c2b4 <_printf_i+0xa8>
 800c23e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c242:	2b15      	cmp	r3, #21
 800c244:	d8f6      	bhi.n	800c234 <_printf_i+0x28>
 800c246:	a101      	add	r1, pc, #4	@ (adr r1, 800c24c <_printf_i+0x40>)
 800c248:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c24c:	0800c2a5 	.word	0x0800c2a5
 800c250:	0800c2b9 	.word	0x0800c2b9
 800c254:	0800c235 	.word	0x0800c235
 800c258:	0800c235 	.word	0x0800c235
 800c25c:	0800c235 	.word	0x0800c235
 800c260:	0800c235 	.word	0x0800c235
 800c264:	0800c2b9 	.word	0x0800c2b9
 800c268:	0800c235 	.word	0x0800c235
 800c26c:	0800c235 	.word	0x0800c235
 800c270:	0800c235 	.word	0x0800c235
 800c274:	0800c235 	.word	0x0800c235
 800c278:	0800c3b9 	.word	0x0800c3b9
 800c27c:	0800c2e3 	.word	0x0800c2e3
 800c280:	0800c373 	.word	0x0800c373
 800c284:	0800c235 	.word	0x0800c235
 800c288:	0800c235 	.word	0x0800c235
 800c28c:	0800c3db 	.word	0x0800c3db
 800c290:	0800c235 	.word	0x0800c235
 800c294:	0800c2e3 	.word	0x0800c2e3
 800c298:	0800c235 	.word	0x0800c235
 800c29c:	0800c235 	.word	0x0800c235
 800c2a0:	0800c37b 	.word	0x0800c37b
 800c2a4:	6833      	ldr	r3, [r6, #0]
 800c2a6:	1d1a      	adds	r2, r3, #4
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	6032      	str	r2, [r6, #0]
 800c2ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c2b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	e09d      	b.n	800c3f4 <_printf_i+0x1e8>
 800c2b8:	6833      	ldr	r3, [r6, #0]
 800c2ba:	6820      	ldr	r0, [r4, #0]
 800c2bc:	1d19      	adds	r1, r3, #4
 800c2be:	6031      	str	r1, [r6, #0]
 800c2c0:	0606      	lsls	r6, r0, #24
 800c2c2:	d501      	bpl.n	800c2c8 <_printf_i+0xbc>
 800c2c4:	681d      	ldr	r5, [r3, #0]
 800c2c6:	e003      	b.n	800c2d0 <_printf_i+0xc4>
 800c2c8:	0645      	lsls	r5, r0, #25
 800c2ca:	d5fb      	bpl.n	800c2c4 <_printf_i+0xb8>
 800c2cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c2d0:	2d00      	cmp	r5, #0
 800c2d2:	da03      	bge.n	800c2dc <_printf_i+0xd0>
 800c2d4:	232d      	movs	r3, #45	@ 0x2d
 800c2d6:	426d      	negs	r5, r5
 800c2d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c2dc:	4859      	ldr	r0, [pc, #356]	@ (800c444 <_printf_i+0x238>)
 800c2de:	230a      	movs	r3, #10
 800c2e0:	e011      	b.n	800c306 <_printf_i+0xfa>
 800c2e2:	6821      	ldr	r1, [r4, #0]
 800c2e4:	6833      	ldr	r3, [r6, #0]
 800c2e6:	0608      	lsls	r0, r1, #24
 800c2e8:	f853 5b04 	ldr.w	r5, [r3], #4
 800c2ec:	d402      	bmi.n	800c2f4 <_printf_i+0xe8>
 800c2ee:	0649      	lsls	r1, r1, #25
 800c2f0:	bf48      	it	mi
 800c2f2:	b2ad      	uxthmi	r5, r5
 800c2f4:	2f6f      	cmp	r7, #111	@ 0x6f
 800c2f6:	4853      	ldr	r0, [pc, #332]	@ (800c444 <_printf_i+0x238>)
 800c2f8:	6033      	str	r3, [r6, #0]
 800c2fa:	bf14      	ite	ne
 800c2fc:	230a      	movne	r3, #10
 800c2fe:	2308      	moveq	r3, #8
 800c300:	2100      	movs	r1, #0
 800c302:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c306:	6866      	ldr	r6, [r4, #4]
 800c308:	60a6      	str	r6, [r4, #8]
 800c30a:	2e00      	cmp	r6, #0
 800c30c:	bfa2      	ittt	ge
 800c30e:	6821      	ldrge	r1, [r4, #0]
 800c310:	f021 0104 	bicge.w	r1, r1, #4
 800c314:	6021      	strge	r1, [r4, #0]
 800c316:	b90d      	cbnz	r5, 800c31c <_printf_i+0x110>
 800c318:	2e00      	cmp	r6, #0
 800c31a:	d04b      	beq.n	800c3b4 <_printf_i+0x1a8>
 800c31c:	4616      	mov	r6, r2
 800c31e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c322:	fb03 5711 	mls	r7, r3, r1, r5
 800c326:	5dc7      	ldrb	r7, [r0, r7]
 800c328:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c32c:	462f      	mov	r7, r5
 800c32e:	42bb      	cmp	r3, r7
 800c330:	460d      	mov	r5, r1
 800c332:	d9f4      	bls.n	800c31e <_printf_i+0x112>
 800c334:	2b08      	cmp	r3, #8
 800c336:	d10b      	bne.n	800c350 <_printf_i+0x144>
 800c338:	6823      	ldr	r3, [r4, #0]
 800c33a:	07df      	lsls	r7, r3, #31
 800c33c:	d508      	bpl.n	800c350 <_printf_i+0x144>
 800c33e:	6923      	ldr	r3, [r4, #16]
 800c340:	6861      	ldr	r1, [r4, #4]
 800c342:	4299      	cmp	r1, r3
 800c344:	bfde      	ittt	le
 800c346:	2330      	movle	r3, #48	@ 0x30
 800c348:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c34c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c350:	1b92      	subs	r2, r2, r6
 800c352:	6122      	str	r2, [r4, #16]
 800c354:	f8cd a000 	str.w	sl, [sp]
 800c358:	464b      	mov	r3, r9
 800c35a:	aa03      	add	r2, sp, #12
 800c35c:	4621      	mov	r1, r4
 800c35e:	4640      	mov	r0, r8
 800c360:	f7ff fee6 	bl	800c130 <_printf_common>
 800c364:	3001      	adds	r0, #1
 800c366:	d14a      	bne.n	800c3fe <_printf_i+0x1f2>
 800c368:	f04f 30ff 	mov.w	r0, #4294967295
 800c36c:	b004      	add	sp, #16
 800c36e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c372:	6823      	ldr	r3, [r4, #0]
 800c374:	f043 0320 	orr.w	r3, r3, #32
 800c378:	6023      	str	r3, [r4, #0]
 800c37a:	4833      	ldr	r0, [pc, #204]	@ (800c448 <_printf_i+0x23c>)
 800c37c:	2778      	movs	r7, #120	@ 0x78
 800c37e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c382:	6823      	ldr	r3, [r4, #0]
 800c384:	6831      	ldr	r1, [r6, #0]
 800c386:	061f      	lsls	r7, r3, #24
 800c388:	f851 5b04 	ldr.w	r5, [r1], #4
 800c38c:	d402      	bmi.n	800c394 <_printf_i+0x188>
 800c38e:	065f      	lsls	r7, r3, #25
 800c390:	bf48      	it	mi
 800c392:	b2ad      	uxthmi	r5, r5
 800c394:	6031      	str	r1, [r6, #0]
 800c396:	07d9      	lsls	r1, r3, #31
 800c398:	bf44      	itt	mi
 800c39a:	f043 0320 	orrmi.w	r3, r3, #32
 800c39e:	6023      	strmi	r3, [r4, #0]
 800c3a0:	b11d      	cbz	r5, 800c3aa <_printf_i+0x19e>
 800c3a2:	2310      	movs	r3, #16
 800c3a4:	e7ac      	b.n	800c300 <_printf_i+0xf4>
 800c3a6:	4827      	ldr	r0, [pc, #156]	@ (800c444 <_printf_i+0x238>)
 800c3a8:	e7e9      	b.n	800c37e <_printf_i+0x172>
 800c3aa:	6823      	ldr	r3, [r4, #0]
 800c3ac:	f023 0320 	bic.w	r3, r3, #32
 800c3b0:	6023      	str	r3, [r4, #0]
 800c3b2:	e7f6      	b.n	800c3a2 <_printf_i+0x196>
 800c3b4:	4616      	mov	r6, r2
 800c3b6:	e7bd      	b.n	800c334 <_printf_i+0x128>
 800c3b8:	6833      	ldr	r3, [r6, #0]
 800c3ba:	6825      	ldr	r5, [r4, #0]
 800c3bc:	6961      	ldr	r1, [r4, #20]
 800c3be:	1d18      	adds	r0, r3, #4
 800c3c0:	6030      	str	r0, [r6, #0]
 800c3c2:	062e      	lsls	r6, r5, #24
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	d501      	bpl.n	800c3cc <_printf_i+0x1c0>
 800c3c8:	6019      	str	r1, [r3, #0]
 800c3ca:	e002      	b.n	800c3d2 <_printf_i+0x1c6>
 800c3cc:	0668      	lsls	r0, r5, #25
 800c3ce:	d5fb      	bpl.n	800c3c8 <_printf_i+0x1bc>
 800c3d0:	8019      	strh	r1, [r3, #0]
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	6123      	str	r3, [r4, #16]
 800c3d6:	4616      	mov	r6, r2
 800c3d8:	e7bc      	b.n	800c354 <_printf_i+0x148>
 800c3da:	6833      	ldr	r3, [r6, #0]
 800c3dc:	1d1a      	adds	r2, r3, #4
 800c3de:	6032      	str	r2, [r6, #0]
 800c3e0:	681e      	ldr	r6, [r3, #0]
 800c3e2:	6862      	ldr	r2, [r4, #4]
 800c3e4:	2100      	movs	r1, #0
 800c3e6:	4630      	mov	r0, r6
 800c3e8:	f7f3 fef2 	bl	80001d0 <memchr>
 800c3ec:	b108      	cbz	r0, 800c3f2 <_printf_i+0x1e6>
 800c3ee:	1b80      	subs	r0, r0, r6
 800c3f0:	6060      	str	r0, [r4, #4]
 800c3f2:	6863      	ldr	r3, [r4, #4]
 800c3f4:	6123      	str	r3, [r4, #16]
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c3fc:	e7aa      	b.n	800c354 <_printf_i+0x148>
 800c3fe:	6923      	ldr	r3, [r4, #16]
 800c400:	4632      	mov	r2, r6
 800c402:	4649      	mov	r1, r9
 800c404:	4640      	mov	r0, r8
 800c406:	47d0      	blx	sl
 800c408:	3001      	adds	r0, #1
 800c40a:	d0ad      	beq.n	800c368 <_printf_i+0x15c>
 800c40c:	6823      	ldr	r3, [r4, #0]
 800c40e:	079b      	lsls	r3, r3, #30
 800c410:	d413      	bmi.n	800c43a <_printf_i+0x22e>
 800c412:	68e0      	ldr	r0, [r4, #12]
 800c414:	9b03      	ldr	r3, [sp, #12]
 800c416:	4298      	cmp	r0, r3
 800c418:	bfb8      	it	lt
 800c41a:	4618      	movlt	r0, r3
 800c41c:	e7a6      	b.n	800c36c <_printf_i+0x160>
 800c41e:	2301      	movs	r3, #1
 800c420:	4632      	mov	r2, r6
 800c422:	4649      	mov	r1, r9
 800c424:	4640      	mov	r0, r8
 800c426:	47d0      	blx	sl
 800c428:	3001      	adds	r0, #1
 800c42a:	d09d      	beq.n	800c368 <_printf_i+0x15c>
 800c42c:	3501      	adds	r5, #1
 800c42e:	68e3      	ldr	r3, [r4, #12]
 800c430:	9903      	ldr	r1, [sp, #12]
 800c432:	1a5b      	subs	r3, r3, r1
 800c434:	42ab      	cmp	r3, r5
 800c436:	dcf2      	bgt.n	800c41e <_printf_i+0x212>
 800c438:	e7eb      	b.n	800c412 <_printf_i+0x206>
 800c43a:	2500      	movs	r5, #0
 800c43c:	f104 0619 	add.w	r6, r4, #25
 800c440:	e7f5      	b.n	800c42e <_printf_i+0x222>
 800c442:	bf00      	nop
 800c444:	08012a1b 	.word	0x08012a1b
 800c448:	08012a2c 	.word	0x08012a2c

0800c44c <std>:
 800c44c:	2300      	movs	r3, #0
 800c44e:	b510      	push	{r4, lr}
 800c450:	4604      	mov	r4, r0
 800c452:	e9c0 3300 	strd	r3, r3, [r0]
 800c456:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c45a:	6083      	str	r3, [r0, #8]
 800c45c:	8181      	strh	r1, [r0, #12]
 800c45e:	6643      	str	r3, [r0, #100]	@ 0x64
 800c460:	81c2      	strh	r2, [r0, #14]
 800c462:	6183      	str	r3, [r0, #24]
 800c464:	4619      	mov	r1, r3
 800c466:	2208      	movs	r2, #8
 800c468:	305c      	adds	r0, #92	@ 0x5c
 800c46a:	f000 fa29 	bl	800c8c0 <memset>
 800c46e:	4b0d      	ldr	r3, [pc, #52]	@ (800c4a4 <std+0x58>)
 800c470:	6263      	str	r3, [r4, #36]	@ 0x24
 800c472:	4b0d      	ldr	r3, [pc, #52]	@ (800c4a8 <std+0x5c>)
 800c474:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c476:	4b0d      	ldr	r3, [pc, #52]	@ (800c4ac <std+0x60>)
 800c478:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c47a:	4b0d      	ldr	r3, [pc, #52]	@ (800c4b0 <std+0x64>)
 800c47c:	6323      	str	r3, [r4, #48]	@ 0x30
 800c47e:	4b0d      	ldr	r3, [pc, #52]	@ (800c4b4 <std+0x68>)
 800c480:	6224      	str	r4, [r4, #32]
 800c482:	429c      	cmp	r4, r3
 800c484:	d006      	beq.n	800c494 <std+0x48>
 800c486:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c48a:	4294      	cmp	r4, r2
 800c48c:	d002      	beq.n	800c494 <std+0x48>
 800c48e:	33d0      	adds	r3, #208	@ 0xd0
 800c490:	429c      	cmp	r4, r3
 800c492:	d105      	bne.n	800c4a0 <std+0x54>
 800c494:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c49c:	f000 bb12 	b.w	800cac4 <__retarget_lock_init_recursive>
 800c4a0:	bd10      	pop	{r4, pc}
 800c4a2:	bf00      	nop
 800c4a4:	0800c6f1 	.word	0x0800c6f1
 800c4a8:	0800c713 	.word	0x0800c713
 800c4ac:	0800c74b 	.word	0x0800c74b
 800c4b0:	0800c76f 	.word	0x0800c76f
 800c4b4:	200012f8 	.word	0x200012f8

0800c4b8 <stdio_exit_handler>:
 800c4b8:	4a02      	ldr	r2, [pc, #8]	@ (800c4c4 <stdio_exit_handler+0xc>)
 800c4ba:	4903      	ldr	r1, [pc, #12]	@ (800c4c8 <stdio_exit_handler+0x10>)
 800c4bc:	4803      	ldr	r0, [pc, #12]	@ (800c4cc <stdio_exit_handler+0x14>)
 800c4be:	f000 b869 	b.w	800c594 <_fwalk_sglue>
 800c4c2:	bf00      	nop
 800c4c4:	2000015c 	.word	0x2000015c
 800c4c8:	0800e701 	.word	0x0800e701
 800c4cc:	2000016c 	.word	0x2000016c

0800c4d0 <cleanup_stdio>:
 800c4d0:	6841      	ldr	r1, [r0, #4]
 800c4d2:	4b0c      	ldr	r3, [pc, #48]	@ (800c504 <cleanup_stdio+0x34>)
 800c4d4:	4299      	cmp	r1, r3
 800c4d6:	b510      	push	{r4, lr}
 800c4d8:	4604      	mov	r4, r0
 800c4da:	d001      	beq.n	800c4e0 <cleanup_stdio+0x10>
 800c4dc:	f002 f910 	bl	800e700 <_fflush_r>
 800c4e0:	68a1      	ldr	r1, [r4, #8]
 800c4e2:	4b09      	ldr	r3, [pc, #36]	@ (800c508 <cleanup_stdio+0x38>)
 800c4e4:	4299      	cmp	r1, r3
 800c4e6:	d002      	beq.n	800c4ee <cleanup_stdio+0x1e>
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	f002 f909 	bl	800e700 <_fflush_r>
 800c4ee:	68e1      	ldr	r1, [r4, #12]
 800c4f0:	4b06      	ldr	r3, [pc, #24]	@ (800c50c <cleanup_stdio+0x3c>)
 800c4f2:	4299      	cmp	r1, r3
 800c4f4:	d004      	beq.n	800c500 <cleanup_stdio+0x30>
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4fc:	f002 b900 	b.w	800e700 <_fflush_r>
 800c500:	bd10      	pop	{r4, pc}
 800c502:	bf00      	nop
 800c504:	200012f8 	.word	0x200012f8
 800c508:	20001360 	.word	0x20001360
 800c50c:	200013c8 	.word	0x200013c8

0800c510 <global_stdio_init.part.0>:
 800c510:	b510      	push	{r4, lr}
 800c512:	4b0b      	ldr	r3, [pc, #44]	@ (800c540 <global_stdio_init.part.0+0x30>)
 800c514:	4c0b      	ldr	r4, [pc, #44]	@ (800c544 <global_stdio_init.part.0+0x34>)
 800c516:	4a0c      	ldr	r2, [pc, #48]	@ (800c548 <global_stdio_init.part.0+0x38>)
 800c518:	601a      	str	r2, [r3, #0]
 800c51a:	4620      	mov	r0, r4
 800c51c:	2200      	movs	r2, #0
 800c51e:	2104      	movs	r1, #4
 800c520:	f7ff ff94 	bl	800c44c <std>
 800c524:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c528:	2201      	movs	r2, #1
 800c52a:	2109      	movs	r1, #9
 800c52c:	f7ff ff8e 	bl	800c44c <std>
 800c530:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c534:	2202      	movs	r2, #2
 800c536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c53a:	2112      	movs	r1, #18
 800c53c:	f7ff bf86 	b.w	800c44c <std>
 800c540:	20001430 	.word	0x20001430
 800c544:	200012f8 	.word	0x200012f8
 800c548:	0800c4b9 	.word	0x0800c4b9

0800c54c <__sfp_lock_acquire>:
 800c54c:	4801      	ldr	r0, [pc, #4]	@ (800c554 <__sfp_lock_acquire+0x8>)
 800c54e:	f000 baba 	b.w	800cac6 <__retarget_lock_acquire_recursive>
 800c552:	bf00      	nop
 800c554:	20001439 	.word	0x20001439

0800c558 <__sfp_lock_release>:
 800c558:	4801      	ldr	r0, [pc, #4]	@ (800c560 <__sfp_lock_release+0x8>)
 800c55a:	f000 bab5 	b.w	800cac8 <__retarget_lock_release_recursive>
 800c55e:	bf00      	nop
 800c560:	20001439 	.word	0x20001439

0800c564 <__sinit>:
 800c564:	b510      	push	{r4, lr}
 800c566:	4604      	mov	r4, r0
 800c568:	f7ff fff0 	bl	800c54c <__sfp_lock_acquire>
 800c56c:	6a23      	ldr	r3, [r4, #32]
 800c56e:	b11b      	cbz	r3, 800c578 <__sinit+0x14>
 800c570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c574:	f7ff bff0 	b.w	800c558 <__sfp_lock_release>
 800c578:	4b04      	ldr	r3, [pc, #16]	@ (800c58c <__sinit+0x28>)
 800c57a:	6223      	str	r3, [r4, #32]
 800c57c:	4b04      	ldr	r3, [pc, #16]	@ (800c590 <__sinit+0x2c>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d1f5      	bne.n	800c570 <__sinit+0xc>
 800c584:	f7ff ffc4 	bl	800c510 <global_stdio_init.part.0>
 800c588:	e7f2      	b.n	800c570 <__sinit+0xc>
 800c58a:	bf00      	nop
 800c58c:	0800c4d1 	.word	0x0800c4d1
 800c590:	20001430 	.word	0x20001430

0800c594 <_fwalk_sglue>:
 800c594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c598:	4607      	mov	r7, r0
 800c59a:	4688      	mov	r8, r1
 800c59c:	4614      	mov	r4, r2
 800c59e:	2600      	movs	r6, #0
 800c5a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c5a4:	f1b9 0901 	subs.w	r9, r9, #1
 800c5a8:	d505      	bpl.n	800c5b6 <_fwalk_sglue+0x22>
 800c5aa:	6824      	ldr	r4, [r4, #0]
 800c5ac:	2c00      	cmp	r4, #0
 800c5ae:	d1f7      	bne.n	800c5a0 <_fwalk_sglue+0xc>
 800c5b0:	4630      	mov	r0, r6
 800c5b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5b6:	89ab      	ldrh	r3, [r5, #12]
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	d907      	bls.n	800c5cc <_fwalk_sglue+0x38>
 800c5bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c5c0:	3301      	adds	r3, #1
 800c5c2:	d003      	beq.n	800c5cc <_fwalk_sglue+0x38>
 800c5c4:	4629      	mov	r1, r5
 800c5c6:	4638      	mov	r0, r7
 800c5c8:	47c0      	blx	r8
 800c5ca:	4306      	orrs	r6, r0
 800c5cc:	3568      	adds	r5, #104	@ 0x68
 800c5ce:	e7e9      	b.n	800c5a4 <_fwalk_sglue+0x10>

0800c5d0 <iprintf>:
 800c5d0:	b40f      	push	{r0, r1, r2, r3}
 800c5d2:	b507      	push	{r0, r1, r2, lr}
 800c5d4:	4906      	ldr	r1, [pc, #24]	@ (800c5f0 <iprintf+0x20>)
 800c5d6:	ab04      	add	r3, sp, #16
 800c5d8:	6808      	ldr	r0, [r1, #0]
 800c5da:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5de:	6881      	ldr	r1, [r0, #8]
 800c5e0:	9301      	str	r3, [sp, #4]
 800c5e2:	f001 fef1 	bl	800e3c8 <_vfiprintf_r>
 800c5e6:	b003      	add	sp, #12
 800c5e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5ec:	b004      	add	sp, #16
 800c5ee:	4770      	bx	lr
 800c5f0:	20000168 	.word	0x20000168

0800c5f4 <_puts_r>:
 800c5f4:	6a03      	ldr	r3, [r0, #32]
 800c5f6:	b570      	push	{r4, r5, r6, lr}
 800c5f8:	6884      	ldr	r4, [r0, #8]
 800c5fa:	4605      	mov	r5, r0
 800c5fc:	460e      	mov	r6, r1
 800c5fe:	b90b      	cbnz	r3, 800c604 <_puts_r+0x10>
 800c600:	f7ff ffb0 	bl	800c564 <__sinit>
 800c604:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c606:	07db      	lsls	r3, r3, #31
 800c608:	d405      	bmi.n	800c616 <_puts_r+0x22>
 800c60a:	89a3      	ldrh	r3, [r4, #12]
 800c60c:	0598      	lsls	r0, r3, #22
 800c60e:	d402      	bmi.n	800c616 <_puts_r+0x22>
 800c610:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c612:	f000 fa58 	bl	800cac6 <__retarget_lock_acquire_recursive>
 800c616:	89a3      	ldrh	r3, [r4, #12]
 800c618:	0719      	lsls	r1, r3, #28
 800c61a:	d502      	bpl.n	800c622 <_puts_r+0x2e>
 800c61c:	6923      	ldr	r3, [r4, #16]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d135      	bne.n	800c68e <_puts_r+0x9a>
 800c622:	4621      	mov	r1, r4
 800c624:	4628      	mov	r0, r5
 800c626:	f000 f8e5 	bl	800c7f4 <__swsetup_r>
 800c62a:	b380      	cbz	r0, 800c68e <_puts_r+0x9a>
 800c62c:	f04f 35ff 	mov.w	r5, #4294967295
 800c630:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c632:	07da      	lsls	r2, r3, #31
 800c634:	d405      	bmi.n	800c642 <_puts_r+0x4e>
 800c636:	89a3      	ldrh	r3, [r4, #12]
 800c638:	059b      	lsls	r3, r3, #22
 800c63a:	d402      	bmi.n	800c642 <_puts_r+0x4e>
 800c63c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c63e:	f000 fa43 	bl	800cac8 <__retarget_lock_release_recursive>
 800c642:	4628      	mov	r0, r5
 800c644:	bd70      	pop	{r4, r5, r6, pc}
 800c646:	2b00      	cmp	r3, #0
 800c648:	da04      	bge.n	800c654 <_puts_r+0x60>
 800c64a:	69a2      	ldr	r2, [r4, #24]
 800c64c:	429a      	cmp	r2, r3
 800c64e:	dc17      	bgt.n	800c680 <_puts_r+0x8c>
 800c650:	290a      	cmp	r1, #10
 800c652:	d015      	beq.n	800c680 <_puts_r+0x8c>
 800c654:	6823      	ldr	r3, [r4, #0]
 800c656:	1c5a      	adds	r2, r3, #1
 800c658:	6022      	str	r2, [r4, #0]
 800c65a:	7019      	strb	r1, [r3, #0]
 800c65c:	68a3      	ldr	r3, [r4, #8]
 800c65e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c662:	3b01      	subs	r3, #1
 800c664:	60a3      	str	r3, [r4, #8]
 800c666:	2900      	cmp	r1, #0
 800c668:	d1ed      	bne.n	800c646 <_puts_r+0x52>
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	da11      	bge.n	800c692 <_puts_r+0x9e>
 800c66e:	4622      	mov	r2, r4
 800c670:	210a      	movs	r1, #10
 800c672:	4628      	mov	r0, r5
 800c674:	f000 f87f 	bl	800c776 <__swbuf_r>
 800c678:	3001      	adds	r0, #1
 800c67a:	d0d7      	beq.n	800c62c <_puts_r+0x38>
 800c67c:	250a      	movs	r5, #10
 800c67e:	e7d7      	b.n	800c630 <_puts_r+0x3c>
 800c680:	4622      	mov	r2, r4
 800c682:	4628      	mov	r0, r5
 800c684:	f000 f877 	bl	800c776 <__swbuf_r>
 800c688:	3001      	adds	r0, #1
 800c68a:	d1e7      	bne.n	800c65c <_puts_r+0x68>
 800c68c:	e7ce      	b.n	800c62c <_puts_r+0x38>
 800c68e:	3e01      	subs	r6, #1
 800c690:	e7e4      	b.n	800c65c <_puts_r+0x68>
 800c692:	6823      	ldr	r3, [r4, #0]
 800c694:	1c5a      	adds	r2, r3, #1
 800c696:	6022      	str	r2, [r4, #0]
 800c698:	220a      	movs	r2, #10
 800c69a:	701a      	strb	r2, [r3, #0]
 800c69c:	e7ee      	b.n	800c67c <_puts_r+0x88>
	...

0800c6a0 <puts>:
 800c6a0:	4b02      	ldr	r3, [pc, #8]	@ (800c6ac <puts+0xc>)
 800c6a2:	4601      	mov	r1, r0
 800c6a4:	6818      	ldr	r0, [r3, #0]
 800c6a6:	f7ff bfa5 	b.w	800c5f4 <_puts_r>
 800c6aa:	bf00      	nop
 800c6ac:	20000168 	.word	0x20000168

0800c6b0 <siprintf>:
 800c6b0:	b40e      	push	{r1, r2, r3}
 800c6b2:	b500      	push	{lr}
 800c6b4:	b09c      	sub	sp, #112	@ 0x70
 800c6b6:	ab1d      	add	r3, sp, #116	@ 0x74
 800c6b8:	9002      	str	r0, [sp, #8]
 800c6ba:	9006      	str	r0, [sp, #24]
 800c6bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c6c0:	4809      	ldr	r0, [pc, #36]	@ (800c6e8 <siprintf+0x38>)
 800c6c2:	9107      	str	r1, [sp, #28]
 800c6c4:	9104      	str	r1, [sp, #16]
 800c6c6:	4909      	ldr	r1, [pc, #36]	@ (800c6ec <siprintf+0x3c>)
 800c6c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6cc:	9105      	str	r1, [sp, #20]
 800c6ce:	6800      	ldr	r0, [r0, #0]
 800c6d0:	9301      	str	r3, [sp, #4]
 800c6d2:	a902      	add	r1, sp, #8
 800c6d4:	f001 fd52 	bl	800e17c <_svfiprintf_r>
 800c6d8:	9b02      	ldr	r3, [sp, #8]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	701a      	strb	r2, [r3, #0]
 800c6de:	b01c      	add	sp, #112	@ 0x70
 800c6e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6e4:	b003      	add	sp, #12
 800c6e6:	4770      	bx	lr
 800c6e8:	20000168 	.word	0x20000168
 800c6ec:	ffff0208 	.word	0xffff0208

0800c6f0 <__sread>:
 800c6f0:	b510      	push	{r4, lr}
 800c6f2:	460c      	mov	r4, r1
 800c6f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6f8:	f000 f996 	bl	800ca28 <_read_r>
 800c6fc:	2800      	cmp	r0, #0
 800c6fe:	bfab      	itete	ge
 800c700:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c702:	89a3      	ldrhlt	r3, [r4, #12]
 800c704:	181b      	addge	r3, r3, r0
 800c706:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c70a:	bfac      	ite	ge
 800c70c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c70e:	81a3      	strhlt	r3, [r4, #12]
 800c710:	bd10      	pop	{r4, pc}

0800c712 <__swrite>:
 800c712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c716:	461f      	mov	r7, r3
 800c718:	898b      	ldrh	r3, [r1, #12]
 800c71a:	05db      	lsls	r3, r3, #23
 800c71c:	4605      	mov	r5, r0
 800c71e:	460c      	mov	r4, r1
 800c720:	4616      	mov	r6, r2
 800c722:	d505      	bpl.n	800c730 <__swrite+0x1e>
 800c724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c728:	2302      	movs	r3, #2
 800c72a:	2200      	movs	r2, #0
 800c72c:	f000 f96a 	bl	800ca04 <_lseek_r>
 800c730:	89a3      	ldrh	r3, [r4, #12]
 800c732:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c736:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c73a:	81a3      	strh	r3, [r4, #12]
 800c73c:	4632      	mov	r2, r6
 800c73e:	463b      	mov	r3, r7
 800c740:	4628      	mov	r0, r5
 800c742:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c746:	f000 b981 	b.w	800ca4c <_write_r>

0800c74a <__sseek>:
 800c74a:	b510      	push	{r4, lr}
 800c74c:	460c      	mov	r4, r1
 800c74e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c752:	f000 f957 	bl	800ca04 <_lseek_r>
 800c756:	1c43      	adds	r3, r0, #1
 800c758:	89a3      	ldrh	r3, [r4, #12]
 800c75a:	bf15      	itete	ne
 800c75c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c75e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c762:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c766:	81a3      	strheq	r3, [r4, #12]
 800c768:	bf18      	it	ne
 800c76a:	81a3      	strhne	r3, [r4, #12]
 800c76c:	bd10      	pop	{r4, pc}

0800c76e <__sclose>:
 800c76e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c772:	f000 b937 	b.w	800c9e4 <_close_r>

0800c776 <__swbuf_r>:
 800c776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c778:	460e      	mov	r6, r1
 800c77a:	4614      	mov	r4, r2
 800c77c:	4605      	mov	r5, r0
 800c77e:	b118      	cbz	r0, 800c788 <__swbuf_r+0x12>
 800c780:	6a03      	ldr	r3, [r0, #32]
 800c782:	b90b      	cbnz	r3, 800c788 <__swbuf_r+0x12>
 800c784:	f7ff feee 	bl	800c564 <__sinit>
 800c788:	69a3      	ldr	r3, [r4, #24]
 800c78a:	60a3      	str	r3, [r4, #8]
 800c78c:	89a3      	ldrh	r3, [r4, #12]
 800c78e:	071a      	lsls	r2, r3, #28
 800c790:	d501      	bpl.n	800c796 <__swbuf_r+0x20>
 800c792:	6923      	ldr	r3, [r4, #16]
 800c794:	b943      	cbnz	r3, 800c7a8 <__swbuf_r+0x32>
 800c796:	4621      	mov	r1, r4
 800c798:	4628      	mov	r0, r5
 800c79a:	f000 f82b 	bl	800c7f4 <__swsetup_r>
 800c79e:	b118      	cbz	r0, 800c7a8 <__swbuf_r+0x32>
 800c7a0:	f04f 37ff 	mov.w	r7, #4294967295
 800c7a4:	4638      	mov	r0, r7
 800c7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7a8:	6823      	ldr	r3, [r4, #0]
 800c7aa:	6922      	ldr	r2, [r4, #16]
 800c7ac:	1a98      	subs	r0, r3, r2
 800c7ae:	6963      	ldr	r3, [r4, #20]
 800c7b0:	b2f6      	uxtb	r6, r6
 800c7b2:	4283      	cmp	r3, r0
 800c7b4:	4637      	mov	r7, r6
 800c7b6:	dc05      	bgt.n	800c7c4 <__swbuf_r+0x4e>
 800c7b8:	4621      	mov	r1, r4
 800c7ba:	4628      	mov	r0, r5
 800c7bc:	f001 ffa0 	bl	800e700 <_fflush_r>
 800c7c0:	2800      	cmp	r0, #0
 800c7c2:	d1ed      	bne.n	800c7a0 <__swbuf_r+0x2a>
 800c7c4:	68a3      	ldr	r3, [r4, #8]
 800c7c6:	3b01      	subs	r3, #1
 800c7c8:	60a3      	str	r3, [r4, #8]
 800c7ca:	6823      	ldr	r3, [r4, #0]
 800c7cc:	1c5a      	adds	r2, r3, #1
 800c7ce:	6022      	str	r2, [r4, #0]
 800c7d0:	701e      	strb	r6, [r3, #0]
 800c7d2:	6962      	ldr	r2, [r4, #20]
 800c7d4:	1c43      	adds	r3, r0, #1
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d004      	beq.n	800c7e4 <__swbuf_r+0x6e>
 800c7da:	89a3      	ldrh	r3, [r4, #12]
 800c7dc:	07db      	lsls	r3, r3, #31
 800c7de:	d5e1      	bpl.n	800c7a4 <__swbuf_r+0x2e>
 800c7e0:	2e0a      	cmp	r6, #10
 800c7e2:	d1df      	bne.n	800c7a4 <__swbuf_r+0x2e>
 800c7e4:	4621      	mov	r1, r4
 800c7e6:	4628      	mov	r0, r5
 800c7e8:	f001 ff8a 	bl	800e700 <_fflush_r>
 800c7ec:	2800      	cmp	r0, #0
 800c7ee:	d0d9      	beq.n	800c7a4 <__swbuf_r+0x2e>
 800c7f0:	e7d6      	b.n	800c7a0 <__swbuf_r+0x2a>
	...

0800c7f4 <__swsetup_r>:
 800c7f4:	b538      	push	{r3, r4, r5, lr}
 800c7f6:	4b29      	ldr	r3, [pc, #164]	@ (800c89c <__swsetup_r+0xa8>)
 800c7f8:	4605      	mov	r5, r0
 800c7fa:	6818      	ldr	r0, [r3, #0]
 800c7fc:	460c      	mov	r4, r1
 800c7fe:	b118      	cbz	r0, 800c808 <__swsetup_r+0x14>
 800c800:	6a03      	ldr	r3, [r0, #32]
 800c802:	b90b      	cbnz	r3, 800c808 <__swsetup_r+0x14>
 800c804:	f7ff feae 	bl	800c564 <__sinit>
 800c808:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c80c:	0719      	lsls	r1, r3, #28
 800c80e:	d422      	bmi.n	800c856 <__swsetup_r+0x62>
 800c810:	06da      	lsls	r2, r3, #27
 800c812:	d407      	bmi.n	800c824 <__swsetup_r+0x30>
 800c814:	2209      	movs	r2, #9
 800c816:	602a      	str	r2, [r5, #0]
 800c818:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c81c:	81a3      	strh	r3, [r4, #12]
 800c81e:	f04f 30ff 	mov.w	r0, #4294967295
 800c822:	e033      	b.n	800c88c <__swsetup_r+0x98>
 800c824:	0758      	lsls	r0, r3, #29
 800c826:	d512      	bpl.n	800c84e <__swsetup_r+0x5a>
 800c828:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c82a:	b141      	cbz	r1, 800c83e <__swsetup_r+0x4a>
 800c82c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c830:	4299      	cmp	r1, r3
 800c832:	d002      	beq.n	800c83a <__swsetup_r+0x46>
 800c834:	4628      	mov	r0, r5
 800c836:	f000 ffc3 	bl	800d7c0 <_free_r>
 800c83a:	2300      	movs	r3, #0
 800c83c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c83e:	89a3      	ldrh	r3, [r4, #12]
 800c840:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c844:	81a3      	strh	r3, [r4, #12]
 800c846:	2300      	movs	r3, #0
 800c848:	6063      	str	r3, [r4, #4]
 800c84a:	6923      	ldr	r3, [r4, #16]
 800c84c:	6023      	str	r3, [r4, #0]
 800c84e:	89a3      	ldrh	r3, [r4, #12]
 800c850:	f043 0308 	orr.w	r3, r3, #8
 800c854:	81a3      	strh	r3, [r4, #12]
 800c856:	6923      	ldr	r3, [r4, #16]
 800c858:	b94b      	cbnz	r3, 800c86e <__swsetup_r+0x7a>
 800c85a:	89a3      	ldrh	r3, [r4, #12]
 800c85c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c860:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c864:	d003      	beq.n	800c86e <__swsetup_r+0x7a>
 800c866:	4621      	mov	r1, r4
 800c868:	4628      	mov	r0, r5
 800c86a:	f001 ffa9 	bl	800e7c0 <__smakebuf_r>
 800c86e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c872:	f013 0201 	ands.w	r2, r3, #1
 800c876:	d00a      	beq.n	800c88e <__swsetup_r+0x9a>
 800c878:	2200      	movs	r2, #0
 800c87a:	60a2      	str	r2, [r4, #8]
 800c87c:	6962      	ldr	r2, [r4, #20]
 800c87e:	4252      	negs	r2, r2
 800c880:	61a2      	str	r2, [r4, #24]
 800c882:	6922      	ldr	r2, [r4, #16]
 800c884:	b942      	cbnz	r2, 800c898 <__swsetup_r+0xa4>
 800c886:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c88a:	d1c5      	bne.n	800c818 <__swsetup_r+0x24>
 800c88c:	bd38      	pop	{r3, r4, r5, pc}
 800c88e:	0799      	lsls	r1, r3, #30
 800c890:	bf58      	it	pl
 800c892:	6962      	ldrpl	r2, [r4, #20]
 800c894:	60a2      	str	r2, [r4, #8]
 800c896:	e7f4      	b.n	800c882 <__swsetup_r+0x8e>
 800c898:	2000      	movs	r0, #0
 800c89a:	e7f7      	b.n	800c88c <__swsetup_r+0x98>
 800c89c:	20000168 	.word	0x20000168

0800c8a0 <memcmp>:
 800c8a0:	b510      	push	{r4, lr}
 800c8a2:	3901      	subs	r1, #1
 800c8a4:	4402      	add	r2, r0
 800c8a6:	4290      	cmp	r0, r2
 800c8a8:	d101      	bne.n	800c8ae <memcmp+0xe>
 800c8aa:	2000      	movs	r0, #0
 800c8ac:	e005      	b.n	800c8ba <memcmp+0x1a>
 800c8ae:	7803      	ldrb	r3, [r0, #0]
 800c8b0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c8b4:	42a3      	cmp	r3, r4
 800c8b6:	d001      	beq.n	800c8bc <memcmp+0x1c>
 800c8b8:	1b18      	subs	r0, r3, r4
 800c8ba:	bd10      	pop	{r4, pc}
 800c8bc:	3001      	adds	r0, #1
 800c8be:	e7f2      	b.n	800c8a6 <memcmp+0x6>

0800c8c0 <memset>:
 800c8c0:	4402      	add	r2, r0
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d100      	bne.n	800c8ca <memset+0xa>
 800c8c8:	4770      	bx	lr
 800c8ca:	f803 1b01 	strb.w	r1, [r3], #1
 800c8ce:	e7f9      	b.n	800c8c4 <memset+0x4>

0800c8d0 <strncpy>:
 800c8d0:	b510      	push	{r4, lr}
 800c8d2:	3901      	subs	r1, #1
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	b132      	cbz	r2, 800c8e6 <strncpy+0x16>
 800c8d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c8dc:	f803 4b01 	strb.w	r4, [r3], #1
 800c8e0:	3a01      	subs	r2, #1
 800c8e2:	2c00      	cmp	r4, #0
 800c8e4:	d1f7      	bne.n	800c8d6 <strncpy+0x6>
 800c8e6:	441a      	add	r2, r3
 800c8e8:	2100      	movs	r1, #0
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d100      	bne.n	800c8f0 <strncpy+0x20>
 800c8ee:	bd10      	pop	{r4, pc}
 800c8f0:	f803 1b01 	strb.w	r1, [r3], #1
 800c8f4:	e7f9      	b.n	800c8ea <strncpy+0x1a>
	...

0800c8f8 <strtok>:
 800c8f8:	4b16      	ldr	r3, [pc, #88]	@ (800c954 <strtok+0x5c>)
 800c8fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8fe:	681f      	ldr	r7, [r3, #0]
 800c900:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800c902:	4605      	mov	r5, r0
 800c904:	460e      	mov	r6, r1
 800c906:	b9ec      	cbnz	r4, 800c944 <strtok+0x4c>
 800c908:	2050      	movs	r0, #80	@ 0x50
 800c90a:	f000 ffa3 	bl	800d854 <malloc>
 800c90e:	4602      	mov	r2, r0
 800c910:	6478      	str	r0, [r7, #68]	@ 0x44
 800c912:	b920      	cbnz	r0, 800c91e <strtok+0x26>
 800c914:	4b10      	ldr	r3, [pc, #64]	@ (800c958 <strtok+0x60>)
 800c916:	4811      	ldr	r0, [pc, #68]	@ (800c95c <strtok+0x64>)
 800c918:	215b      	movs	r1, #91	@ 0x5b
 800c91a:	f000 f8e5 	bl	800cae8 <__assert_func>
 800c91e:	e9c0 4400 	strd	r4, r4, [r0]
 800c922:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c926:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c92a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800c92e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800c932:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800c936:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800c93a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800c93e:	6184      	str	r4, [r0, #24]
 800c940:	7704      	strb	r4, [r0, #28]
 800c942:	6244      	str	r4, [r0, #36]	@ 0x24
 800c944:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c946:	4631      	mov	r1, r6
 800c948:	4628      	mov	r0, r5
 800c94a:	2301      	movs	r3, #1
 800c94c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c950:	f000 b806 	b.w	800c960 <__strtok_r>
 800c954:	20000168 	.word	0x20000168
 800c958:	08012a3d 	.word	0x08012a3d
 800c95c:	08012a54 	.word	0x08012a54

0800c960 <__strtok_r>:
 800c960:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c962:	4604      	mov	r4, r0
 800c964:	b908      	cbnz	r0, 800c96a <__strtok_r+0xa>
 800c966:	6814      	ldr	r4, [r2, #0]
 800c968:	b144      	cbz	r4, 800c97c <__strtok_r+0x1c>
 800c96a:	4620      	mov	r0, r4
 800c96c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c970:	460f      	mov	r7, r1
 800c972:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c976:	b91e      	cbnz	r6, 800c980 <__strtok_r+0x20>
 800c978:	b965      	cbnz	r5, 800c994 <__strtok_r+0x34>
 800c97a:	6015      	str	r5, [r2, #0]
 800c97c:	2000      	movs	r0, #0
 800c97e:	e005      	b.n	800c98c <__strtok_r+0x2c>
 800c980:	42b5      	cmp	r5, r6
 800c982:	d1f6      	bne.n	800c972 <__strtok_r+0x12>
 800c984:	2b00      	cmp	r3, #0
 800c986:	d1f0      	bne.n	800c96a <__strtok_r+0xa>
 800c988:	6014      	str	r4, [r2, #0]
 800c98a:	7003      	strb	r3, [r0, #0]
 800c98c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c98e:	461c      	mov	r4, r3
 800c990:	e00c      	b.n	800c9ac <__strtok_r+0x4c>
 800c992:	b915      	cbnz	r5, 800c99a <__strtok_r+0x3a>
 800c994:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c998:	460e      	mov	r6, r1
 800c99a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c99e:	42ab      	cmp	r3, r5
 800c9a0:	d1f7      	bne.n	800c992 <__strtok_r+0x32>
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d0f3      	beq.n	800c98e <__strtok_r+0x2e>
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c9ac:	6014      	str	r4, [r2, #0]
 800c9ae:	e7ed      	b.n	800c98c <__strtok_r+0x2c>

0800c9b0 <strstr>:
 800c9b0:	780a      	ldrb	r2, [r1, #0]
 800c9b2:	b570      	push	{r4, r5, r6, lr}
 800c9b4:	b96a      	cbnz	r2, 800c9d2 <strstr+0x22>
 800c9b6:	bd70      	pop	{r4, r5, r6, pc}
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d109      	bne.n	800c9d0 <strstr+0x20>
 800c9bc:	460c      	mov	r4, r1
 800c9be:	4605      	mov	r5, r0
 800c9c0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d0f6      	beq.n	800c9b6 <strstr+0x6>
 800c9c8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c9cc:	429e      	cmp	r6, r3
 800c9ce:	d0f7      	beq.n	800c9c0 <strstr+0x10>
 800c9d0:	3001      	adds	r0, #1
 800c9d2:	7803      	ldrb	r3, [r0, #0]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d1ef      	bne.n	800c9b8 <strstr+0x8>
 800c9d8:	4618      	mov	r0, r3
 800c9da:	e7ec      	b.n	800c9b6 <strstr+0x6>

0800c9dc <_localeconv_r>:
 800c9dc:	4800      	ldr	r0, [pc, #0]	@ (800c9e0 <_localeconv_r+0x4>)
 800c9de:	4770      	bx	lr
 800c9e0:	200002a8 	.word	0x200002a8

0800c9e4 <_close_r>:
 800c9e4:	b538      	push	{r3, r4, r5, lr}
 800c9e6:	4d06      	ldr	r5, [pc, #24]	@ (800ca00 <_close_r+0x1c>)
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	4604      	mov	r4, r0
 800c9ec:	4608      	mov	r0, r1
 800c9ee:	602b      	str	r3, [r5, #0]
 800c9f0:	f7fe ffdc 	bl	800b9ac <_close>
 800c9f4:	1c43      	adds	r3, r0, #1
 800c9f6:	d102      	bne.n	800c9fe <_close_r+0x1a>
 800c9f8:	682b      	ldr	r3, [r5, #0]
 800c9fa:	b103      	cbz	r3, 800c9fe <_close_r+0x1a>
 800c9fc:	6023      	str	r3, [r4, #0]
 800c9fe:	bd38      	pop	{r3, r4, r5, pc}
 800ca00:	20001434 	.word	0x20001434

0800ca04 <_lseek_r>:
 800ca04:	b538      	push	{r3, r4, r5, lr}
 800ca06:	4d07      	ldr	r5, [pc, #28]	@ (800ca24 <_lseek_r+0x20>)
 800ca08:	4604      	mov	r4, r0
 800ca0a:	4608      	mov	r0, r1
 800ca0c:	4611      	mov	r1, r2
 800ca0e:	2200      	movs	r2, #0
 800ca10:	602a      	str	r2, [r5, #0]
 800ca12:	461a      	mov	r2, r3
 800ca14:	f7fe ff8b 	bl	800b92e <_lseek>
 800ca18:	1c43      	adds	r3, r0, #1
 800ca1a:	d102      	bne.n	800ca22 <_lseek_r+0x1e>
 800ca1c:	682b      	ldr	r3, [r5, #0]
 800ca1e:	b103      	cbz	r3, 800ca22 <_lseek_r+0x1e>
 800ca20:	6023      	str	r3, [r4, #0]
 800ca22:	bd38      	pop	{r3, r4, r5, pc}
 800ca24:	20001434 	.word	0x20001434

0800ca28 <_read_r>:
 800ca28:	b538      	push	{r3, r4, r5, lr}
 800ca2a:	4d07      	ldr	r5, [pc, #28]	@ (800ca48 <_read_r+0x20>)
 800ca2c:	4604      	mov	r4, r0
 800ca2e:	4608      	mov	r0, r1
 800ca30:	4611      	mov	r1, r2
 800ca32:	2200      	movs	r2, #0
 800ca34:	602a      	str	r2, [r5, #0]
 800ca36:	461a      	mov	r2, r3
 800ca38:	f7fe ff23 	bl	800b882 <_read>
 800ca3c:	1c43      	adds	r3, r0, #1
 800ca3e:	d102      	bne.n	800ca46 <_read_r+0x1e>
 800ca40:	682b      	ldr	r3, [r5, #0]
 800ca42:	b103      	cbz	r3, 800ca46 <_read_r+0x1e>
 800ca44:	6023      	str	r3, [r4, #0]
 800ca46:	bd38      	pop	{r3, r4, r5, pc}
 800ca48:	20001434 	.word	0x20001434

0800ca4c <_write_r>:
 800ca4c:	b538      	push	{r3, r4, r5, lr}
 800ca4e:	4d07      	ldr	r5, [pc, #28]	@ (800ca6c <_write_r+0x20>)
 800ca50:	4604      	mov	r4, r0
 800ca52:	4608      	mov	r0, r1
 800ca54:	4611      	mov	r1, r2
 800ca56:	2200      	movs	r2, #0
 800ca58:	602a      	str	r2, [r5, #0]
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	f7fe ff79 	bl	800b952 <_write>
 800ca60:	1c43      	adds	r3, r0, #1
 800ca62:	d102      	bne.n	800ca6a <_write_r+0x1e>
 800ca64:	682b      	ldr	r3, [r5, #0]
 800ca66:	b103      	cbz	r3, 800ca6a <_write_r+0x1e>
 800ca68:	6023      	str	r3, [r4, #0]
 800ca6a:	bd38      	pop	{r3, r4, r5, pc}
 800ca6c:	20001434 	.word	0x20001434

0800ca70 <__errno>:
 800ca70:	4b01      	ldr	r3, [pc, #4]	@ (800ca78 <__errno+0x8>)
 800ca72:	6818      	ldr	r0, [r3, #0]
 800ca74:	4770      	bx	lr
 800ca76:	bf00      	nop
 800ca78:	20000168 	.word	0x20000168

0800ca7c <__libc_init_array>:
 800ca7c:	b570      	push	{r4, r5, r6, lr}
 800ca7e:	4d0d      	ldr	r5, [pc, #52]	@ (800cab4 <__libc_init_array+0x38>)
 800ca80:	4c0d      	ldr	r4, [pc, #52]	@ (800cab8 <__libc_init_array+0x3c>)
 800ca82:	1b64      	subs	r4, r4, r5
 800ca84:	10a4      	asrs	r4, r4, #2
 800ca86:	2600      	movs	r6, #0
 800ca88:	42a6      	cmp	r6, r4
 800ca8a:	d109      	bne.n	800caa0 <__libc_init_array+0x24>
 800ca8c:	4d0b      	ldr	r5, [pc, #44]	@ (800cabc <__libc_init_array+0x40>)
 800ca8e:	4c0c      	ldr	r4, [pc, #48]	@ (800cac0 <__libc_init_array+0x44>)
 800ca90:	f003 fd44 	bl	801051c <_init>
 800ca94:	1b64      	subs	r4, r4, r5
 800ca96:	10a4      	asrs	r4, r4, #2
 800ca98:	2600      	movs	r6, #0
 800ca9a:	42a6      	cmp	r6, r4
 800ca9c:	d105      	bne.n	800caaa <__libc_init_array+0x2e>
 800ca9e:	bd70      	pop	{r4, r5, r6, pc}
 800caa0:	f855 3b04 	ldr.w	r3, [r5], #4
 800caa4:	4798      	blx	r3
 800caa6:	3601      	adds	r6, #1
 800caa8:	e7ee      	b.n	800ca88 <__libc_init_array+0xc>
 800caaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800caae:	4798      	blx	r3
 800cab0:	3601      	adds	r6, #1
 800cab2:	e7f2      	b.n	800ca9a <__libc_init_array+0x1e>
 800cab4:	08012f38 	.word	0x08012f38
 800cab8:	08012f38 	.word	0x08012f38
 800cabc:	08012f38 	.word	0x08012f38
 800cac0:	08012f3c 	.word	0x08012f3c

0800cac4 <__retarget_lock_init_recursive>:
 800cac4:	4770      	bx	lr

0800cac6 <__retarget_lock_acquire_recursive>:
 800cac6:	4770      	bx	lr

0800cac8 <__retarget_lock_release_recursive>:
 800cac8:	4770      	bx	lr

0800caca <memcpy>:
 800caca:	440a      	add	r2, r1
 800cacc:	4291      	cmp	r1, r2
 800cace:	f100 33ff 	add.w	r3, r0, #4294967295
 800cad2:	d100      	bne.n	800cad6 <memcpy+0xc>
 800cad4:	4770      	bx	lr
 800cad6:	b510      	push	{r4, lr}
 800cad8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cadc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cae0:	4291      	cmp	r1, r2
 800cae2:	d1f9      	bne.n	800cad8 <memcpy+0xe>
 800cae4:	bd10      	pop	{r4, pc}
	...

0800cae8 <__assert_func>:
 800cae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800caea:	4614      	mov	r4, r2
 800caec:	461a      	mov	r2, r3
 800caee:	4b09      	ldr	r3, [pc, #36]	@ (800cb14 <__assert_func+0x2c>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	4605      	mov	r5, r0
 800caf4:	68d8      	ldr	r0, [r3, #12]
 800caf6:	b954      	cbnz	r4, 800cb0e <__assert_func+0x26>
 800caf8:	4b07      	ldr	r3, [pc, #28]	@ (800cb18 <__assert_func+0x30>)
 800cafa:	461c      	mov	r4, r3
 800cafc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb00:	9100      	str	r1, [sp, #0]
 800cb02:	462b      	mov	r3, r5
 800cb04:	4905      	ldr	r1, [pc, #20]	@ (800cb1c <__assert_func+0x34>)
 800cb06:	f001 fe23 	bl	800e750 <fiprintf>
 800cb0a:	f001 fee1 	bl	800e8d0 <abort>
 800cb0e:	4b04      	ldr	r3, [pc, #16]	@ (800cb20 <__assert_func+0x38>)
 800cb10:	e7f4      	b.n	800cafc <__assert_func+0x14>
 800cb12:	bf00      	nop
 800cb14:	20000168 	.word	0x20000168
 800cb18:	08012ae9 	.word	0x08012ae9
 800cb1c:	08012abb 	.word	0x08012abb
 800cb20:	08012aae 	.word	0x08012aae

0800cb24 <quorem>:
 800cb24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb28:	6903      	ldr	r3, [r0, #16]
 800cb2a:	690c      	ldr	r4, [r1, #16]
 800cb2c:	42a3      	cmp	r3, r4
 800cb2e:	4607      	mov	r7, r0
 800cb30:	db7e      	blt.n	800cc30 <quorem+0x10c>
 800cb32:	3c01      	subs	r4, #1
 800cb34:	f101 0814 	add.w	r8, r1, #20
 800cb38:	00a3      	lsls	r3, r4, #2
 800cb3a:	f100 0514 	add.w	r5, r0, #20
 800cb3e:	9300      	str	r3, [sp, #0]
 800cb40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb44:	9301      	str	r3, [sp, #4]
 800cb46:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cb4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb4e:	3301      	adds	r3, #1
 800cb50:	429a      	cmp	r2, r3
 800cb52:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cb56:	fbb2 f6f3 	udiv	r6, r2, r3
 800cb5a:	d32e      	bcc.n	800cbba <quorem+0x96>
 800cb5c:	f04f 0a00 	mov.w	sl, #0
 800cb60:	46c4      	mov	ip, r8
 800cb62:	46ae      	mov	lr, r5
 800cb64:	46d3      	mov	fp, sl
 800cb66:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cb6a:	b298      	uxth	r0, r3
 800cb6c:	fb06 a000 	mla	r0, r6, r0, sl
 800cb70:	0c02      	lsrs	r2, r0, #16
 800cb72:	0c1b      	lsrs	r3, r3, #16
 800cb74:	fb06 2303 	mla	r3, r6, r3, r2
 800cb78:	f8de 2000 	ldr.w	r2, [lr]
 800cb7c:	b280      	uxth	r0, r0
 800cb7e:	b292      	uxth	r2, r2
 800cb80:	1a12      	subs	r2, r2, r0
 800cb82:	445a      	add	r2, fp
 800cb84:	f8de 0000 	ldr.w	r0, [lr]
 800cb88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cb8c:	b29b      	uxth	r3, r3
 800cb8e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cb92:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cb96:	b292      	uxth	r2, r2
 800cb98:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cb9c:	45e1      	cmp	r9, ip
 800cb9e:	f84e 2b04 	str.w	r2, [lr], #4
 800cba2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cba6:	d2de      	bcs.n	800cb66 <quorem+0x42>
 800cba8:	9b00      	ldr	r3, [sp, #0]
 800cbaa:	58eb      	ldr	r3, [r5, r3]
 800cbac:	b92b      	cbnz	r3, 800cbba <quorem+0x96>
 800cbae:	9b01      	ldr	r3, [sp, #4]
 800cbb0:	3b04      	subs	r3, #4
 800cbb2:	429d      	cmp	r5, r3
 800cbb4:	461a      	mov	r2, r3
 800cbb6:	d32f      	bcc.n	800cc18 <quorem+0xf4>
 800cbb8:	613c      	str	r4, [r7, #16]
 800cbba:	4638      	mov	r0, r7
 800cbbc:	f001 f97a 	bl	800deb4 <__mcmp>
 800cbc0:	2800      	cmp	r0, #0
 800cbc2:	db25      	blt.n	800cc10 <quorem+0xec>
 800cbc4:	4629      	mov	r1, r5
 800cbc6:	2000      	movs	r0, #0
 800cbc8:	f858 2b04 	ldr.w	r2, [r8], #4
 800cbcc:	f8d1 c000 	ldr.w	ip, [r1]
 800cbd0:	fa1f fe82 	uxth.w	lr, r2
 800cbd4:	fa1f f38c 	uxth.w	r3, ip
 800cbd8:	eba3 030e 	sub.w	r3, r3, lr
 800cbdc:	4403      	add	r3, r0
 800cbde:	0c12      	lsrs	r2, r2, #16
 800cbe0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cbe4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cbee:	45c1      	cmp	r9, r8
 800cbf0:	f841 3b04 	str.w	r3, [r1], #4
 800cbf4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cbf8:	d2e6      	bcs.n	800cbc8 <quorem+0xa4>
 800cbfa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cbfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc02:	b922      	cbnz	r2, 800cc0e <quorem+0xea>
 800cc04:	3b04      	subs	r3, #4
 800cc06:	429d      	cmp	r5, r3
 800cc08:	461a      	mov	r2, r3
 800cc0a:	d30b      	bcc.n	800cc24 <quorem+0x100>
 800cc0c:	613c      	str	r4, [r7, #16]
 800cc0e:	3601      	adds	r6, #1
 800cc10:	4630      	mov	r0, r6
 800cc12:	b003      	add	sp, #12
 800cc14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc18:	6812      	ldr	r2, [r2, #0]
 800cc1a:	3b04      	subs	r3, #4
 800cc1c:	2a00      	cmp	r2, #0
 800cc1e:	d1cb      	bne.n	800cbb8 <quorem+0x94>
 800cc20:	3c01      	subs	r4, #1
 800cc22:	e7c6      	b.n	800cbb2 <quorem+0x8e>
 800cc24:	6812      	ldr	r2, [r2, #0]
 800cc26:	3b04      	subs	r3, #4
 800cc28:	2a00      	cmp	r2, #0
 800cc2a:	d1ef      	bne.n	800cc0c <quorem+0xe8>
 800cc2c:	3c01      	subs	r4, #1
 800cc2e:	e7ea      	b.n	800cc06 <quorem+0xe2>
 800cc30:	2000      	movs	r0, #0
 800cc32:	e7ee      	b.n	800cc12 <quorem+0xee>
 800cc34:	0000      	movs	r0, r0
	...

0800cc38 <_dtoa_r>:
 800cc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc3c:	69c7      	ldr	r7, [r0, #28]
 800cc3e:	b099      	sub	sp, #100	@ 0x64
 800cc40:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cc44:	ec55 4b10 	vmov	r4, r5, d0
 800cc48:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800cc4a:	9109      	str	r1, [sp, #36]	@ 0x24
 800cc4c:	4683      	mov	fp, r0
 800cc4e:	920e      	str	r2, [sp, #56]	@ 0x38
 800cc50:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cc52:	b97f      	cbnz	r7, 800cc74 <_dtoa_r+0x3c>
 800cc54:	2010      	movs	r0, #16
 800cc56:	f000 fdfd 	bl	800d854 <malloc>
 800cc5a:	4602      	mov	r2, r0
 800cc5c:	f8cb 001c 	str.w	r0, [fp, #28]
 800cc60:	b920      	cbnz	r0, 800cc6c <_dtoa_r+0x34>
 800cc62:	4ba7      	ldr	r3, [pc, #668]	@ (800cf00 <_dtoa_r+0x2c8>)
 800cc64:	21ef      	movs	r1, #239	@ 0xef
 800cc66:	48a7      	ldr	r0, [pc, #668]	@ (800cf04 <_dtoa_r+0x2cc>)
 800cc68:	f7ff ff3e 	bl	800cae8 <__assert_func>
 800cc6c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cc70:	6007      	str	r7, [r0, #0]
 800cc72:	60c7      	str	r7, [r0, #12]
 800cc74:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cc78:	6819      	ldr	r1, [r3, #0]
 800cc7a:	b159      	cbz	r1, 800cc94 <_dtoa_r+0x5c>
 800cc7c:	685a      	ldr	r2, [r3, #4]
 800cc7e:	604a      	str	r2, [r1, #4]
 800cc80:	2301      	movs	r3, #1
 800cc82:	4093      	lsls	r3, r2
 800cc84:	608b      	str	r3, [r1, #8]
 800cc86:	4658      	mov	r0, fp
 800cc88:	f000 feda 	bl	800da40 <_Bfree>
 800cc8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cc90:	2200      	movs	r2, #0
 800cc92:	601a      	str	r2, [r3, #0]
 800cc94:	1e2b      	subs	r3, r5, #0
 800cc96:	bfb9      	ittee	lt
 800cc98:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cc9c:	9303      	strlt	r3, [sp, #12]
 800cc9e:	2300      	movge	r3, #0
 800cca0:	6033      	strge	r3, [r6, #0]
 800cca2:	9f03      	ldr	r7, [sp, #12]
 800cca4:	4b98      	ldr	r3, [pc, #608]	@ (800cf08 <_dtoa_r+0x2d0>)
 800cca6:	bfbc      	itt	lt
 800cca8:	2201      	movlt	r2, #1
 800ccaa:	6032      	strlt	r2, [r6, #0]
 800ccac:	43bb      	bics	r3, r7
 800ccae:	d112      	bne.n	800ccd6 <_dtoa_r+0x9e>
 800ccb0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ccb2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ccb6:	6013      	str	r3, [r2, #0]
 800ccb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ccbc:	4323      	orrs	r3, r4
 800ccbe:	f000 854d 	beq.w	800d75c <_dtoa_r+0xb24>
 800ccc2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ccc4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800cf1c <_dtoa_r+0x2e4>
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	f000 854f 	beq.w	800d76c <_dtoa_r+0xb34>
 800ccce:	f10a 0303 	add.w	r3, sl, #3
 800ccd2:	f000 bd49 	b.w	800d768 <_dtoa_r+0xb30>
 800ccd6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	ec51 0b17 	vmov	r0, r1, d7
 800cce0:	2300      	movs	r3, #0
 800cce2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800cce6:	f7f3 feef 	bl	8000ac8 <__aeabi_dcmpeq>
 800ccea:	4680      	mov	r8, r0
 800ccec:	b158      	cbz	r0, 800cd06 <_dtoa_r+0xce>
 800ccee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	6013      	str	r3, [r2, #0]
 800ccf4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ccf6:	b113      	cbz	r3, 800ccfe <_dtoa_r+0xc6>
 800ccf8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ccfa:	4b84      	ldr	r3, [pc, #528]	@ (800cf0c <_dtoa_r+0x2d4>)
 800ccfc:	6013      	str	r3, [r2, #0]
 800ccfe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800cf20 <_dtoa_r+0x2e8>
 800cd02:	f000 bd33 	b.w	800d76c <_dtoa_r+0xb34>
 800cd06:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cd0a:	aa16      	add	r2, sp, #88	@ 0x58
 800cd0c:	a917      	add	r1, sp, #92	@ 0x5c
 800cd0e:	4658      	mov	r0, fp
 800cd10:	f001 f980 	bl	800e014 <__d2b>
 800cd14:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cd18:	4681      	mov	r9, r0
 800cd1a:	2e00      	cmp	r6, #0
 800cd1c:	d077      	beq.n	800ce0e <_dtoa_r+0x1d6>
 800cd1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cd20:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800cd24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd2c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cd30:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cd34:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cd38:	4619      	mov	r1, r3
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	4b74      	ldr	r3, [pc, #464]	@ (800cf10 <_dtoa_r+0x2d8>)
 800cd3e:	f7f3 faa3 	bl	8000288 <__aeabi_dsub>
 800cd42:	a369      	add	r3, pc, #420	@ (adr r3, 800cee8 <_dtoa_r+0x2b0>)
 800cd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd48:	f7f3 fc56 	bl	80005f8 <__aeabi_dmul>
 800cd4c:	a368      	add	r3, pc, #416	@ (adr r3, 800cef0 <_dtoa_r+0x2b8>)
 800cd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd52:	f7f3 fa9b 	bl	800028c <__adddf3>
 800cd56:	4604      	mov	r4, r0
 800cd58:	4630      	mov	r0, r6
 800cd5a:	460d      	mov	r5, r1
 800cd5c:	f7f3 fbe2 	bl	8000524 <__aeabi_i2d>
 800cd60:	a365      	add	r3, pc, #404	@ (adr r3, 800cef8 <_dtoa_r+0x2c0>)
 800cd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd66:	f7f3 fc47 	bl	80005f8 <__aeabi_dmul>
 800cd6a:	4602      	mov	r2, r0
 800cd6c:	460b      	mov	r3, r1
 800cd6e:	4620      	mov	r0, r4
 800cd70:	4629      	mov	r1, r5
 800cd72:	f7f3 fa8b 	bl	800028c <__adddf3>
 800cd76:	4604      	mov	r4, r0
 800cd78:	460d      	mov	r5, r1
 800cd7a:	f7f3 feed 	bl	8000b58 <__aeabi_d2iz>
 800cd7e:	2200      	movs	r2, #0
 800cd80:	4607      	mov	r7, r0
 800cd82:	2300      	movs	r3, #0
 800cd84:	4620      	mov	r0, r4
 800cd86:	4629      	mov	r1, r5
 800cd88:	f7f3 fea8 	bl	8000adc <__aeabi_dcmplt>
 800cd8c:	b140      	cbz	r0, 800cda0 <_dtoa_r+0x168>
 800cd8e:	4638      	mov	r0, r7
 800cd90:	f7f3 fbc8 	bl	8000524 <__aeabi_i2d>
 800cd94:	4622      	mov	r2, r4
 800cd96:	462b      	mov	r3, r5
 800cd98:	f7f3 fe96 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd9c:	b900      	cbnz	r0, 800cda0 <_dtoa_r+0x168>
 800cd9e:	3f01      	subs	r7, #1
 800cda0:	2f16      	cmp	r7, #22
 800cda2:	d851      	bhi.n	800ce48 <_dtoa_r+0x210>
 800cda4:	4b5b      	ldr	r3, [pc, #364]	@ (800cf14 <_dtoa_r+0x2dc>)
 800cda6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cdb2:	f7f3 fe93 	bl	8000adc <__aeabi_dcmplt>
 800cdb6:	2800      	cmp	r0, #0
 800cdb8:	d048      	beq.n	800ce4c <_dtoa_r+0x214>
 800cdba:	3f01      	subs	r7, #1
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	9312      	str	r3, [sp, #72]	@ 0x48
 800cdc0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cdc2:	1b9b      	subs	r3, r3, r6
 800cdc4:	1e5a      	subs	r2, r3, #1
 800cdc6:	bf44      	itt	mi
 800cdc8:	f1c3 0801 	rsbmi	r8, r3, #1
 800cdcc:	2300      	movmi	r3, #0
 800cdce:	9208      	str	r2, [sp, #32]
 800cdd0:	bf54      	ite	pl
 800cdd2:	f04f 0800 	movpl.w	r8, #0
 800cdd6:	9308      	strmi	r3, [sp, #32]
 800cdd8:	2f00      	cmp	r7, #0
 800cdda:	db39      	blt.n	800ce50 <_dtoa_r+0x218>
 800cddc:	9b08      	ldr	r3, [sp, #32]
 800cdde:	970f      	str	r7, [sp, #60]	@ 0x3c
 800cde0:	443b      	add	r3, r7
 800cde2:	9308      	str	r3, [sp, #32]
 800cde4:	2300      	movs	r3, #0
 800cde6:	930a      	str	r3, [sp, #40]	@ 0x28
 800cde8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdea:	2b09      	cmp	r3, #9
 800cdec:	d864      	bhi.n	800ceb8 <_dtoa_r+0x280>
 800cdee:	2b05      	cmp	r3, #5
 800cdf0:	bfc4      	itt	gt
 800cdf2:	3b04      	subgt	r3, #4
 800cdf4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800cdf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdf8:	f1a3 0302 	sub.w	r3, r3, #2
 800cdfc:	bfcc      	ite	gt
 800cdfe:	2400      	movgt	r4, #0
 800ce00:	2401      	movle	r4, #1
 800ce02:	2b03      	cmp	r3, #3
 800ce04:	d863      	bhi.n	800cece <_dtoa_r+0x296>
 800ce06:	e8df f003 	tbb	[pc, r3]
 800ce0a:	372a      	.short	0x372a
 800ce0c:	5535      	.short	0x5535
 800ce0e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ce12:	441e      	add	r6, r3
 800ce14:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ce18:	2b20      	cmp	r3, #32
 800ce1a:	bfc1      	itttt	gt
 800ce1c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ce20:	409f      	lslgt	r7, r3
 800ce22:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ce26:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ce2a:	bfd6      	itet	le
 800ce2c:	f1c3 0320 	rsble	r3, r3, #32
 800ce30:	ea47 0003 	orrgt.w	r0, r7, r3
 800ce34:	fa04 f003 	lslle.w	r0, r4, r3
 800ce38:	f7f3 fb64 	bl	8000504 <__aeabi_ui2d>
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ce42:	3e01      	subs	r6, #1
 800ce44:	9214      	str	r2, [sp, #80]	@ 0x50
 800ce46:	e777      	b.n	800cd38 <_dtoa_r+0x100>
 800ce48:	2301      	movs	r3, #1
 800ce4a:	e7b8      	b.n	800cdbe <_dtoa_r+0x186>
 800ce4c:	9012      	str	r0, [sp, #72]	@ 0x48
 800ce4e:	e7b7      	b.n	800cdc0 <_dtoa_r+0x188>
 800ce50:	427b      	negs	r3, r7
 800ce52:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce54:	2300      	movs	r3, #0
 800ce56:	eba8 0807 	sub.w	r8, r8, r7
 800ce5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ce5c:	e7c4      	b.n	800cde8 <_dtoa_r+0x1b0>
 800ce5e:	2300      	movs	r3, #0
 800ce60:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ce62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	dc35      	bgt.n	800ced4 <_dtoa_r+0x29c>
 800ce68:	2301      	movs	r3, #1
 800ce6a:	9300      	str	r3, [sp, #0]
 800ce6c:	9307      	str	r3, [sp, #28]
 800ce6e:	461a      	mov	r2, r3
 800ce70:	920e      	str	r2, [sp, #56]	@ 0x38
 800ce72:	e00b      	b.n	800ce8c <_dtoa_r+0x254>
 800ce74:	2301      	movs	r3, #1
 800ce76:	e7f3      	b.n	800ce60 <_dtoa_r+0x228>
 800ce78:	2300      	movs	r3, #0
 800ce7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ce7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce7e:	18fb      	adds	r3, r7, r3
 800ce80:	9300      	str	r3, [sp, #0]
 800ce82:	3301      	adds	r3, #1
 800ce84:	2b01      	cmp	r3, #1
 800ce86:	9307      	str	r3, [sp, #28]
 800ce88:	bfb8      	it	lt
 800ce8a:	2301      	movlt	r3, #1
 800ce8c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ce90:	2100      	movs	r1, #0
 800ce92:	2204      	movs	r2, #4
 800ce94:	f102 0514 	add.w	r5, r2, #20
 800ce98:	429d      	cmp	r5, r3
 800ce9a:	d91f      	bls.n	800cedc <_dtoa_r+0x2a4>
 800ce9c:	6041      	str	r1, [r0, #4]
 800ce9e:	4658      	mov	r0, fp
 800cea0:	f000 fd8e 	bl	800d9c0 <_Balloc>
 800cea4:	4682      	mov	sl, r0
 800cea6:	2800      	cmp	r0, #0
 800cea8:	d13c      	bne.n	800cf24 <_dtoa_r+0x2ec>
 800ceaa:	4b1b      	ldr	r3, [pc, #108]	@ (800cf18 <_dtoa_r+0x2e0>)
 800ceac:	4602      	mov	r2, r0
 800ceae:	f240 11af 	movw	r1, #431	@ 0x1af
 800ceb2:	e6d8      	b.n	800cc66 <_dtoa_r+0x2e>
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	e7e0      	b.n	800ce7a <_dtoa_r+0x242>
 800ceb8:	2401      	movs	r4, #1
 800ceba:	2300      	movs	r3, #0
 800cebc:	9309      	str	r3, [sp, #36]	@ 0x24
 800cebe:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cec0:	f04f 33ff 	mov.w	r3, #4294967295
 800cec4:	9300      	str	r3, [sp, #0]
 800cec6:	9307      	str	r3, [sp, #28]
 800cec8:	2200      	movs	r2, #0
 800ceca:	2312      	movs	r3, #18
 800cecc:	e7d0      	b.n	800ce70 <_dtoa_r+0x238>
 800cece:	2301      	movs	r3, #1
 800ced0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ced2:	e7f5      	b.n	800cec0 <_dtoa_r+0x288>
 800ced4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ced6:	9300      	str	r3, [sp, #0]
 800ced8:	9307      	str	r3, [sp, #28]
 800ceda:	e7d7      	b.n	800ce8c <_dtoa_r+0x254>
 800cedc:	3101      	adds	r1, #1
 800cede:	0052      	lsls	r2, r2, #1
 800cee0:	e7d8      	b.n	800ce94 <_dtoa_r+0x25c>
 800cee2:	bf00      	nop
 800cee4:	f3af 8000 	nop.w
 800cee8:	636f4361 	.word	0x636f4361
 800ceec:	3fd287a7 	.word	0x3fd287a7
 800cef0:	8b60c8b3 	.word	0x8b60c8b3
 800cef4:	3fc68a28 	.word	0x3fc68a28
 800cef8:	509f79fb 	.word	0x509f79fb
 800cefc:	3fd34413 	.word	0x3fd34413
 800cf00:	08012a3d 	.word	0x08012a3d
 800cf04:	08012af7 	.word	0x08012af7
 800cf08:	7ff00000 	.word	0x7ff00000
 800cf0c:	08012a1a 	.word	0x08012a1a
 800cf10:	3ff80000 	.word	0x3ff80000
 800cf14:	08012bf0 	.word	0x08012bf0
 800cf18:	08012b4f 	.word	0x08012b4f
 800cf1c:	08012af3 	.word	0x08012af3
 800cf20:	08012a19 	.word	0x08012a19
 800cf24:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cf28:	6018      	str	r0, [r3, #0]
 800cf2a:	9b07      	ldr	r3, [sp, #28]
 800cf2c:	2b0e      	cmp	r3, #14
 800cf2e:	f200 80a4 	bhi.w	800d07a <_dtoa_r+0x442>
 800cf32:	2c00      	cmp	r4, #0
 800cf34:	f000 80a1 	beq.w	800d07a <_dtoa_r+0x442>
 800cf38:	2f00      	cmp	r7, #0
 800cf3a:	dd33      	ble.n	800cfa4 <_dtoa_r+0x36c>
 800cf3c:	4bad      	ldr	r3, [pc, #692]	@ (800d1f4 <_dtoa_r+0x5bc>)
 800cf3e:	f007 020f 	and.w	r2, r7, #15
 800cf42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf46:	ed93 7b00 	vldr	d7, [r3]
 800cf4a:	05f8      	lsls	r0, r7, #23
 800cf4c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cf50:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cf54:	d516      	bpl.n	800cf84 <_dtoa_r+0x34c>
 800cf56:	4ba8      	ldr	r3, [pc, #672]	@ (800d1f8 <_dtoa_r+0x5c0>)
 800cf58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cf60:	f7f3 fc74 	bl	800084c <__aeabi_ddiv>
 800cf64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf68:	f004 040f 	and.w	r4, r4, #15
 800cf6c:	2603      	movs	r6, #3
 800cf6e:	4da2      	ldr	r5, [pc, #648]	@ (800d1f8 <_dtoa_r+0x5c0>)
 800cf70:	b954      	cbnz	r4, 800cf88 <_dtoa_r+0x350>
 800cf72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf7a:	f7f3 fc67 	bl	800084c <__aeabi_ddiv>
 800cf7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf82:	e028      	b.n	800cfd6 <_dtoa_r+0x39e>
 800cf84:	2602      	movs	r6, #2
 800cf86:	e7f2      	b.n	800cf6e <_dtoa_r+0x336>
 800cf88:	07e1      	lsls	r1, r4, #31
 800cf8a:	d508      	bpl.n	800cf9e <_dtoa_r+0x366>
 800cf8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cf90:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cf94:	f7f3 fb30 	bl	80005f8 <__aeabi_dmul>
 800cf98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cf9c:	3601      	adds	r6, #1
 800cf9e:	1064      	asrs	r4, r4, #1
 800cfa0:	3508      	adds	r5, #8
 800cfa2:	e7e5      	b.n	800cf70 <_dtoa_r+0x338>
 800cfa4:	f000 80d2 	beq.w	800d14c <_dtoa_r+0x514>
 800cfa8:	427c      	negs	r4, r7
 800cfaa:	4b92      	ldr	r3, [pc, #584]	@ (800d1f4 <_dtoa_r+0x5bc>)
 800cfac:	4d92      	ldr	r5, [pc, #584]	@ (800d1f8 <_dtoa_r+0x5c0>)
 800cfae:	f004 020f 	and.w	r2, r4, #15
 800cfb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cfbe:	f7f3 fb1b 	bl	80005f8 <__aeabi_dmul>
 800cfc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfc6:	1124      	asrs	r4, r4, #4
 800cfc8:	2300      	movs	r3, #0
 800cfca:	2602      	movs	r6, #2
 800cfcc:	2c00      	cmp	r4, #0
 800cfce:	f040 80b2 	bne.w	800d136 <_dtoa_r+0x4fe>
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d1d3      	bne.n	800cf7e <_dtoa_r+0x346>
 800cfd6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cfd8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	f000 80b7 	beq.w	800d150 <_dtoa_r+0x518>
 800cfe2:	4b86      	ldr	r3, [pc, #536]	@ (800d1fc <_dtoa_r+0x5c4>)
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	4629      	mov	r1, r5
 800cfea:	f7f3 fd77 	bl	8000adc <__aeabi_dcmplt>
 800cfee:	2800      	cmp	r0, #0
 800cff0:	f000 80ae 	beq.w	800d150 <_dtoa_r+0x518>
 800cff4:	9b07      	ldr	r3, [sp, #28]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	f000 80aa 	beq.w	800d150 <_dtoa_r+0x518>
 800cffc:	9b00      	ldr	r3, [sp, #0]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	dd37      	ble.n	800d072 <_dtoa_r+0x43a>
 800d002:	1e7b      	subs	r3, r7, #1
 800d004:	9304      	str	r3, [sp, #16]
 800d006:	4620      	mov	r0, r4
 800d008:	4b7d      	ldr	r3, [pc, #500]	@ (800d200 <_dtoa_r+0x5c8>)
 800d00a:	2200      	movs	r2, #0
 800d00c:	4629      	mov	r1, r5
 800d00e:	f7f3 faf3 	bl	80005f8 <__aeabi_dmul>
 800d012:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d016:	9c00      	ldr	r4, [sp, #0]
 800d018:	3601      	adds	r6, #1
 800d01a:	4630      	mov	r0, r6
 800d01c:	f7f3 fa82 	bl	8000524 <__aeabi_i2d>
 800d020:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d024:	f7f3 fae8 	bl	80005f8 <__aeabi_dmul>
 800d028:	4b76      	ldr	r3, [pc, #472]	@ (800d204 <_dtoa_r+0x5cc>)
 800d02a:	2200      	movs	r2, #0
 800d02c:	f7f3 f92e 	bl	800028c <__adddf3>
 800d030:	4605      	mov	r5, r0
 800d032:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d036:	2c00      	cmp	r4, #0
 800d038:	f040 808d 	bne.w	800d156 <_dtoa_r+0x51e>
 800d03c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d040:	4b71      	ldr	r3, [pc, #452]	@ (800d208 <_dtoa_r+0x5d0>)
 800d042:	2200      	movs	r2, #0
 800d044:	f7f3 f920 	bl	8000288 <__aeabi_dsub>
 800d048:	4602      	mov	r2, r0
 800d04a:	460b      	mov	r3, r1
 800d04c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d050:	462a      	mov	r2, r5
 800d052:	4633      	mov	r3, r6
 800d054:	f7f3 fd60 	bl	8000b18 <__aeabi_dcmpgt>
 800d058:	2800      	cmp	r0, #0
 800d05a:	f040 828b 	bne.w	800d574 <_dtoa_r+0x93c>
 800d05e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d062:	462a      	mov	r2, r5
 800d064:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d068:	f7f3 fd38 	bl	8000adc <__aeabi_dcmplt>
 800d06c:	2800      	cmp	r0, #0
 800d06e:	f040 8128 	bne.w	800d2c2 <_dtoa_r+0x68a>
 800d072:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d076:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d07a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	f2c0 815a 	blt.w	800d336 <_dtoa_r+0x6fe>
 800d082:	2f0e      	cmp	r7, #14
 800d084:	f300 8157 	bgt.w	800d336 <_dtoa_r+0x6fe>
 800d088:	4b5a      	ldr	r3, [pc, #360]	@ (800d1f4 <_dtoa_r+0x5bc>)
 800d08a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d08e:	ed93 7b00 	vldr	d7, [r3]
 800d092:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d094:	2b00      	cmp	r3, #0
 800d096:	ed8d 7b00 	vstr	d7, [sp]
 800d09a:	da03      	bge.n	800d0a4 <_dtoa_r+0x46c>
 800d09c:	9b07      	ldr	r3, [sp, #28]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	f340 8101 	ble.w	800d2a6 <_dtoa_r+0x66e>
 800d0a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d0a8:	4656      	mov	r6, sl
 800d0aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0ae:	4620      	mov	r0, r4
 800d0b0:	4629      	mov	r1, r5
 800d0b2:	f7f3 fbcb 	bl	800084c <__aeabi_ddiv>
 800d0b6:	f7f3 fd4f 	bl	8000b58 <__aeabi_d2iz>
 800d0ba:	4680      	mov	r8, r0
 800d0bc:	f7f3 fa32 	bl	8000524 <__aeabi_i2d>
 800d0c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0c4:	f7f3 fa98 	bl	80005f8 <__aeabi_dmul>
 800d0c8:	4602      	mov	r2, r0
 800d0ca:	460b      	mov	r3, r1
 800d0cc:	4620      	mov	r0, r4
 800d0ce:	4629      	mov	r1, r5
 800d0d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d0d4:	f7f3 f8d8 	bl	8000288 <__aeabi_dsub>
 800d0d8:	f806 4b01 	strb.w	r4, [r6], #1
 800d0dc:	9d07      	ldr	r5, [sp, #28]
 800d0de:	eba6 040a 	sub.w	r4, r6, sl
 800d0e2:	42a5      	cmp	r5, r4
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	460b      	mov	r3, r1
 800d0e8:	f040 8117 	bne.w	800d31a <_dtoa_r+0x6e2>
 800d0ec:	f7f3 f8ce 	bl	800028c <__adddf3>
 800d0f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0f4:	4604      	mov	r4, r0
 800d0f6:	460d      	mov	r5, r1
 800d0f8:	f7f3 fd0e 	bl	8000b18 <__aeabi_dcmpgt>
 800d0fc:	2800      	cmp	r0, #0
 800d0fe:	f040 80f9 	bne.w	800d2f4 <_dtoa_r+0x6bc>
 800d102:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d106:	4620      	mov	r0, r4
 800d108:	4629      	mov	r1, r5
 800d10a:	f7f3 fcdd 	bl	8000ac8 <__aeabi_dcmpeq>
 800d10e:	b118      	cbz	r0, 800d118 <_dtoa_r+0x4e0>
 800d110:	f018 0f01 	tst.w	r8, #1
 800d114:	f040 80ee 	bne.w	800d2f4 <_dtoa_r+0x6bc>
 800d118:	4649      	mov	r1, r9
 800d11a:	4658      	mov	r0, fp
 800d11c:	f000 fc90 	bl	800da40 <_Bfree>
 800d120:	2300      	movs	r3, #0
 800d122:	7033      	strb	r3, [r6, #0]
 800d124:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d126:	3701      	adds	r7, #1
 800d128:	601f      	str	r7, [r3, #0]
 800d12a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	f000 831d 	beq.w	800d76c <_dtoa_r+0xb34>
 800d132:	601e      	str	r6, [r3, #0]
 800d134:	e31a      	b.n	800d76c <_dtoa_r+0xb34>
 800d136:	07e2      	lsls	r2, r4, #31
 800d138:	d505      	bpl.n	800d146 <_dtoa_r+0x50e>
 800d13a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d13e:	f7f3 fa5b 	bl	80005f8 <__aeabi_dmul>
 800d142:	3601      	adds	r6, #1
 800d144:	2301      	movs	r3, #1
 800d146:	1064      	asrs	r4, r4, #1
 800d148:	3508      	adds	r5, #8
 800d14a:	e73f      	b.n	800cfcc <_dtoa_r+0x394>
 800d14c:	2602      	movs	r6, #2
 800d14e:	e742      	b.n	800cfd6 <_dtoa_r+0x39e>
 800d150:	9c07      	ldr	r4, [sp, #28]
 800d152:	9704      	str	r7, [sp, #16]
 800d154:	e761      	b.n	800d01a <_dtoa_r+0x3e2>
 800d156:	4b27      	ldr	r3, [pc, #156]	@ (800d1f4 <_dtoa_r+0x5bc>)
 800d158:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d15a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d15e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d162:	4454      	add	r4, sl
 800d164:	2900      	cmp	r1, #0
 800d166:	d053      	beq.n	800d210 <_dtoa_r+0x5d8>
 800d168:	4928      	ldr	r1, [pc, #160]	@ (800d20c <_dtoa_r+0x5d4>)
 800d16a:	2000      	movs	r0, #0
 800d16c:	f7f3 fb6e 	bl	800084c <__aeabi_ddiv>
 800d170:	4633      	mov	r3, r6
 800d172:	462a      	mov	r2, r5
 800d174:	f7f3 f888 	bl	8000288 <__aeabi_dsub>
 800d178:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d17c:	4656      	mov	r6, sl
 800d17e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d182:	f7f3 fce9 	bl	8000b58 <__aeabi_d2iz>
 800d186:	4605      	mov	r5, r0
 800d188:	f7f3 f9cc 	bl	8000524 <__aeabi_i2d>
 800d18c:	4602      	mov	r2, r0
 800d18e:	460b      	mov	r3, r1
 800d190:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d194:	f7f3 f878 	bl	8000288 <__aeabi_dsub>
 800d198:	3530      	adds	r5, #48	@ 0x30
 800d19a:	4602      	mov	r2, r0
 800d19c:	460b      	mov	r3, r1
 800d19e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d1a2:	f806 5b01 	strb.w	r5, [r6], #1
 800d1a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d1aa:	f7f3 fc97 	bl	8000adc <__aeabi_dcmplt>
 800d1ae:	2800      	cmp	r0, #0
 800d1b0:	d171      	bne.n	800d296 <_dtoa_r+0x65e>
 800d1b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d1b6:	4911      	ldr	r1, [pc, #68]	@ (800d1fc <_dtoa_r+0x5c4>)
 800d1b8:	2000      	movs	r0, #0
 800d1ba:	f7f3 f865 	bl	8000288 <__aeabi_dsub>
 800d1be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d1c2:	f7f3 fc8b 	bl	8000adc <__aeabi_dcmplt>
 800d1c6:	2800      	cmp	r0, #0
 800d1c8:	f040 8095 	bne.w	800d2f6 <_dtoa_r+0x6be>
 800d1cc:	42a6      	cmp	r6, r4
 800d1ce:	f43f af50 	beq.w	800d072 <_dtoa_r+0x43a>
 800d1d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d1d6:	4b0a      	ldr	r3, [pc, #40]	@ (800d200 <_dtoa_r+0x5c8>)
 800d1d8:	2200      	movs	r2, #0
 800d1da:	f7f3 fa0d 	bl	80005f8 <__aeabi_dmul>
 800d1de:	4b08      	ldr	r3, [pc, #32]	@ (800d200 <_dtoa_r+0x5c8>)
 800d1e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1ea:	f7f3 fa05 	bl	80005f8 <__aeabi_dmul>
 800d1ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d1f2:	e7c4      	b.n	800d17e <_dtoa_r+0x546>
 800d1f4:	08012bf0 	.word	0x08012bf0
 800d1f8:	08012bc8 	.word	0x08012bc8
 800d1fc:	3ff00000 	.word	0x3ff00000
 800d200:	40240000 	.word	0x40240000
 800d204:	401c0000 	.word	0x401c0000
 800d208:	40140000 	.word	0x40140000
 800d20c:	3fe00000 	.word	0x3fe00000
 800d210:	4631      	mov	r1, r6
 800d212:	4628      	mov	r0, r5
 800d214:	f7f3 f9f0 	bl	80005f8 <__aeabi_dmul>
 800d218:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d21c:	9415      	str	r4, [sp, #84]	@ 0x54
 800d21e:	4656      	mov	r6, sl
 800d220:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d224:	f7f3 fc98 	bl	8000b58 <__aeabi_d2iz>
 800d228:	4605      	mov	r5, r0
 800d22a:	f7f3 f97b 	bl	8000524 <__aeabi_i2d>
 800d22e:	4602      	mov	r2, r0
 800d230:	460b      	mov	r3, r1
 800d232:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d236:	f7f3 f827 	bl	8000288 <__aeabi_dsub>
 800d23a:	3530      	adds	r5, #48	@ 0x30
 800d23c:	f806 5b01 	strb.w	r5, [r6], #1
 800d240:	4602      	mov	r2, r0
 800d242:	460b      	mov	r3, r1
 800d244:	42a6      	cmp	r6, r4
 800d246:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d24a:	f04f 0200 	mov.w	r2, #0
 800d24e:	d124      	bne.n	800d29a <_dtoa_r+0x662>
 800d250:	4bac      	ldr	r3, [pc, #688]	@ (800d504 <_dtoa_r+0x8cc>)
 800d252:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d256:	f7f3 f819 	bl	800028c <__adddf3>
 800d25a:	4602      	mov	r2, r0
 800d25c:	460b      	mov	r3, r1
 800d25e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d262:	f7f3 fc59 	bl	8000b18 <__aeabi_dcmpgt>
 800d266:	2800      	cmp	r0, #0
 800d268:	d145      	bne.n	800d2f6 <_dtoa_r+0x6be>
 800d26a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d26e:	49a5      	ldr	r1, [pc, #660]	@ (800d504 <_dtoa_r+0x8cc>)
 800d270:	2000      	movs	r0, #0
 800d272:	f7f3 f809 	bl	8000288 <__aeabi_dsub>
 800d276:	4602      	mov	r2, r0
 800d278:	460b      	mov	r3, r1
 800d27a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d27e:	f7f3 fc2d 	bl	8000adc <__aeabi_dcmplt>
 800d282:	2800      	cmp	r0, #0
 800d284:	f43f aef5 	beq.w	800d072 <_dtoa_r+0x43a>
 800d288:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d28a:	1e73      	subs	r3, r6, #1
 800d28c:	9315      	str	r3, [sp, #84]	@ 0x54
 800d28e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d292:	2b30      	cmp	r3, #48	@ 0x30
 800d294:	d0f8      	beq.n	800d288 <_dtoa_r+0x650>
 800d296:	9f04      	ldr	r7, [sp, #16]
 800d298:	e73e      	b.n	800d118 <_dtoa_r+0x4e0>
 800d29a:	4b9b      	ldr	r3, [pc, #620]	@ (800d508 <_dtoa_r+0x8d0>)
 800d29c:	f7f3 f9ac 	bl	80005f8 <__aeabi_dmul>
 800d2a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d2a4:	e7bc      	b.n	800d220 <_dtoa_r+0x5e8>
 800d2a6:	d10c      	bne.n	800d2c2 <_dtoa_r+0x68a>
 800d2a8:	4b98      	ldr	r3, [pc, #608]	@ (800d50c <_dtoa_r+0x8d4>)
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d2b0:	f7f3 f9a2 	bl	80005f8 <__aeabi_dmul>
 800d2b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d2b8:	f7f3 fc24 	bl	8000b04 <__aeabi_dcmpge>
 800d2bc:	2800      	cmp	r0, #0
 800d2be:	f000 8157 	beq.w	800d570 <_dtoa_r+0x938>
 800d2c2:	2400      	movs	r4, #0
 800d2c4:	4625      	mov	r5, r4
 800d2c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2c8:	43db      	mvns	r3, r3
 800d2ca:	9304      	str	r3, [sp, #16]
 800d2cc:	4656      	mov	r6, sl
 800d2ce:	2700      	movs	r7, #0
 800d2d0:	4621      	mov	r1, r4
 800d2d2:	4658      	mov	r0, fp
 800d2d4:	f000 fbb4 	bl	800da40 <_Bfree>
 800d2d8:	2d00      	cmp	r5, #0
 800d2da:	d0dc      	beq.n	800d296 <_dtoa_r+0x65e>
 800d2dc:	b12f      	cbz	r7, 800d2ea <_dtoa_r+0x6b2>
 800d2de:	42af      	cmp	r7, r5
 800d2e0:	d003      	beq.n	800d2ea <_dtoa_r+0x6b2>
 800d2e2:	4639      	mov	r1, r7
 800d2e4:	4658      	mov	r0, fp
 800d2e6:	f000 fbab 	bl	800da40 <_Bfree>
 800d2ea:	4629      	mov	r1, r5
 800d2ec:	4658      	mov	r0, fp
 800d2ee:	f000 fba7 	bl	800da40 <_Bfree>
 800d2f2:	e7d0      	b.n	800d296 <_dtoa_r+0x65e>
 800d2f4:	9704      	str	r7, [sp, #16]
 800d2f6:	4633      	mov	r3, r6
 800d2f8:	461e      	mov	r6, r3
 800d2fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d2fe:	2a39      	cmp	r2, #57	@ 0x39
 800d300:	d107      	bne.n	800d312 <_dtoa_r+0x6da>
 800d302:	459a      	cmp	sl, r3
 800d304:	d1f8      	bne.n	800d2f8 <_dtoa_r+0x6c0>
 800d306:	9a04      	ldr	r2, [sp, #16]
 800d308:	3201      	adds	r2, #1
 800d30a:	9204      	str	r2, [sp, #16]
 800d30c:	2230      	movs	r2, #48	@ 0x30
 800d30e:	f88a 2000 	strb.w	r2, [sl]
 800d312:	781a      	ldrb	r2, [r3, #0]
 800d314:	3201      	adds	r2, #1
 800d316:	701a      	strb	r2, [r3, #0]
 800d318:	e7bd      	b.n	800d296 <_dtoa_r+0x65e>
 800d31a:	4b7b      	ldr	r3, [pc, #492]	@ (800d508 <_dtoa_r+0x8d0>)
 800d31c:	2200      	movs	r2, #0
 800d31e:	f7f3 f96b 	bl	80005f8 <__aeabi_dmul>
 800d322:	2200      	movs	r2, #0
 800d324:	2300      	movs	r3, #0
 800d326:	4604      	mov	r4, r0
 800d328:	460d      	mov	r5, r1
 800d32a:	f7f3 fbcd 	bl	8000ac8 <__aeabi_dcmpeq>
 800d32e:	2800      	cmp	r0, #0
 800d330:	f43f aebb 	beq.w	800d0aa <_dtoa_r+0x472>
 800d334:	e6f0      	b.n	800d118 <_dtoa_r+0x4e0>
 800d336:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d338:	2a00      	cmp	r2, #0
 800d33a:	f000 80db 	beq.w	800d4f4 <_dtoa_r+0x8bc>
 800d33e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d340:	2a01      	cmp	r2, #1
 800d342:	f300 80bf 	bgt.w	800d4c4 <_dtoa_r+0x88c>
 800d346:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d348:	2a00      	cmp	r2, #0
 800d34a:	f000 80b7 	beq.w	800d4bc <_dtoa_r+0x884>
 800d34e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d352:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d354:	4646      	mov	r6, r8
 800d356:	9a08      	ldr	r2, [sp, #32]
 800d358:	2101      	movs	r1, #1
 800d35a:	441a      	add	r2, r3
 800d35c:	4658      	mov	r0, fp
 800d35e:	4498      	add	r8, r3
 800d360:	9208      	str	r2, [sp, #32]
 800d362:	f000 fc21 	bl	800dba8 <__i2b>
 800d366:	4605      	mov	r5, r0
 800d368:	b15e      	cbz	r6, 800d382 <_dtoa_r+0x74a>
 800d36a:	9b08      	ldr	r3, [sp, #32]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	dd08      	ble.n	800d382 <_dtoa_r+0x74a>
 800d370:	42b3      	cmp	r3, r6
 800d372:	9a08      	ldr	r2, [sp, #32]
 800d374:	bfa8      	it	ge
 800d376:	4633      	movge	r3, r6
 800d378:	eba8 0803 	sub.w	r8, r8, r3
 800d37c:	1af6      	subs	r6, r6, r3
 800d37e:	1ad3      	subs	r3, r2, r3
 800d380:	9308      	str	r3, [sp, #32]
 800d382:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d384:	b1f3      	cbz	r3, 800d3c4 <_dtoa_r+0x78c>
 800d386:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d388:	2b00      	cmp	r3, #0
 800d38a:	f000 80b7 	beq.w	800d4fc <_dtoa_r+0x8c4>
 800d38e:	b18c      	cbz	r4, 800d3b4 <_dtoa_r+0x77c>
 800d390:	4629      	mov	r1, r5
 800d392:	4622      	mov	r2, r4
 800d394:	4658      	mov	r0, fp
 800d396:	f000 fcc7 	bl	800dd28 <__pow5mult>
 800d39a:	464a      	mov	r2, r9
 800d39c:	4601      	mov	r1, r0
 800d39e:	4605      	mov	r5, r0
 800d3a0:	4658      	mov	r0, fp
 800d3a2:	f000 fc17 	bl	800dbd4 <__multiply>
 800d3a6:	4649      	mov	r1, r9
 800d3a8:	9004      	str	r0, [sp, #16]
 800d3aa:	4658      	mov	r0, fp
 800d3ac:	f000 fb48 	bl	800da40 <_Bfree>
 800d3b0:	9b04      	ldr	r3, [sp, #16]
 800d3b2:	4699      	mov	r9, r3
 800d3b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3b6:	1b1a      	subs	r2, r3, r4
 800d3b8:	d004      	beq.n	800d3c4 <_dtoa_r+0x78c>
 800d3ba:	4649      	mov	r1, r9
 800d3bc:	4658      	mov	r0, fp
 800d3be:	f000 fcb3 	bl	800dd28 <__pow5mult>
 800d3c2:	4681      	mov	r9, r0
 800d3c4:	2101      	movs	r1, #1
 800d3c6:	4658      	mov	r0, fp
 800d3c8:	f000 fbee 	bl	800dba8 <__i2b>
 800d3cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3ce:	4604      	mov	r4, r0
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	f000 81cf 	beq.w	800d774 <_dtoa_r+0xb3c>
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	4601      	mov	r1, r0
 800d3da:	4658      	mov	r0, fp
 800d3dc:	f000 fca4 	bl	800dd28 <__pow5mult>
 800d3e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3e2:	2b01      	cmp	r3, #1
 800d3e4:	4604      	mov	r4, r0
 800d3e6:	f300 8095 	bgt.w	800d514 <_dtoa_r+0x8dc>
 800d3ea:	9b02      	ldr	r3, [sp, #8]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	f040 8087 	bne.w	800d500 <_dtoa_r+0x8c8>
 800d3f2:	9b03      	ldr	r3, [sp, #12]
 800d3f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	f040 8089 	bne.w	800d510 <_dtoa_r+0x8d8>
 800d3fe:	9b03      	ldr	r3, [sp, #12]
 800d400:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d404:	0d1b      	lsrs	r3, r3, #20
 800d406:	051b      	lsls	r3, r3, #20
 800d408:	b12b      	cbz	r3, 800d416 <_dtoa_r+0x7de>
 800d40a:	9b08      	ldr	r3, [sp, #32]
 800d40c:	3301      	adds	r3, #1
 800d40e:	9308      	str	r3, [sp, #32]
 800d410:	f108 0801 	add.w	r8, r8, #1
 800d414:	2301      	movs	r3, #1
 800d416:	930a      	str	r3, [sp, #40]	@ 0x28
 800d418:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	f000 81b0 	beq.w	800d780 <_dtoa_r+0xb48>
 800d420:	6923      	ldr	r3, [r4, #16]
 800d422:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d426:	6918      	ldr	r0, [r3, #16]
 800d428:	f000 fb72 	bl	800db10 <__hi0bits>
 800d42c:	f1c0 0020 	rsb	r0, r0, #32
 800d430:	9b08      	ldr	r3, [sp, #32]
 800d432:	4418      	add	r0, r3
 800d434:	f010 001f 	ands.w	r0, r0, #31
 800d438:	d077      	beq.n	800d52a <_dtoa_r+0x8f2>
 800d43a:	f1c0 0320 	rsb	r3, r0, #32
 800d43e:	2b04      	cmp	r3, #4
 800d440:	dd6b      	ble.n	800d51a <_dtoa_r+0x8e2>
 800d442:	9b08      	ldr	r3, [sp, #32]
 800d444:	f1c0 001c 	rsb	r0, r0, #28
 800d448:	4403      	add	r3, r0
 800d44a:	4480      	add	r8, r0
 800d44c:	4406      	add	r6, r0
 800d44e:	9308      	str	r3, [sp, #32]
 800d450:	f1b8 0f00 	cmp.w	r8, #0
 800d454:	dd05      	ble.n	800d462 <_dtoa_r+0x82a>
 800d456:	4649      	mov	r1, r9
 800d458:	4642      	mov	r2, r8
 800d45a:	4658      	mov	r0, fp
 800d45c:	f000 fcbe 	bl	800dddc <__lshift>
 800d460:	4681      	mov	r9, r0
 800d462:	9b08      	ldr	r3, [sp, #32]
 800d464:	2b00      	cmp	r3, #0
 800d466:	dd05      	ble.n	800d474 <_dtoa_r+0x83c>
 800d468:	4621      	mov	r1, r4
 800d46a:	461a      	mov	r2, r3
 800d46c:	4658      	mov	r0, fp
 800d46e:	f000 fcb5 	bl	800dddc <__lshift>
 800d472:	4604      	mov	r4, r0
 800d474:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d476:	2b00      	cmp	r3, #0
 800d478:	d059      	beq.n	800d52e <_dtoa_r+0x8f6>
 800d47a:	4621      	mov	r1, r4
 800d47c:	4648      	mov	r0, r9
 800d47e:	f000 fd19 	bl	800deb4 <__mcmp>
 800d482:	2800      	cmp	r0, #0
 800d484:	da53      	bge.n	800d52e <_dtoa_r+0x8f6>
 800d486:	1e7b      	subs	r3, r7, #1
 800d488:	9304      	str	r3, [sp, #16]
 800d48a:	4649      	mov	r1, r9
 800d48c:	2300      	movs	r3, #0
 800d48e:	220a      	movs	r2, #10
 800d490:	4658      	mov	r0, fp
 800d492:	f000 faf7 	bl	800da84 <__multadd>
 800d496:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d498:	4681      	mov	r9, r0
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	f000 8172 	beq.w	800d784 <_dtoa_r+0xb4c>
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	4629      	mov	r1, r5
 800d4a4:	220a      	movs	r2, #10
 800d4a6:	4658      	mov	r0, fp
 800d4a8:	f000 faec 	bl	800da84 <__multadd>
 800d4ac:	9b00      	ldr	r3, [sp, #0]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	4605      	mov	r5, r0
 800d4b2:	dc67      	bgt.n	800d584 <_dtoa_r+0x94c>
 800d4b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4b6:	2b02      	cmp	r3, #2
 800d4b8:	dc41      	bgt.n	800d53e <_dtoa_r+0x906>
 800d4ba:	e063      	b.n	800d584 <_dtoa_r+0x94c>
 800d4bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d4be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d4c2:	e746      	b.n	800d352 <_dtoa_r+0x71a>
 800d4c4:	9b07      	ldr	r3, [sp, #28]
 800d4c6:	1e5c      	subs	r4, r3, #1
 800d4c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4ca:	42a3      	cmp	r3, r4
 800d4cc:	bfbf      	itttt	lt
 800d4ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d4d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d4d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d4d4:	1ae3      	sublt	r3, r4, r3
 800d4d6:	bfb4      	ite	lt
 800d4d8:	18d2      	addlt	r2, r2, r3
 800d4da:	1b1c      	subge	r4, r3, r4
 800d4dc:	9b07      	ldr	r3, [sp, #28]
 800d4de:	bfbc      	itt	lt
 800d4e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d4e2:	2400      	movlt	r4, #0
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	bfb5      	itete	lt
 800d4e8:	eba8 0603 	sublt.w	r6, r8, r3
 800d4ec:	9b07      	ldrge	r3, [sp, #28]
 800d4ee:	2300      	movlt	r3, #0
 800d4f0:	4646      	movge	r6, r8
 800d4f2:	e730      	b.n	800d356 <_dtoa_r+0x71e>
 800d4f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d4f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d4f8:	4646      	mov	r6, r8
 800d4fa:	e735      	b.n	800d368 <_dtoa_r+0x730>
 800d4fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d4fe:	e75c      	b.n	800d3ba <_dtoa_r+0x782>
 800d500:	2300      	movs	r3, #0
 800d502:	e788      	b.n	800d416 <_dtoa_r+0x7de>
 800d504:	3fe00000 	.word	0x3fe00000
 800d508:	40240000 	.word	0x40240000
 800d50c:	40140000 	.word	0x40140000
 800d510:	9b02      	ldr	r3, [sp, #8]
 800d512:	e780      	b.n	800d416 <_dtoa_r+0x7de>
 800d514:	2300      	movs	r3, #0
 800d516:	930a      	str	r3, [sp, #40]	@ 0x28
 800d518:	e782      	b.n	800d420 <_dtoa_r+0x7e8>
 800d51a:	d099      	beq.n	800d450 <_dtoa_r+0x818>
 800d51c:	9a08      	ldr	r2, [sp, #32]
 800d51e:	331c      	adds	r3, #28
 800d520:	441a      	add	r2, r3
 800d522:	4498      	add	r8, r3
 800d524:	441e      	add	r6, r3
 800d526:	9208      	str	r2, [sp, #32]
 800d528:	e792      	b.n	800d450 <_dtoa_r+0x818>
 800d52a:	4603      	mov	r3, r0
 800d52c:	e7f6      	b.n	800d51c <_dtoa_r+0x8e4>
 800d52e:	9b07      	ldr	r3, [sp, #28]
 800d530:	9704      	str	r7, [sp, #16]
 800d532:	2b00      	cmp	r3, #0
 800d534:	dc20      	bgt.n	800d578 <_dtoa_r+0x940>
 800d536:	9300      	str	r3, [sp, #0]
 800d538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d53a:	2b02      	cmp	r3, #2
 800d53c:	dd1e      	ble.n	800d57c <_dtoa_r+0x944>
 800d53e:	9b00      	ldr	r3, [sp, #0]
 800d540:	2b00      	cmp	r3, #0
 800d542:	f47f aec0 	bne.w	800d2c6 <_dtoa_r+0x68e>
 800d546:	4621      	mov	r1, r4
 800d548:	2205      	movs	r2, #5
 800d54a:	4658      	mov	r0, fp
 800d54c:	f000 fa9a 	bl	800da84 <__multadd>
 800d550:	4601      	mov	r1, r0
 800d552:	4604      	mov	r4, r0
 800d554:	4648      	mov	r0, r9
 800d556:	f000 fcad 	bl	800deb4 <__mcmp>
 800d55a:	2800      	cmp	r0, #0
 800d55c:	f77f aeb3 	ble.w	800d2c6 <_dtoa_r+0x68e>
 800d560:	4656      	mov	r6, sl
 800d562:	2331      	movs	r3, #49	@ 0x31
 800d564:	f806 3b01 	strb.w	r3, [r6], #1
 800d568:	9b04      	ldr	r3, [sp, #16]
 800d56a:	3301      	adds	r3, #1
 800d56c:	9304      	str	r3, [sp, #16]
 800d56e:	e6ae      	b.n	800d2ce <_dtoa_r+0x696>
 800d570:	9c07      	ldr	r4, [sp, #28]
 800d572:	9704      	str	r7, [sp, #16]
 800d574:	4625      	mov	r5, r4
 800d576:	e7f3      	b.n	800d560 <_dtoa_r+0x928>
 800d578:	9b07      	ldr	r3, [sp, #28]
 800d57a:	9300      	str	r3, [sp, #0]
 800d57c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d57e:	2b00      	cmp	r3, #0
 800d580:	f000 8104 	beq.w	800d78c <_dtoa_r+0xb54>
 800d584:	2e00      	cmp	r6, #0
 800d586:	dd05      	ble.n	800d594 <_dtoa_r+0x95c>
 800d588:	4629      	mov	r1, r5
 800d58a:	4632      	mov	r2, r6
 800d58c:	4658      	mov	r0, fp
 800d58e:	f000 fc25 	bl	800dddc <__lshift>
 800d592:	4605      	mov	r5, r0
 800d594:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d596:	2b00      	cmp	r3, #0
 800d598:	d05a      	beq.n	800d650 <_dtoa_r+0xa18>
 800d59a:	6869      	ldr	r1, [r5, #4]
 800d59c:	4658      	mov	r0, fp
 800d59e:	f000 fa0f 	bl	800d9c0 <_Balloc>
 800d5a2:	4606      	mov	r6, r0
 800d5a4:	b928      	cbnz	r0, 800d5b2 <_dtoa_r+0x97a>
 800d5a6:	4b84      	ldr	r3, [pc, #528]	@ (800d7b8 <_dtoa_r+0xb80>)
 800d5a8:	4602      	mov	r2, r0
 800d5aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d5ae:	f7ff bb5a 	b.w	800cc66 <_dtoa_r+0x2e>
 800d5b2:	692a      	ldr	r2, [r5, #16]
 800d5b4:	3202      	adds	r2, #2
 800d5b6:	0092      	lsls	r2, r2, #2
 800d5b8:	f105 010c 	add.w	r1, r5, #12
 800d5bc:	300c      	adds	r0, #12
 800d5be:	f7ff fa84 	bl	800caca <memcpy>
 800d5c2:	2201      	movs	r2, #1
 800d5c4:	4631      	mov	r1, r6
 800d5c6:	4658      	mov	r0, fp
 800d5c8:	f000 fc08 	bl	800dddc <__lshift>
 800d5cc:	f10a 0301 	add.w	r3, sl, #1
 800d5d0:	9307      	str	r3, [sp, #28]
 800d5d2:	9b00      	ldr	r3, [sp, #0]
 800d5d4:	4453      	add	r3, sl
 800d5d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d5d8:	9b02      	ldr	r3, [sp, #8]
 800d5da:	f003 0301 	and.w	r3, r3, #1
 800d5de:	462f      	mov	r7, r5
 800d5e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5e2:	4605      	mov	r5, r0
 800d5e4:	9b07      	ldr	r3, [sp, #28]
 800d5e6:	4621      	mov	r1, r4
 800d5e8:	3b01      	subs	r3, #1
 800d5ea:	4648      	mov	r0, r9
 800d5ec:	9300      	str	r3, [sp, #0]
 800d5ee:	f7ff fa99 	bl	800cb24 <quorem>
 800d5f2:	4639      	mov	r1, r7
 800d5f4:	9002      	str	r0, [sp, #8]
 800d5f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d5fa:	4648      	mov	r0, r9
 800d5fc:	f000 fc5a 	bl	800deb4 <__mcmp>
 800d600:	462a      	mov	r2, r5
 800d602:	9008      	str	r0, [sp, #32]
 800d604:	4621      	mov	r1, r4
 800d606:	4658      	mov	r0, fp
 800d608:	f000 fc70 	bl	800deec <__mdiff>
 800d60c:	68c2      	ldr	r2, [r0, #12]
 800d60e:	4606      	mov	r6, r0
 800d610:	bb02      	cbnz	r2, 800d654 <_dtoa_r+0xa1c>
 800d612:	4601      	mov	r1, r0
 800d614:	4648      	mov	r0, r9
 800d616:	f000 fc4d 	bl	800deb4 <__mcmp>
 800d61a:	4602      	mov	r2, r0
 800d61c:	4631      	mov	r1, r6
 800d61e:	4658      	mov	r0, fp
 800d620:	920e      	str	r2, [sp, #56]	@ 0x38
 800d622:	f000 fa0d 	bl	800da40 <_Bfree>
 800d626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d628:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d62a:	9e07      	ldr	r6, [sp, #28]
 800d62c:	ea43 0102 	orr.w	r1, r3, r2
 800d630:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d632:	4319      	orrs	r1, r3
 800d634:	d110      	bne.n	800d658 <_dtoa_r+0xa20>
 800d636:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d63a:	d029      	beq.n	800d690 <_dtoa_r+0xa58>
 800d63c:	9b08      	ldr	r3, [sp, #32]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	dd02      	ble.n	800d648 <_dtoa_r+0xa10>
 800d642:	9b02      	ldr	r3, [sp, #8]
 800d644:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d648:	9b00      	ldr	r3, [sp, #0]
 800d64a:	f883 8000 	strb.w	r8, [r3]
 800d64e:	e63f      	b.n	800d2d0 <_dtoa_r+0x698>
 800d650:	4628      	mov	r0, r5
 800d652:	e7bb      	b.n	800d5cc <_dtoa_r+0x994>
 800d654:	2201      	movs	r2, #1
 800d656:	e7e1      	b.n	800d61c <_dtoa_r+0x9e4>
 800d658:	9b08      	ldr	r3, [sp, #32]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	db04      	blt.n	800d668 <_dtoa_r+0xa30>
 800d65e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d660:	430b      	orrs	r3, r1
 800d662:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d664:	430b      	orrs	r3, r1
 800d666:	d120      	bne.n	800d6aa <_dtoa_r+0xa72>
 800d668:	2a00      	cmp	r2, #0
 800d66a:	dded      	ble.n	800d648 <_dtoa_r+0xa10>
 800d66c:	4649      	mov	r1, r9
 800d66e:	2201      	movs	r2, #1
 800d670:	4658      	mov	r0, fp
 800d672:	f000 fbb3 	bl	800dddc <__lshift>
 800d676:	4621      	mov	r1, r4
 800d678:	4681      	mov	r9, r0
 800d67a:	f000 fc1b 	bl	800deb4 <__mcmp>
 800d67e:	2800      	cmp	r0, #0
 800d680:	dc03      	bgt.n	800d68a <_dtoa_r+0xa52>
 800d682:	d1e1      	bne.n	800d648 <_dtoa_r+0xa10>
 800d684:	f018 0f01 	tst.w	r8, #1
 800d688:	d0de      	beq.n	800d648 <_dtoa_r+0xa10>
 800d68a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d68e:	d1d8      	bne.n	800d642 <_dtoa_r+0xa0a>
 800d690:	9a00      	ldr	r2, [sp, #0]
 800d692:	2339      	movs	r3, #57	@ 0x39
 800d694:	7013      	strb	r3, [r2, #0]
 800d696:	4633      	mov	r3, r6
 800d698:	461e      	mov	r6, r3
 800d69a:	3b01      	subs	r3, #1
 800d69c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d6a0:	2a39      	cmp	r2, #57	@ 0x39
 800d6a2:	d052      	beq.n	800d74a <_dtoa_r+0xb12>
 800d6a4:	3201      	adds	r2, #1
 800d6a6:	701a      	strb	r2, [r3, #0]
 800d6a8:	e612      	b.n	800d2d0 <_dtoa_r+0x698>
 800d6aa:	2a00      	cmp	r2, #0
 800d6ac:	dd07      	ble.n	800d6be <_dtoa_r+0xa86>
 800d6ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d6b2:	d0ed      	beq.n	800d690 <_dtoa_r+0xa58>
 800d6b4:	9a00      	ldr	r2, [sp, #0]
 800d6b6:	f108 0301 	add.w	r3, r8, #1
 800d6ba:	7013      	strb	r3, [r2, #0]
 800d6bc:	e608      	b.n	800d2d0 <_dtoa_r+0x698>
 800d6be:	9b07      	ldr	r3, [sp, #28]
 800d6c0:	9a07      	ldr	r2, [sp, #28]
 800d6c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d6c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d028      	beq.n	800d71e <_dtoa_r+0xae6>
 800d6cc:	4649      	mov	r1, r9
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	220a      	movs	r2, #10
 800d6d2:	4658      	mov	r0, fp
 800d6d4:	f000 f9d6 	bl	800da84 <__multadd>
 800d6d8:	42af      	cmp	r7, r5
 800d6da:	4681      	mov	r9, r0
 800d6dc:	f04f 0300 	mov.w	r3, #0
 800d6e0:	f04f 020a 	mov.w	r2, #10
 800d6e4:	4639      	mov	r1, r7
 800d6e6:	4658      	mov	r0, fp
 800d6e8:	d107      	bne.n	800d6fa <_dtoa_r+0xac2>
 800d6ea:	f000 f9cb 	bl	800da84 <__multadd>
 800d6ee:	4607      	mov	r7, r0
 800d6f0:	4605      	mov	r5, r0
 800d6f2:	9b07      	ldr	r3, [sp, #28]
 800d6f4:	3301      	adds	r3, #1
 800d6f6:	9307      	str	r3, [sp, #28]
 800d6f8:	e774      	b.n	800d5e4 <_dtoa_r+0x9ac>
 800d6fa:	f000 f9c3 	bl	800da84 <__multadd>
 800d6fe:	4629      	mov	r1, r5
 800d700:	4607      	mov	r7, r0
 800d702:	2300      	movs	r3, #0
 800d704:	220a      	movs	r2, #10
 800d706:	4658      	mov	r0, fp
 800d708:	f000 f9bc 	bl	800da84 <__multadd>
 800d70c:	4605      	mov	r5, r0
 800d70e:	e7f0      	b.n	800d6f2 <_dtoa_r+0xaba>
 800d710:	9b00      	ldr	r3, [sp, #0]
 800d712:	2b00      	cmp	r3, #0
 800d714:	bfcc      	ite	gt
 800d716:	461e      	movgt	r6, r3
 800d718:	2601      	movle	r6, #1
 800d71a:	4456      	add	r6, sl
 800d71c:	2700      	movs	r7, #0
 800d71e:	4649      	mov	r1, r9
 800d720:	2201      	movs	r2, #1
 800d722:	4658      	mov	r0, fp
 800d724:	f000 fb5a 	bl	800dddc <__lshift>
 800d728:	4621      	mov	r1, r4
 800d72a:	4681      	mov	r9, r0
 800d72c:	f000 fbc2 	bl	800deb4 <__mcmp>
 800d730:	2800      	cmp	r0, #0
 800d732:	dcb0      	bgt.n	800d696 <_dtoa_r+0xa5e>
 800d734:	d102      	bne.n	800d73c <_dtoa_r+0xb04>
 800d736:	f018 0f01 	tst.w	r8, #1
 800d73a:	d1ac      	bne.n	800d696 <_dtoa_r+0xa5e>
 800d73c:	4633      	mov	r3, r6
 800d73e:	461e      	mov	r6, r3
 800d740:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d744:	2a30      	cmp	r2, #48	@ 0x30
 800d746:	d0fa      	beq.n	800d73e <_dtoa_r+0xb06>
 800d748:	e5c2      	b.n	800d2d0 <_dtoa_r+0x698>
 800d74a:	459a      	cmp	sl, r3
 800d74c:	d1a4      	bne.n	800d698 <_dtoa_r+0xa60>
 800d74e:	9b04      	ldr	r3, [sp, #16]
 800d750:	3301      	adds	r3, #1
 800d752:	9304      	str	r3, [sp, #16]
 800d754:	2331      	movs	r3, #49	@ 0x31
 800d756:	f88a 3000 	strb.w	r3, [sl]
 800d75a:	e5b9      	b.n	800d2d0 <_dtoa_r+0x698>
 800d75c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d75e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d7bc <_dtoa_r+0xb84>
 800d762:	b11b      	cbz	r3, 800d76c <_dtoa_r+0xb34>
 800d764:	f10a 0308 	add.w	r3, sl, #8
 800d768:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d76a:	6013      	str	r3, [r2, #0]
 800d76c:	4650      	mov	r0, sl
 800d76e:	b019      	add	sp, #100	@ 0x64
 800d770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d774:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d776:	2b01      	cmp	r3, #1
 800d778:	f77f ae37 	ble.w	800d3ea <_dtoa_r+0x7b2>
 800d77c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d77e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d780:	2001      	movs	r0, #1
 800d782:	e655      	b.n	800d430 <_dtoa_r+0x7f8>
 800d784:	9b00      	ldr	r3, [sp, #0]
 800d786:	2b00      	cmp	r3, #0
 800d788:	f77f aed6 	ble.w	800d538 <_dtoa_r+0x900>
 800d78c:	4656      	mov	r6, sl
 800d78e:	4621      	mov	r1, r4
 800d790:	4648      	mov	r0, r9
 800d792:	f7ff f9c7 	bl	800cb24 <quorem>
 800d796:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d79a:	f806 8b01 	strb.w	r8, [r6], #1
 800d79e:	9b00      	ldr	r3, [sp, #0]
 800d7a0:	eba6 020a 	sub.w	r2, r6, sl
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	ddb3      	ble.n	800d710 <_dtoa_r+0xad8>
 800d7a8:	4649      	mov	r1, r9
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	220a      	movs	r2, #10
 800d7ae:	4658      	mov	r0, fp
 800d7b0:	f000 f968 	bl	800da84 <__multadd>
 800d7b4:	4681      	mov	r9, r0
 800d7b6:	e7ea      	b.n	800d78e <_dtoa_r+0xb56>
 800d7b8:	08012b4f 	.word	0x08012b4f
 800d7bc:	08012aea 	.word	0x08012aea

0800d7c0 <_free_r>:
 800d7c0:	b538      	push	{r3, r4, r5, lr}
 800d7c2:	4605      	mov	r5, r0
 800d7c4:	2900      	cmp	r1, #0
 800d7c6:	d041      	beq.n	800d84c <_free_r+0x8c>
 800d7c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7cc:	1f0c      	subs	r4, r1, #4
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	bfb8      	it	lt
 800d7d2:	18e4      	addlt	r4, r4, r3
 800d7d4:	f000 f8e8 	bl	800d9a8 <__malloc_lock>
 800d7d8:	4a1d      	ldr	r2, [pc, #116]	@ (800d850 <_free_r+0x90>)
 800d7da:	6813      	ldr	r3, [r2, #0]
 800d7dc:	b933      	cbnz	r3, 800d7ec <_free_r+0x2c>
 800d7de:	6063      	str	r3, [r4, #4]
 800d7e0:	6014      	str	r4, [r2, #0]
 800d7e2:	4628      	mov	r0, r5
 800d7e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7e8:	f000 b8e4 	b.w	800d9b4 <__malloc_unlock>
 800d7ec:	42a3      	cmp	r3, r4
 800d7ee:	d908      	bls.n	800d802 <_free_r+0x42>
 800d7f0:	6820      	ldr	r0, [r4, #0]
 800d7f2:	1821      	adds	r1, r4, r0
 800d7f4:	428b      	cmp	r3, r1
 800d7f6:	bf01      	itttt	eq
 800d7f8:	6819      	ldreq	r1, [r3, #0]
 800d7fa:	685b      	ldreq	r3, [r3, #4]
 800d7fc:	1809      	addeq	r1, r1, r0
 800d7fe:	6021      	streq	r1, [r4, #0]
 800d800:	e7ed      	b.n	800d7de <_free_r+0x1e>
 800d802:	461a      	mov	r2, r3
 800d804:	685b      	ldr	r3, [r3, #4]
 800d806:	b10b      	cbz	r3, 800d80c <_free_r+0x4c>
 800d808:	42a3      	cmp	r3, r4
 800d80a:	d9fa      	bls.n	800d802 <_free_r+0x42>
 800d80c:	6811      	ldr	r1, [r2, #0]
 800d80e:	1850      	adds	r0, r2, r1
 800d810:	42a0      	cmp	r0, r4
 800d812:	d10b      	bne.n	800d82c <_free_r+0x6c>
 800d814:	6820      	ldr	r0, [r4, #0]
 800d816:	4401      	add	r1, r0
 800d818:	1850      	adds	r0, r2, r1
 800d81a:	4283      	cmp	r3, r0
 800d81c:	6011      	str	r1, [r2, #0]
 800d81e:	d1e0      	bne.n	800d7e2 <_free_r+0x22>
 800d820:	6818      	ldr	r0, [r3, #0]
 800d822:	685b      	ldr	r3, [r3, #4]
 800d824:	6053      	str	r3, [r2, #4]
 800d826:	4408      	add	r0, r1
 800d828:	6010      	str	r0, [r2, #0]
 800d82a:	e7da      	b.n	800d7e2 <_free_r+0x22>
 800d82c:	d902      	bls.n	800d834 <_free_r+0x74>
 800d82e:	230c      	movs	r3, #12
 800d830:	602b      	str	r3, [r5, #0]
 800d832:	e7d6      	b.n	800d7e2 <_free_r+0x22>
 800d834:	6820      	ldr	r0, [r4, #0]
 800d836:	1821      	adds	r1, r4, r0
 800d838:	428b      	cmp	r3, r1
 800d83a:	bf04      	itt	eq
 800d83c:	6819      	ldreq	r1, [r3, #0]
 800d83e:	685b      	ldreq	r3, [r3, #4]
 800d840:	6063      	str	r3, [r4, #4]
 800d842:	bf04      	itt	eq
 800d844:	1809      	addeq	r1, r1, r0
 800d846:	6021      	streq	r1, [r4, #0]
 800d848:	6054      	str	r4, [r2, #4]
 800d84a:	e7ca      	b.n	800d7e2 <_free_r+0x22>
 800d84c:	bd38      	pop	{r3, r4, r5, pc}
 800d84e:	bf00      	nop
 800d850:	20001440 	.word	0x20001440

0800d854 <malloc>:
 800d854:	4b02      	ldr	r3, [pc, #8]	@ (800d860 <malloc+0xc>)
 800d856:	4601      	mov	r1, r0
 800d858:	6818      	ldr	r0, [r3, #0]
 800d85a:	f000 b825 	b.w	800d8a8 <_malloc_r>
 800d85e:	bf00      	nop
 800d860:	20000168 	.word	0x20000168

0800d864 <sbrk_aligned>:
 800d864:	b570      	push	{r4, r5, r6, lr}
 800d866:	4e0f      	ldr	r6, [pc, #60]	@ (800d8a4 <sbrk_aligned+0x40>)
 800d868:	460c      	mov	r4, r1
 800d86a:	6831      	ldr	r1, [r6, #0]
 800d86c:	4605      	mov	r5, r0
 800d86e:	b911      	cbnz	r1, 800d876 <sbrk_aligned+0x12>
 800d870:	f001 f81e 	bl	800e8b0 <_sbrk_r>
 800d874:	6030      	str	r0, [r6, #0]
 800d876:	4621      	mov	r1, r4
 800d878:	4628      	mov	r0, r5
 800d87a:	f001 f819 	bl	800e8b0 <_sbrk_r>
 800d87e:	1c43      	adds	r3, r0, #1
 800d880:	d103      	bne.n	800d88a <sbrk_aligned+0x26>
 800d882:	f04f 34ff 	mov.w	r4, #4294967295
 800d886:	4620      	mov	r0, r4
 800d888:	bd70      	pop	{r4, r5, r6, pc}
 800d88a:	1cc4      	adds	r4, r0, #3
 800d88c:	f024 0403 	bic.w	r4, r4, #3
 800d890:	42a0      	cmp	r0, r4
 800d892:	d0f8      	beq.n	800d886 <sbrk_aligned+0x22>
 800d894:	1a21      	subs	r1, r4, r0
 800d896:	4628      	mov	r0, r5
 800d898:	f001 f80a 	bl	800e8b0 <_sbrk_r>
 800d89c:	3001      	adds	r0, #1
 800d89e:	d1f2      	bne.n	800d886 <sbrk_aligned+0x22>
 800d8a0:	e7ef      	b.n	800d882 <sbrk_aligned+0x1e>
 800d8a2:	bf00      	nop
 800d8a4:	2000143c 	.word	0x2000143c

0800d8a8 <_malloc_r>:
 800d8a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8ac:	1ccd      	adds	r5, r1, #3
 800d8ae:	f025 0503 	bic.w	r5, r5, #3
 800d8b2:	3508      	adds	r5, #8
 800d8b4:	2d0c      	cmp	r5, #12
 800d8b6:	bf38      	it	cc
 800d8b8:	250c      	movcc	r5, #12
 800d8ba:	2d00      	cmp	r5, #0
 800d8bc:	4606      	mov	r6, r0
 800d8be:	db01      	blt.n	800d8c4 <_malloc_r+0x1c>
 800d8c0:	42a9      	cmp	r1, r5
 800d8c2:	d904      	bls.n	800d8ce <_malloc_r+0x26>
 800d8c4:	230c      	movs	r3, #12
 800d8c6:	6033      	str	r3, [r6, #0]
 800d8c8:	2000      	movs	r0, #0
 800d8ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d9a4 <_malloc_r+0xfc>
 800d8d2:	f000 f869 	bl	800d9a8 <__malloc_lock>
 800d8d6:	f8d8 3000 	ldr.w	r3, [r8]
 800d8da:	461c      	mov	r4, r3
 800d8dc:	bb44      	cbnz	r4, 800d930 <_malloc_r+0x88>
 800d8de:	4629      	mov	r1, r5
 800d8e0:	4630      	mov	r0, r6
 800d8e2:	f7ff ffbf 	bl	800d864 <sbrk_aligned>
 800d8e6:	1c43      	adds	r3, r0, #1
 800d8e8:	4604      	mov	r4, r0
 800d8ea:	d158      	bne.n	800d99e <_malloc_r+0xf6>
 800d8ec:	f8d8 4000 	ldr.w	r4, [r8]
 800d8f0:	4627      	mov	r7, r4
 800d8f2:	2f00      	cmp	r7, #0
 800d8f4:	d143      	bne.n	800d97e <_malloc_r+0xd6>
 800d8f6:	2c00      	cmp	r4, #0
 800d8f8:	d04b      	beq.n	800d992 <_malloc_r+0xea>
 800d8fa:	6823      	ldr	r3, [r4, #0]
 800d8fc:	4639      	mov	r1, r7
 800d8fe:	4630      	mov	r0, r6
 800d900:	eb04 0903 	add.w	r9, r4, r3
 800d904:	f000 ffd4 	bl	800e8b0 <_sbrk_r>
 800d908:	4581      	cmp	r9, r0
 800d90a:	d142      	bne.n	800d992 <_malloc_r+0xea>
 800d90c:	6821      	ldr	r1, [r4, #0]
 800d90e:	1a6d      	subs	r5, r5, r1
 800d910:	4629      	mov	r1, r5
 800d912:	4630      	mov	r0, r6
 800d914:	f7ff ffa6 	bl	800d864 <sbrk_aligned>
 800d918:	3001      	adds	r0, #1
 800d91a:	d03a      	beq.n	800d992 <_malloc_r+0xea>
 800d91c:	6823      	ldr	r3, [r4, #0]
 800d91e:	442b      	add	r3, r5
 800d920:	6023      	str	r3, [r4, #0]
 800d922:	f8d8 3000 	ldr.w	r3, [r8]
 800d926:	685a      	ldr	r2, [r3, #4]
 800d928:	bb62      	cbnz	r2, 800d984 <_malloc_r+0xdc>
 800d92a:	f8c8 7000 	str.w	r7, [r8]
 800d92e:	e00f      	b.n	800d950 <_malloc_r+0xa8>
 800d930:	6822      	ldr	r2, [r4, #0]
 800d932:	1b52      	subs	r2, r2, r5
 800d934:	d420      	bmi.n	800d978 <_malloc_r+0xd0>
 800d936:	2a0b      	cmp	r2, #11
 800d938:	d917      	bls.n	800d96a <_malloc_r+0xc2>
 800d93a:	1961      	adds	r1, r4, r5
 800d93c:	42a3      	cmp	r3, r4
 800d93e:	6025      	str	r5, [r4, #0]
 800d940:	bf18      	it	ne
 800d942:	6059      	strne	r1, [r3, #4]
 800d944:	6863      	ldr	r3, [r4, #4]
 800d946:	bf08      	it	eq
 800d948:	f8c8 1000 	streq.w	r1, [r8]
 800d94c:	5162      	str	r2, [r4, r5]
 800d94e:	604b      	str	r3, [r1, #4]
 800d950:	4630      	mov	r0, r6
 800d952:	f000 f82f 	bl	800d9b4 <__malloc_unlock>
 800d956:	f104 000b 	add.w	r0, r4, #11
 800d95a:	1d23      	adds	r3, r4, #4
 800d95c:	f020 0007 	bic.w	r0, r0, #7
 800d960:	1ac2      	subs	r2, r0, r3
 800d962:	bf1c      	itt	ne
 800d964:	1a1b      	subne	r3, r3, r0
 800d966:	50a3      	strne	r3, [r4, r2]
 800d968:	e7af      	b.n	800d8ca <_malloc_r+0x22>
 800d96a:	6862      	ldr	r2, [r4, #4]
 800d96c:	42a3      	cmp	r3, r4
 800d96e:	bf0c      	ite	eq
 800d970:	f8c8 2000 	streq.w	r2, [r8]
 800d974:	605a      	strne	r2, [r3, #4]
 800d976:	e7eb      	b.n	800d950 <_malloc_r+0xa8>
 800d978:	4623      	mov	r3, r4
 800d97a:	6864      	ldr	r4, [r4, #4]
 800d97c:	e7ae      	b.n	800d8dc <_malloc_r+0x34>
 800d97e:	463c      	mov	r4, r7
 800d980:	687f      	ldr	r7, [r7, #4]
 800d982:	e7b6      	b.n	800d8f2 <_malloc_r+0x4a>
 800d984:	461a      	mov	r2, r3
 800d986:	685b      	ldr	r3, [r3, #4]
 800d988:	42a3      	cmp	r3, r4
 800d98a:	d1fb      	bne.n	800d984 <_malloc_r+0xdc>
 800d98c:	2300      	movs	r3, #0
 800d98e:	6053      	str	r3, [r2, #4]
 800d990:	e7de      	b.n	800d950 <_malloc_r+0xa8>
 800d992:	230c      	movs	r3, #12
 800d994:	6033      	str	r3, [r6, #0]
 800d996:	4630      	mov	r0, r6
 800d998:	f000 f80c 	bl	800d9b4 <__malloc_unlock>
 800d99c:	e794      	b.n	800d8c8 <_malloc_r+0x20>
 800d99e:	6005      	str	r5, [r0, #0]
 800d9a0:	e7d6      	b.n	800d950 <_malloc_r+0xa8>
 800d9a2:	bf00      	nop
 800d9a4:	20001440 	.word	0x20001440

0800d9a8 <__malloc_lock>:
 800d9a8:	4801      	ldr	r0, [pc, #4]	@ (800d9b0 <__malloc_lock+0x8>)
 800d9aa:	f7ff b88c 	b.w	800cac6 <__retarget_lock_acquire_recursive>
 800d9ae:	bf00      	nop
 800d9b0:	20001438 	.word	0x20001438

0800d9b4 <__malloc_unlock>:
 800d9b4:	4801      	ldr	r0, [pc, #4]	@ (800d9bc <__malloc_unlock+0x8>)
 800d9b6:	f7ff b887 	b.w	800cac8 <__retarget_lock_release_recursive>
 800d9ba:	bf00      	nop
 800d9bc:	20001438 	.word	0x20001438

0800d9c0 <_Balloc>:
 800d9c0:	b570      	push	{r4, r5, r6, lr}
 800d9c2:	69c6      	ldr	r6, [r0, #28]
 800d9c4:	4604      	mov	r4, r0
 800d9c6:	460d      	mov	r5, r1
 800d9c8:	b976      	cbnz	r6, 800d9e8 <_Balloc+0x28>
 800d9ca:	2010      	movs	r0, #16
 800d9cc:	f7ff ff42 	bl	800d854 <malloc>
 800d9d0:	4602      	mov	r2, r0
 800d9d2:	61e0      	str	r0, [r4, #28]
 800d9d4:	b920      	cbnz	r0, 800d9e0 <_Balloc+0x20>
 800d9d6:	4b18      	ldr	r3, [pc, #96]	@ (800da38 <_Balloc+0x78>)
 800d9d8:	4818      	ldr	r0, [pc, #96]	@ (800da3c <_Balloc+0x7c>)
 800d9da:	216b      	movs	r1, #107	@ 0x6b
 800d9dc:	f7ff f884 	bl	800cae8 <__assert_func>
 800d9e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d9e4:	6006      	str	r6, [r0, #0]
 800d9e6:	60c6      	str	r6, [r0, #12]
 800d9e8:	69e6      	ldr	r6, [r4, #28]
 800d9ea:	68f3      	ldr	r3, [r6, #12]
 800d9ec:	b183      	cbz	r3, 800da10 <_Balloc+0x50>
 800d9ee:	69e3      	ldr	r3, [r4, #28]
 800d9f0:	68db      	ldr	r3, [r3, #12]
 800d9f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d9f6:	b9b8      	cbnz	r0, 800da28 <_Balloc+0x68>
 800d9f8:	2101      	movs	r1, #1
 800d9fa:	fa01 f605 	lsl.w	r6, r1, r5
 800d9fe:	1d72      	adds	r2, r6, #5
 800da00:	0092      	lsls	r2, r2, #2
 800da02:	4620      	mov	r0, r4
 800da04:	f000 ff6b 	bl	800e8de <_calloc_r>
 800da08:	b160      	cbz	r0, 800da24 <_Balloc+0x64>
 800da0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800da0e:	e00e      	b.n	800da2e <_Balloc+0x6e>
 800da10:	2221      	movs	r2, #33	@ 0x21
 800da12:	2104      	movs	r1, #4
 800da14:	4620      	mov	r0, r4
 800da16:	f000 ff62 	bl	800e8de <_calloc_r>
 800da1a:	69e3      	ldr	r3, [r4, #28]
 800da1c:	60f0      	str	r0, [r6, #12]
 800da1e:	68db      	ldr	r3, [r3, #12]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d1e4      	bne.n	800d9ee <_Balloc+0x2e>
 800da24:	2000      	movs	r0, #0
 800da26:	bd70      	pop	{r4, r5, r6, pc}
 800da28:	6802      	ldr	r2, [r0, #0]
 800da2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800da2e:	2300      	movs	r3, #0
 800da30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800da34:	e7f7      	b.n	800da26 <_Balloc+0x66>
 800da36:	bf00      	nop
 800da38:	08012a3d 	.word	0x08012a3d
 800da3c:	08012b60 	.word	0x08012b60

0800da40 <_Bfree>:
 800da40:	b570      	push	{r4, r5, r6, lr}
 800da42:	69c6      	ldr	r6, [r0, #28]
 800da44:	4605      	mov	r5, r0
 800da46:	460c      	mov	r4, r1
 800da48:	b976      	cbnz	r6, 800da68 <_Bfree+0x28>
 800da4a:	2010      	movs	r0, #16
 800da4c:	f7ff ff02 	bl	800d854 <malloc>
 800da50:	4602      	mov	r2, r0
 800da52:	61e8      	str	r0, [r5, #28]
 800da54:	b920      	cbnz	r0, 800da60 <_Bfree+0x20>
 800da56:	4b09      	ldr	r3, [pc, #36]	@ (800da7c <_Bfree+0x3c>)
 800da58:	4809      	ldr	r0, [pc, #36]	@ (800da80 <_Bfree+0x40>)
 800da5a:	218f      	movs	r1, #143	@ 0x8f
 800da5c:	f7ff f844 	bl	800cae8 <__assert_func>
 800da60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da64:	6006      	str	r6, [r0, #0]
 800da66:	60c6      	str	r6, [r0, #12]
 800da68:	b13c      	cbz	r4, 800da7a <_Bfree+0x3a>
 800da6a:	69eb      	ldr	r3, [r5, #28]
 800da6c:	6862      	ldr	r2, [r4, #4]
 800da6e:	68db      	ldr	r3, [r3, #12]
 800da70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800da74:	6021      	str	r1, [r4, #0]
 800da76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800da7a:	bd70      	pop	{r4, r5, r6, pc}
 800da7c:	08012a3d 	.word	0x08012a3d
 800da80:	08012b60 	.word	0x08012b60

0800da84 <__multadd>:
 800da84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da88:	690d      	ldr	r5, [r1, #16]
 800da8a:	4607      	mov	r7, r0
 800da8c:	460c      	mov	r4, r1
 800da8e:	461e      	mov	r6, r3
 800da90:	f101 0c14 	add.w	ip, r1, #20
 800da94:	2000      	movs	r0, #0
 800da96:	f8dc 3000 	ldr.w	r3, [ip]
 800da9a:	b299      	uxth	r1, r3
 800da9c:	fb02 6101 	mla	r1, r2, r1, r6
 800daa0:	0c1e      	lsrs	r6, r3, #16
 800daa2:	0c0b      	lsrs	r3, r1, #16
 800daa4:	fb02 3306 	mla	r3, r2, r6, r3
 800daa8:	b289      	uxth	r1, r1
 800daaa:	3001      	adds	r0, #1
 800daac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dab0:	4285      	cmp	r5, r0
 800dab2:	f84c 1b04 	str.w	r1, [ip], #4
 800dab6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800daba:	dcec      	bgt.n	800da96 <__multadd+0x12>
 800dabc:	b30e      	cbz	r6, 800db02 <__multadd+0x7e>
 800dabe:	68a3      	ldr	r3, [r4, #8]
 800dac0:	42ab      	cmp	r3, r5
 800dac2:	dc19      	bgt.n	800daf8 <__multadd+0x74>
 800dac4:	6861      	ldr	r1, [r4, #4]
 800dac6:	4638      	mov	r0, r7
 800dac8:	3101      	adds	r1, #1
 800daca:	f7ff ff79 	bl	800d9c0 <_Balloc>
 800dace:	4680      	mov	r8, r0
 800dad0:	b928      	cbnz	r0, 800dade <__multadd+0x5a>
 800dad2:	4602      	mov	r2, r0
 800dad4:	4b0c      	ldr	r3, [pc, #48]	@ (800db08 <__multadd+0x84>)
 800dad6:	480d      	ldr	r0, [pc, #52]	@ (800db0c <__multadd+0x88>)
 800dad8:	21ba      	movs	r1, #186	@ 0xba
 800dada:	f7ff f805 	bl	800cae8 <__assert_func>
 800dade:	6922      	ldr	r2, [r4, #16]
 800dae0:	3202      	adds	r2, #2
 800dae2:	f104 010c 	add.w	r1, r4, #12
 800dae6:	0092      	lsls	r2, r2, #2
 800dae8:	300c      	adds	r0, #12
 800daea:	f7fe ffee 	bl	800caca <memcpy>
 800daee:	4621      	mov	r1, r4
 800daf0:	4638      	mov	r0, r7
 800daf2:	f7ff ffa5 	bl	800da40 <_Bfree>
 800daf6:	4644      	mov	r4, r8
 800daf8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dafc:	3501      	adds	r5, #1
 800dafe:	615e      	str	r6, [r3, #20]
 800db00:	6125      	str	r5, [r4, #16]
 800db02:	4620      	mov	r0, r4
 800db04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db08:	08012b4f 	.word	0x08012b4f
 800db0c:	08012b60 	.word	0x08012b60

0800db10 <__hi0bits>:
 800db10:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800db14:	4603      	mov	r3, r0
 800db16:	bf36      	itet	cc
 800db18:	0403      	lslcc	r3, r0, #16
 800db1a:	2000      	movcs	r0, #0
 800db1c:	2010      	movcc	r0, #16
 800db1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800db22:	bf3c      	itt	cc
 800db24:	021b      	lslcc	r3, r3, #8
 800db26:	3008      	addcc	r0, #8
 800db28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800db2c:	bf3c      	itt	cc
 800db2e:	011b      	lslcc	r3, r3, #4
 800db30:	3004      	addcc	r0, #4
 800db32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db36:	bf3c      	itt	cc
 800db38:	009b      	lslcc	r3, r3, #2
 800db3a:	3002      	addcc	r0, #2
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	db05      	blt.n	800db4c <__hi0bits+0x3c>
 800db40:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800db44:	f100 0001 	add.w	r0, r0, #1
 800db48:	bf08      	it	eq
 800db4a:	2020      	moveq	r0, #32
 800db4c:	4770      	bx	lr

0800db4e <__lo0bits>:
 800db4e:	6803      	ldr	r3, [r0, #0]
 800db50:	4602      	mov	r2, r0
 800db52:	f013 0007 	ands.w	r0, r3, #7
 800db56:	d00b      	beq.n	800db70 <__lo0bits+0x22>
 800db58:	07d9      	lsls	r1, r3, #31
 800db5a:	d421      	bmi.n	800dba0 <__lo0bits+0x52>
 800db5c:	0798      	lsls	r0, r3, #30
 800db5e:	bf49      	itett	mi
 800db60:	085b      	lsrmi	r3, r3, #1
 800db62:	089b      	lsrpl	r3, r3, #2
 800db64:	2001      	movmi	r0, #1
 800db66:	6013      	strmi	r3, [r2, #0]
 800db68:	bf5c      	itt	pl
 800db6a:	6013      	strpl	r3, [r2, #0]
 800db6c:	2002      	movpl	r0, #2
 800db6e:	4770      	bx	lr
 800db70:	b299      	uxth	r1, r3
 800db72:	b909      	cbnz	r1, 800db78 <__lo0bits+0x2a>
 800db74:	0c1b      	lsrs	r3, r3, #16
 800db76:	2010      	movs	r0, #16
 800db78:	b2d9      	uxtb	r1, r3
 800db7a:	b909      	cbnz	r1, 800db80 <__lo0bits+0x32>
 800db7c:	3008      	adds	r0, #8
 800db7e:	0a1b      	lsrs	r3, r3, #8
 800db80:	0719      	lsls	r1, r3, #28
 800db82:	bf04      	itt	eq
 800db84:	091b      	lsreq	r3, r3, #4
 800db86:	3004      	addeq	r0, #4
 800db88:	0799      	lsls	r1, r3, #30
 800db8a:	bf04      	itt	eq
 800db8c:	089b      	lsreq	r3, r3, #2
 800db8e:	3002      	addeq	r0, #2
 800db90:	07d9      	lsls	r1, r3, #31
 800db92:	d403      	bmi.n	800db9c <__lo0bits+0x4e>
 800db94:	085b      	lsrs	r3, r3, #1
 800db96:	f100 0001 	add.w	r0, r0, #1
 800db9a:	d003      	beq.n	800dba4 <__lo0bits+0x56>
 800db9c:	6013      	str	r3, [r2, #0]
 800db9e:	4770      	bx	lr
 800dba0:	2000      	movs	r0, #0
 800dba2:	4770      	bx	lr
 800dba4:	2020      	movs	r0, #32
 800dba6:	4770      	bx	lr

0800dba8 <__i2b>:
 800dba8:	b510      	push	{r4, lr}
 800dbaa:	460c      	mov	r4, r1
 800dbac:	2101      	movs	r1, #1
 800dbae:	f7ff ff07 	bl	800d9c0 <_Balloc>
 800dbb2:	4602      	mov	r2, r0
 800dbb4:	b928      	cbnz	r0, 800dbc2 <__i2b+0x1a>
 800dbb6:	4b05      	ldr	r3, [pc, #20]	@ (800dbcc <__i2b+0x24>)
 800dbb8:	4805      	ldr	r0, [pc, #20]	@ (800dbd0 <__i2b+0x28>)
 800dbba:	f240 1145 	movw	r1, #325	@ 0x145
 800dbbe:	f7fe ff93 	bl	800cae8 <__assert_func>
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	6144      	str	r4, [r0, #20]
 800dbc6:	6103      	str	r3, [r0, #16]
 800dbc8:	bd10      	pop	{r4, pc}
 800dbca:	bf00      	nop
 800dbcc:	08012b4f 	.word	0x08012b4f
 800dbd0:	08012b60 	.word	0x08012b60

0800dbd4 <__multiply>:
 800dbd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbd8:	4614      	mov	r4, r2
 800dbda:	690a      	ldr	r2, [r1, #16]
 800dbdc:	6923      	ldr	r3, [r4, #16]
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	bfa8      	it	ge
 800dbe2:	4623      	movge	r3, r4
 800dbe4:	460f      	mov	r7, r1
 800dbe6:	bfa4      	itt	ge
 800dbe8:	460c      	movge	r4, r1
 800dbea:	461f      	movge	r7, r3
 800dbec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800dbf0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800dbf4:	68a3      	ldr	r3, [r4, #8]
 800dbf6:	6861      	ldr	r1, [r4, #4]
 800dbf8:	eb0a 0609 	add.w	r6, sl, r9
 800dbfc:	42b3      	cmp	r3, r6
 800dbfe:	b085      	sub	sp, #20
 800dc00:	bfb8      	it	lt
 800dc02:	3101      	addlt	r1, #1
 800dc04:	f7ff fedc 	bl	800d9c0 <_Balloc>
 800dc08:	b930      	cbnz	r0, 800dc18 <__multiply+0x44>
 800dc0a:	4602      	mov	r2, r0
 800dc0c:	4b44      	ldr	r3, [pc, #272]	@ (800dd20 <__multiply+0x14c>)
 800dc0e:	4845      	ldr	r0, [pc, #276]	@ (800dd24 <__multiply+0x150>)
 800dc10:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800dc14:	f7fe ff68 	bl	800cae8 <__assert_func>
 800dc18:	f100 0514 	add.w	r5, r0, #20
 800dc1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dc20:	462b      	mov	r3, r5
 800dc22:	2200      	movs	r2, #0
 800dc24:	4543      	cmp	r3, r8
 800dc26:	d321      	bcc.n	800dc6c <__multiply+0x98>
 800dc28:	f107 0114 	add.w	r1, r7, #20
 800dc2c:	f104 0214 	add.w	r2, r4, #20
 800dc30:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800dc34:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800dc38:	9302      	str	r3, [sp, #8]
 800dc3a:	1b13      	subs	r3, r2, r4
 800dc3c:	3b15      	subs	r3, #21
 800dc3e:	f023 0303 	bic.w	r3, r3, #3
 800dc42:	3304      	adds	r3, #4
 800dc44:	f104 0715 	add.w	r7, r4, #21
 800dc48:	42ba      	cmp	r2, r7
 800dc4a:	bf38      	it	cc
 800dc4c:	2304      	movcc	r3, #4
 800dc4e:	9301      	str	r3, [sp, #4]
 800dc50:	9b02      	ldr	r3, [sp, #8]
 800dc52:	9103      	str	r1, [sp, #12]
 800dc54:	428b      	cmp	r3, r1
 800dc56:	d80c      	bhi.n	800dc72 <__multiply+0x9e>
 800dc58:	2e00      	cmp	r6, #0
 800dc5a:	dd03      	ble.n	800dc64 <__multiply+0x90>
 800dc5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d05b      	beq.n	800dd1c <__multiply+0x148>
 800dc64:	6106      	str	r6, [r0, #16]
 800dc66:	b005      	add	sp, #20
 800dc68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc6c:	f843 2b04 	str.w	r2, [r3], #4
 800dc70:	e7d8      	b.n	800dc24 <__multiply+0x50>
 800dc72:	f8b1 a000 	ldrh.w	sl, [r1]
 800dc76:	f1ba 0f00 	cmp.w	sl, #0
 800dc7a:	d024      	beq.n	800dcc6 <__multiply+0xf2>
 800dc7c:	f104 0e14 	add.w	lr, r4, #20
 800dc80:	46a9      	mov	r9, r5
 800dc82:	f04f 0c00 	mov.w	ip, #0
 800dc86:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dc8a:	f8d9 3000 	ldr.w	r3, [r9]
 800dc8e:	fa1f fb87 	uxth.w	fp, r7
 800dc92:	b29b      	uxth	r3, r3
 800dc94:	fb0a 330b 	mla	r3, sl, fp, r3
 800dc98:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800dc9c:	f8d9 7000 	ldr.w	r7, [r9]
 800dca0:	4463      	add	r3, ip
 800dca2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dca6:	fb0a c70b 	mla	r7, sl, fp, ip
 800dcaa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800dcae:	b29b      	uxth	r3, r3
 800dcb0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dcb4:	4572      	cmp	r2, lr
 800dcb6:	f849 3b04 	str.w	r3, [r9], #4
 800dcba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dcbe:	d8e2      	bhi.n	800dc86 <__multiply+0xb2>
 800dcc0:	9b01      	ldr	r3, [sp, #4]
 800dcc2:	f845 c003 	str.w	ip, [r5, r3]
 800dcc6:	9b03      	ldr	r3, [sp, #12]
 800dcc8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800dccc:	3104      	adds	r1, #4
 800dcce:	f1b9 0f00 	cmp.w	r9, #0
 800dcd2:	d021      	beq.n	800dd18 <__multiply+0x144>
 800dcd4:	682b      	ldr	r3, [r5, #0]
 800dcd6:	f104 0c14 	add.w	ip, r4, #20
 800dcda:	46ae      	mov	lr, r5
 800dcdc:	f04f 0a00 	mov.w	sl, #0
 800dce0:	f8bc b000 	ldrh.w	fp, [ip]
 800dce4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800dce8:	fb09 770b 	mla	r7, r9, fp, r7
 800dcec:	4457      	add	r7, sl
 800dcee:	b29b      	uxth	r3, r3
 800dcf0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dcf4:	f84e 3b04 	str.w	r3, [lr], #4
 800dcf8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dcfc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dd00:	f8be 3000 	ldrh.w	r3, [lr]
 800dd04:	fb09 330a 	mla	r3, r9, sl, r3
 800dd08:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800dd0c:	4562      	cmp	r2, ip
 800dd0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dd12:	d8e5      	bhi.n	800dce0 <__multiply+0x10c>
 800dd14:	9f01      	ldr	r7, [sp, #4]
 800dd16:	51eb      	str	r3, [r5, r7]
 800dd18:	3504      	adds	r5, #4
 800dd1a:	e799      	b.n	800dc50 <__multiply+0x7c>
 800dd1c:	3e01      	subs	r6, #1
 800dd1e:	e79b      	b.n	800dc58 <__multiply+0x84>
 800dd20:	08012b4f 	.word	0x08012b4f
 800dd24:	08012b60 	.word	0x08012b60

0800dd28 <__pow5mult>:
 800dd28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd2c:	4615      	mov	r5, r2
 800dd2e:	f012 0203 	ands.w	r2, r2, #3
 800dd32:	4607      	mov	r7, r0
 800dd34:	460e      	mov	r6, r1
 800dd36:	d007      	beq.n	800dd48 <__pow5mult+0x20>
 800dd38:	4c25      	ldr	r4, [pc, #148]	@ (800ddd0 <__pow5mult+0xa8>)
 800dd3a:	3a01      	subs	r2, #1
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dd42:	f7ff fe9f 	bl	800da84 <__multadd>
 800dd46:	4606      	mov	r6, r0
 800dd48:	10ad      	asrs	r5, r5, #2
 800dd4a:	d03d      	beq.n	800ddc8 <__pow5mult+0xa0>
 800dd4c:	69fc      	ldr	r4, [r7, #28]
 800dd4e:	b97c      	cbnz	r4, 800dd70 <__pow5mult+0x48>
 800dd50:	2010      	movs	r0, #16
 800dd52:	f7ff fd7f 	bl	800d854 <malloc>
 800dd56:	4602      	mov	r2, r0
 800dd58:	61f8      	str	r0, [r7, #28]
 800dd5a:	b928      	cbnz	r0, 800dd68 <__pow5mult+0x40>
 800dd5c:	4b1d      	ldr	r3, [pc, #116]	@ (800ddd4 <__pow5mult+0xac>)
 800dd5e:	481e      	ldr	r0, [pc, #120]	@ (800ddd8 <__pow5mult+0xb0>)
 800dd60:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dd64:	f7fe fec0 	bl	800cae8 <__assert_func>
 800dd68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dd6c:	6004      	str	r4, [r0, #0]
 800dd6e:	60c4      	str	r4, [r0, #12]
 800dd70:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800dd74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dd78:	b94c      	cbnz	r4, 800dd8e <__pow5mult+0x66>
 800dd7a:	f240 2171 	movw	r1, #625	@ 0x271
 800dd7e:	4638      	mov	r0, r7
 800dd80:	f7ff ff12 	bl	800dba8 <__i2b>
 800dd84:	2300      	movs	r3, #0
 800dd86:	f8c8 0008 	str.w	r0, [r8, #8]
 800dd8a:	4604      	mov	r4, r0
 800dd8c:	6003      	str	r3, [r0, #0]
 800dd8e:	f04f 0900 	mov.w	r9, #0
 800dd92:	07eb      	lsls	r3, r5, #31
 800dd94:	d50a      	bpl.n	800ddac <__pow5mult+0x84>
 800dd96:	4631      	mov	r1, r6
 800dd98:	4622      	mov	r2, r4
 800dd9a:	4638      	mov	r0, r7
 800dd9c:	f7ff ff1a 	bl	800dbd4 <__multiply>
 800dda0:	4631      	mov	r1, r6
 800dda2:	4680      	mov	r8, r0
 800dda4:	4638      	mov	r0, r7
 800dda6:	f7ff fe4b 	bl	800da40 <_Bfree>
 800ddaa:	4646      	mov	r6, r8
 800ddac:	106d      	asrs	r5, r5, #1
 800ddae:	d00b      	beq.n	800ddc8 <__pow5mult+0xa0>
 800ddb0:	6820      	ldr	r0, [r4, #0]
 800ddb2:	b938      	cbnz	r0, 800ddc4 <__pow5mult+0x9c>
 800ddb4:	4622      	mov	r2, r4
 800ddb6:	4621      	mov	r1, r4
 800ddb8:	4638      	mov	r0, r7
 800ddba:	f7ff ff0b 	bl	800dbd4 <__multiply>
 800ddbe:	6020      	str	r0, [r4, #0]
 800ddc0:	f8c0 9000 	str.w	r9, [r0]
 800ddc4:	4604      	mov	r4, r0
 800ddc6:	e7e4      	b.n	800dd92 <__pow5mult+0x6a>
 800ddc8:	4630      	mov	r0, r6
 800ddca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddce:	bf00      	nop
 800ddd0:	08012bbc 	.word	0x08012bbc
 800ddd4:	08012a3d 	.word	0x08012a3d
 800ddd8:	08012b60 	.word	0x08012b60

0800dddc <__lshift>:
 800dddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dde0:	460c      	mov	r4, r1
 800dde2:	6849      	ldr	r1, [r1, #4]
 800dde4:	6923      	ldr	r3, [r4, #16]
 800dde6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ddea:	68a3      	ldr	r3, [r4, #8]
 800ddec:	4607      	mov	r7, r0
 800ddee:	4691      	mov	r9, r2
 800ddf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ddf4:	f108 0601 	add.w	r6, r8, #1
 800ddf8:	42b3      	cmp	r3, r6
 800ddfa:	db0b      	blt.n	800de14 <__lshift+0x38>
 800ddfc:	4638      	mov	r0, r7
 800ddfe:	f7ff fddf 	bl	800d9c0 <_Balloc>
 800de02:	4605      	mov	r5, r0
 800de04:	b948      	cbnz	r0, 800de1a <__lshift+0x3e>
 800de06:	4602      	mov	r2, r0
 800de08:	4b28      	ldr	r3, [pc, #160]	@ (800deac <__lshift+0xd0>)
 800de0a:	4829      	ldr	r0, [pc, #164]	@ (800deb0 <__lshift+0xd4>)
 800de0c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800de10:	f7fe fe6a 	bl	800cae8 <__assert_func>
 800de14:	3101      	adds	r1, #1
 800de16:	005b      	lsls	r3, r3, #1
 800de18:	e7ee      	b.n	800ddf8 <__lshift+0x1c>
 800de1a:	2300      	movs	r3, #0
 800de1c:	f100 0114 	add.w	r1, r0, #20
 800de20:	f100 0210 	add.w	r2, r0, #16
 800de24:	4618      	mov	r0, r3
 800de26:	4553      	cmp	r3, sl
 800de28:	db33      	blt.n	800de92 <__lshift+0xb6>
 800de2a:	6920      	ldr	r0, [r4, #16]
 800de2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800de30:	f104 0314 	add.w	r3, r4, #20
 800de34:	f019 091f 	ands.w	r9, r9, #31
 800de38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800de3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800de40:	d02b      	beq.n	800de9a <__lshift+0xbe>
 800de42:	f1c9 0e20 	rsb	lr, r9, #32
 800de46:	468a      	mov	sl, r1
 800de48:	2200      	movs	r2, #0
 800de4a:	6818      	ldr	r0, [r3, #0]
 800de4c:	fa00 f009 	lsl.w	r0, r0, r9
 800de50:	4310      	orrs	r0, r2
 800de52:	f84a 0b04 	str.w	r0, [sl], #4
 800de56:	f853 2b04 	ldr.w	r2, [r3], #4
 800de5a:	459c      	cmp	ip, r3
 800de5c:	fa22 f20e 	lsr.w	r2, r2, lr
 800de60:	d8f3      	bhi.n	800de4a <__lshift+0x6e>
 800de62:	ebac 0304 	sub.w	r3, ip, r4
 800de66:	3b15      	subs	r3, #21
 800de68:	f023 0303 	bic.w	r3, r3, #3
 800de6c:	3304      	adds	r3, #4
 800de6e:	f104 0015 	add.w	r0, r4, #21
 800de72:	4584      	cmp	ip, r0
 800de74:	bf38      	it	cc
 800de76:	2304      	movcc	r3, #4
 800de78:	50ca      	str	r2, [r1, r3]
 800de7a:	b10a      	cbz	r2, 800de80 <__lshift+0xa4>
 800de7c:	f108 0602 	add.w	r6, r8, #2
 800de80:	3e01      	subs	r6, #1
 800de82:	4638      	mov	r0, r7
 800de84:	612e      	str	r6, [r5, #16]
 800de86:	4621      	mov	r1, r4
 800de88:	f7ff fdda 	bl	800da40 <_Bfree>
 800de8c:	4628      	mov	r0, r5
 800de8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de92:	f842 0f04 	str.w	r0, [r2, #4]!
 800de96:	3301      	adds	r3, #1
 800de98:	e7c5      	b.n	800de26 <__lshift+0x4a>
 800de9a:	3904      	subs	r1, #4
 800de9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800dea0:	f841 2f04 	str.w	r2, [r1, #4]!
 800dea4:	459c      	cmp	ip, r3
 800dea6:	d8f9      	bhi.n	800de9c <__lshift+0xc0>
 800dea8:	e7ea      	b.n	800de80 <__lshift+0xa4>
 800deaa:	bf00      	nop
 800deac:	08012b4f 	.word	0x08012b4f
 800deb0:	08012b60 	.word	0x08012b60

0800deb4 <__mcmp>:
 800deb4:	690a      	ldr	r2, [r1, #16]
 800deb6:	4603      	mov	r3, r0
 800deb8:	6900      	ldr	r0, [r0, #16]
 800deba:	1a80      	subs	r0, r0, r2
 800debc:	b530      	push	{r4, r5, lr}
 800debe:	d10e      	bne.n	800dede <__mcmp+0x2a>
 800dec0:	3314      	adds	r3, #20
 800dec2:	3114      	adds	r1, #20
 800dec4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dec8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800decc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ded0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ded4:	4295      	cmp	r5, r2
 800ded6:	d003      	beq.n	800dee0 <__mcmp+0x2c>
 800ded8:	d205      	bcs.n	800dee6 <__mcmp+0x32>
 800deda:	f04f 30ff 	mov.w	r0, #4294967295
 800dede:	bd30      	pop	{r4, r5, pc}
 800dee0:	42a3      	cmp	r3, r4
 800dee2:	d3f3      	bcc.n	800decc <__mcmp+0x18>
 800dee4:	e7fb      	b.n	800dede <__mcmp+0x2a>
 800dee6:	2001      	movs	r0, #1
 800dee8:	e7f9      	b.n	800dede <__mcmp+0x2a>
	...

0800deec <__mdiff>:
 800deec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800def0:	4689      	mov	r9, r1
 800def2:	4606      	mov	r6, r0
 800def4:	4611      	mov	r1, r2
 800def6:	4648      	mov	r0, r9
 800def8:	4614      	mov	r4, r2
 800defa:	f7ff ffdb 	bl	800deb4 <__mcmp>
 800defe:	1e05      	subs	r5, r0, #0
 800df00:	d112      	bne.n	800df28 <__mdiff+0x3c>
 800df02:	4629      	mov	r1, r5
 800df04:	4630      	mov	r0, r6
 800df06:	f7ff fd5b 	bl	800d9c0 <_Balloc>
 800df0a:	4602      	mov	r2, r0
 800df0c:	b928      	cbnz	r0, 800df1a <__mdiff+0x2e>
 800df0e:	4b3f      	ldr	r3, [pc, #252]	@ (800e00c <__mdiff+0x120>)
 800df10:	f240 2137 	movw	r1, #567	@ 0x237
 800df14:	483e      	ldr	r0, [pc, #248]	@ (800e010 <__mdiff+0x124>)
 800df16:	f7fe fde7 	bl	800cae8 <__assert_func>
 800df1a:	2301      	movs	r3, #1
 800df1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800df20:	4610      	mov	r0, r2
 800df22:	b003      	add	sp, #12
 800df24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df28:	bfbc      	itt	lt
 800df2a:	464b      	movlt	r3, r9
 800df2c:	46a1      	movlt	r9, r4
 800df2e:	4630      	mov	r0, r6
 800df30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800df34:	bfba      	itte	lt
 800df36:	461c      	movlt	r4, r3
 800df38:	2501      	movlt	r5, #1
 800df3a:	2500      	movge	r5, #0
 800df3c:	f7ff fd40 	bl	800d9c0 <_Balloc>
 800df40:	4602      	mov	r2, r0
 800df42:	b918      	cbnz	r0, 800df4c <__mdiff+0x60>
 800df44:	4b31      	ldr	r3, [pc, #196]	@ (800e00c <__mdiff+0x120>)
 800df46:	f240 2145 	movw	r1, #581	@ 0x245
 800df4a:	e7e3      	b.n	800df14 <__mdiff+0x28>
 800df4c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800df50:	6926      	ldr	r6, [r4, #16]
 800df52:	60c5      	str	r5, [r0, #12]
 800df54:	f109 0310 	add.w	r3, r9, #16
 800df58:	f109 0514 	add.w	r5, r9, #20
 800df5c:	f104 0e14 	add.w	lr, r4, #20
 800df60:	f100 0b14 	add.w	fp, r0, #20
 800df64:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800df68:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800df6c:	9301      	str	r3, [sp, #4]
 800df6e:	46d9      	mov	r9, fp
 800df70:	f04f 0c00 	mov.w	ip, #0
 800df74:	9b01      	ldr	r3, [sp, #4]
 800df76:	f85e 0b04 	ldr.w	r0, [lr], #4
 800df7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800df7e:	9301      	str	r3, [sp, #4]
 800df80:	fa1f f38a 	uxth.w	r3, sl
 800df84:	4619      	mov	r1, r3
 800df86:	b283      	uxth	r3, r0
 800df88:	1acb      	subs	r3, r1, r3
 800df8a:	0c00      	lsrs	r0, r0, #16
 800df8c:	4463      	add	r3, ip
 800df8e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800df92:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800df96:	b29b      	uxth	r3, r3
 800df98:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800df9c:	4576      	cmp	r6, lr
 800df9e:	f849 3b04 	str.w	r3, [r9], #4
 800dfa2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dfa6:	d8e5      	bhi.n	800df74 <__mdiff+0x88>
 800dfa8:	1b33      	subs	r3, r6, r4
 800dfaa:	3b15      	subs	r3, #21
 800dfac:	f023 0303 	bic.w	r3, r3, #3
 800dfb0:	3415      	adds	r4, #21
 800dfb2:	3304      	adds	r3, #4
 800dfb4:	42a6      	cmp	r6, r4
 800dfb6:	bf38      	it	cc
 800dfb8:	2304      	movcc	r3, #4
 800dfba:	441d      	add	r5, r3
 800dfbc:	445b      	add	r3, fp
 800dfbe:	461e      	mov	r6, r3
 800dfc0:	462c      	mov	r4, r5
 800dfc2:	4544      	cmp	r4, r8
 800dfc4:	d30e      	bcc.n	800dfe4 <__mdiff+0xf8>
 800dfc6:	f108 0103 	add.w	r1, r8, #3
 800dfca:	1b49      	subs	r1, r1, r5
 800dfcc:	f021 0103 	bic.w	r1, r1, #3
 800dfd0:	3d03      	subs	r5, #3
 800dfd2:	45a8      	cmp	r8, r5
 800dfd4:	bf38      	it	cc
 800dfd6:	2100      	movcc	r1, #0
 800dfd8:	440b      	add	r3, r1
 800dfda:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dfde:	b191      	cbz	r1, 800e006 <__mdiff+0x11a>
 800dfe0:	6117      	str	r7, [r2, #16]
 800dfe2:	e79d      	b.n	800df20 <__mdiff+0x34>
 800dfe4:	f854 1b04 	ldr.w	r1, [r4], #4
 800dfe8:	46e6      	mov	lr, ip
 800dfea:	0c08      	lsrs	r0, r1, #16
 800dfec:	fa1c fc81 	uxtah	ip, ip, r1
 800dff0:	4471      	add	r1, lr
 800dff2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dff6:	b289      	uxth	r1, r1
 800dff8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dffc:	f846 1b04 	str.w	r1, [r6], #4
 800e000:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e004:	e7dd      	b.n	800dfc2 <__mdiff+0xd6>
 800e006:	3f01      	subs	r7, #1
 800e008:	e7e7      	b.n	800dfda <__mdiff+0xee>
 800e00a:	bf00      	nop
 800e00c:	08012b4f 	.word	0x08012b4f
 800e010:	08012b60 	.word	0x08012b60

0800e014 <__d2b>:
 800e014:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e018:	460f      	mov	r7, r1
 800e01a:	2101      	movs	r1, #1
 800e01c:	ec59 8b10 	vmov	r8, r9, d0
 800e020:	4616      	mov	r6, r2
 800e022:	f7ff fccd 	bl	800d9c0 <_Balloc>
 800e026:	4604      	mov	r4, r0
 800e028:	b930      	cbnz	r0, 800e038 <__d2b+0x24>
 800e02a:	4602      	mov	r2, r0
 800e02c:	4b23      	ldr	r3, [pc, #140]	@ (800e0bc <__d2b+0xa8>)
 800e02e:	4824      	ldr	r0, [pc, #144]	@ (800e0c0 <__d2b+0xac>)
 800e030:	f240 310f 	movw	r1, #783	@ 0x30f
 800e034:	f7fe fd58 	bl	800cae8 <__assert_func>
 800e038:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e03c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e040:	b10d      	cbz	r5, 800e046 <__d2b+0x32>
 800e042:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e046:	9301      	str	r3, [sp, #4]
 800e048:	f1b8 0300 	subs.w	r3, r8, #0
 800e04c:	d023      	beq.n	800e096 <__d2b+0x82>
 800e04e:	4668      	mov	r0, sp
 800e050:	9300      	str	r3, [sp, #0]
 800e052:	f7ff fd7c 	bl	800db4e <__lo0bits>
 800e056:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e05a:	b1d0      	cbz	r0, 800e092 <__d2b+0x7e>
 800e05c:	f1c0 0320 	rsb	r3, r0, #32
 800e060:	fa02 f303 	lsl.w	r3, r2, r3
 800e064:	430b      	orrs	r3, r1
 800e066:	40c2      	lsrs	r2, r0
 800e068:	6163      	str	r3, [r4, #20]
 800e06a:	9201      	str	r2, [sp, #4]
 800e06c:	9b01      	ldr	r3, [sp, #4]
 800e06e:	61a3      	str	r3, [r4, #24]
 800e070:	2b00      	cmp	r3, #0
 800e072:	bf0c      	ite	eq
 800e074:	2201      	moveq	r2, #1
 800e076:	2202      	movne	r2, #2
 800e078:	6122      	str	r2, [r4, #16]
 800e07a:	b1a5      	cbz	r5, 800e0a6 <__d2b+0x92>
 800e07c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e080:	4405      	add	r5, r0
 800e082:	603d      	str	r5, [r7, #0]
 800e084:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e088:	6030      	str	r0, [r6, #0]
 800e08a:	4620      	mov	r0, r4
 800e08c:	b003      	add	sp, #12
 800e08e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e092:	6161      	str	r1, [r4, #20]
 800e094:	e7ea      	b.n	800e06c <__d2b+0x58>
 800e096:	a801      	add	r0, sp, #4
 800e098:	f7ff fd59 	bl	800db4e <__lo0bits>
 800e09c:	9b01      	ldr	r3, [sp, #4]
 800e09e:	6163      	str	r3, [r4, #20]
 800e0a0:	3020      	adds	r0, #32
 800e0a2:	2201      	movs	r2, #1
 800e0a4:	e7e8      	b.n	800e078 <__d2b+0x64>
 800e0a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e0aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e0ae:	6038      	str	r0, [r7, #0]
 800e0b0:	6918      	ldr	r0, [r3, #16]
 800e0b2:	f7ff fd2d 	bl	800db10 <__hi0bits>
 800e0b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e0ba:	e7e5      	b.n	800e088 <__d2b+0x74>
 800e0bc:	08012b4f 	.word	0x08012b4f
 800e0c0:	08012b60 	.word	0x08012b60

0800e0c4 <__ssputs_r>:
 800e0c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0c8:	688e      	ldr	r6, [r1, #8]
 800e0ca:	461f      	mov	r7, r3
 800e0cc:	42be      	cmp	r6, r7
 800e0ce:	680b      	ldr	r3, [r1, #0]
 800e0d0:	4682      	mov	sl, r0
 800e0d2:	460c      	mov	r4, r1
 800e0d4:	4690      	mov	r8, r2
 800e0d6:	d82d      	bhi.n	800e134 <__ssputs_r+0x70>
 800e0d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e0dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e0e0:	d026      	beq.n	800e130 <__ssputs_r+0x6c>
 800e0e2:	6965      	ldr	r5, [r4, #20]
 800e0e4:	6909      	ldr	r1, [r1, #16]
 800e0e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e0ea:	eba3 0901 	sub.w	r9, r3, r1
 800e0ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e0f2:	1c7b      	adds	r3, r7, #1
 800e0f4:	444b      	add	r3, r9
 800e0f6:	106d      	asrs	r5, r5, #1
 800e0f8:	429d      	cmp	r5, r3
 800e0fa:	bf38      	it	cc
 800e0fc:	461d      	movcc	r5, r3
 800e0fe:	0553      	lsls	r3, r2, #21
 800e100:	d527      	bpl.n	800e152 <__ssputs_r+0x8e>
 800e102:	4629      	mov	r1, r5
 800e104:	f7ff fbd0 	bl	800d8a8 <_malloc_r>
 800e108:	4606      	mov	r6, r0
 800e10a:	b360      	cbz	r0, 800e166 <__ssputs_r+0xa2>
 800e10c:	6921      	ldr	r1, [r4, #16]
 800e10e:	464a      	mov	r2, r9
 800e110:	f7fe fcdb 	bl	800caca <memcpy>
 800e114:	89a3      	ldrh	r3, [r4, #12]
 800e116:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e11a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e11e:	81a3      	strh	r3, [r4, #12]
 800e120:	6126      	str	r6, [r4, #16]
 800e122:	6165      	str	r5, [r4, #20]
 800e124:	444e      	add	r6, r9
 800e126:	eba5 0509 	sub.w	r5, r5, r9
 800e12a:	6026      	str	r6, [r4, #0]
 800e12c:	60a5      	str	r5, [r4, #8]
 800e12e:	463e      	mov	r6, r7
 800e130:	42be      	cmp	r6, r7
 800e132:	d900      	bls.n	800e136 <__ssputs_r+0x72>
 800e134:	463e      	mov	r6, r7
 800e136:	6820      	ldr	r0, [r4, #0]
 800e138:	4632      	mov	r2, r6
 800e13a:	4641      	mov	r1, r8
 800e13c:	f000 fb7c 	bl	800e838 <memmove>
 800e140:	68a3      	ldr	r3, [r4, #8]
 800e142:	1b9b      	subs	r3, r3, r6
 800e144:	60a3      	str	r3, [r4, #8]
 800e146:	6823      	ldr	r3, [r4, #0]
 800e148:	4433      	add	r3, r6
 800e14a:	6023      	str	r3, [r4, #0]
 800e14c:	2000      	movs	r0, #0
 800e14e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e152:	462a      	mov	r2, r5
 800e154:	f000 fbe9 	bl	800e92a <_realloc_r>
 800e158:	4606      	mov	r6, r0
 800e15a:	2800      	cmp	r0, #0
 800e15c:	d1e0      	bne.n	800e120 <__ssputs_r+0x5c>
 800e15e:	6921      	ldr	r1, [r4, #16]
 800e160:	4650      	mov	r0, sl
 800e162:	f7ff fb2d 	bl	800d7c0 <_free_r>
 800e166:	230c      	movs	r3, #12
 800e168:	f8ca 3000 	str.w	r3, [sl]
 800e16c:	89a3      	ldrh	r3, [r4, #12]
 800e16e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e172:	81a3      	strh	r3, [r4, #12]
 800e174:	f04f 30ff 	mov.w	r0, #4294967295
 800e178:	e7e9      	b.n	800e14e <__ssputs_r+0x8a>
	...

0800e17c <_svfiprintf_r>:
 800e17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e180:	4698      	mov	r8, r3
 800e182:	898b      	ldrh	r3, [r1, #12]
 800e184:	061b      	lsls	r3, r3, #24
 800e186:	b09d      	sub	sp, #116	@ 0x74
 800e188:	4607      	mov	r7, r0
 800e18a:	460d      	mov	r5, r1
 800e18c:	4614      	mov	r4, r2
 800e18e:	d510      	bpl.n	800e1b2 <_svfiprintf_r+0x36>
 800e190:	690b      	ldr	r3, [r1, #16]
 800e192:	b973      	cbnz	r3, 800e1b2 <_svfiprintf_r+0x36>
 800e194:	2140      	movs	r1, #64	@ 0x40
 800e196:	f7ff fb87 	bl	800d8a8 <_malloc_r>
 800e19a:	6028      	str	r0, [r5, #0]
 800e19c:	6128      	str	r0, [r5, #16]
 800e19e:	b930      	cbnz	r0, 800e1ae <_svfiprintf_r+0x32>
 800e1a0:	230c      	movs	r3, #12
 800e1a2:	603b      	str	r3, [r7, #0]
 800e1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e1a8:	b01d      	add	sp, #116	@ 0x74
 800e1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ae:	2340      	movs	r3, #64	@ 0x40
 800e1b0:	616b      	str	r3, [r5, #20]
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1b6:	2320      	movs	r3, #32
 800e1b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e1bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1c0:	2330      	movs	r3, #48	@ 0x30
 800e1c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e360 <_svfiprintf_r+0x1e4>
 800e1c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e1ca:	f04f 0901 	mov.w	r9, #1
 800e1ce:	4623      	mov	r3, r4
 800e1d0:	469a      	mov	sl, r3
 800e1d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1d6:	b10a      	cbz	r2, 800e1dc <_svfiprintf_r+0x60>
 800e1d8:	2a25      	cmp	r2, #37	@ 0x25
 800e1da:	d1f9      	bne.n	800e1d0 <_svfiprintf_r+0x54>
 800e1dc:	ebba 0b04 	subs.w	fp, sl, r4
 800e1e0:	d00b      	beq.n	800e1fa <_svfiprintf_r+0x7e>
 800e1e2:	465b      	mov	r3, fp
 800e1e4:	4622      	mov	r2, r4
 800e1e6:	4629      	mov	r1, r5
 800e1e8:	4638      	mov	r0, r7
 800e1ea:	f7ff ff6b 	bl	800e0c4 <__ssputs_r>
 800e1ee:	3001      	adds	r0, #1
 800e1f0:	f000 80a7 	beq.w	800e342 <_svfiprintf_r+0x1c6>
 800e1f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e1f6:	445a      	add	r2, fp
 800e1f8:	9209      	str	r2, [sp, #36]	@ 0x24
 800e1fa:	f89a 3000 	ldrb.w	r3, [sl]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	f000 809f 	beq.w	800e342 <_svfiprintf_r+0x1c6>
 800e204:	2300      	movs	r3, #0
 800e206:	f04f 32ff 	mov.w	r2, #4294967295
 800e20a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e20e:	f10a 0a01 	add.w	sl, sl, #1
 800e212:	9304      	str	r3, [sp, #16]
 800e214:	9307      	str	r3, [sp, #28]
 800e216:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e21a:	931a      	str	r3, [sp, #104]	@ 0x68
 800e21c:	4654      	mov	r4, sl
 800e21e:	2205      	movs	r2, #5
 800e220:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e224:	484e      	ldr	r0, [pc, #312]	@ (800e360 <_svfiprintf_r+0x1e4>)
 800e226:	f7f1 ffd3 	bl	80001d0 <memchr>
 800e22a:	9a04      	ldr	r2, [sp, #16]
 800e22c:	b9d8      	cbnz	r0, 800e266 <_svfiprintf_r+0xea>
 800e22e:	06d0      	lsls	r0, r2, #27
 800e230:	bf44      	itt	mi
 800e232:	2320      	movmi	r3, #32
 800e234:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e238:	0711      	lsls	r1, r2, #28
 800e23a:	bf44      	itt	mi
 800e23c:	232b      	movmi	r3, #43	@ 0x2b
 800e23e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e242:	f89a 3000 	ldrb.w	r3, [sl]
 800e246:	2b2a      	cmp	r3, #42	@ 0x2a
 800e248:	d015      	beq.n	800e276 <_svfiprintf_r+0xfa>
 800e24a:	9a07      	ldr	r2, [sp, #28]
 800e24c:	4654      	mov	r4, sl
 800e24e:	2000      	movs	r0, #0
 800e250:	f04f 0c0a 	mov.w	ip, #10
 800e254:	4621      	mov	r1, r4
 800e256:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e25a:	3b30      	subs	r3, #48	@ 0x30
 800e25c:	2b09      	cmp	r3, #9
 800e25e:	d94b      	bls.n	800e2f8 <_svfiprintf_r+0x17c>
 800e260:	b1b0      	cbz	r0, 800e290 <_svfiprintf_r+0x114>
 800e262:	9207      	str	r2, [sp, #28]
 800e264:	e014      	b.n	800e290 <_svfiprintf_r+0x114>
 800e266:	eba0 0308 	sub.w	r3, r0, r8
 800e26a:	fa09 f303 	lsl.w	r3, r9, r3
 800e26e:	4313      	orrs	r3, r2
 800e270:	9304      	str	r3, [sp, #16]
 800e272:	46a2      	mov	sl, r4
 800e274:	e7d2      	b.n	800e21c <_svfiprintf_r+0xa0>
 800e276:	9b03      	ldr	r3, [sp, #12]
 800e278:	1d19      	adds	r1, r3, #4
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	9103      	str	r1, [sp, #12]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	bfbb      	ittet	lt
 800e282:	425b      	neglt	r3, r3
 800e284:	f042 0202 	orrlt.w	r2, r2, #2
 800e288:	9307      	strge	r3, [sp, #28]
 800e28a:	9307      	strlt	r3, [sp, #28]
 800e28c:	bfb8      	it	lt
 800e28e:	9204      	strlt	r2, [sp, #16]
 800e290:	7823      	ldrb	r3, [r4, #0]
 800e292:	2b2e      	cmp	r3, #46	@ 0x2e
 800e294:	d10a      	bne.n	800e2ac <_svfiprintf_r+0x130>
 800e296:	7863      	ldrb	r3, [r4, #1]
 800e298:	2b2a      	cmp	r3, #42	@ 0x2a
 800e29a:	d132      	bne.n	800e302 <_svfiprintf_r+0x186>
 800e29c:	9b03      	ldr	r3, [sp, #12]
 800e29e:	1d1a      	adds	r2, r3, #4
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	9203      	str	r2, [sp, #12]
 800e2a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e2a8:	3402      	adds	r4, #2
 800e2aa:	9305      	str	r3, [sp, #20]
 800e2ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e370 <_svfiprintf_r+0x1f4>
 800e2b0:	7821      	ldrb	r1, [r4, #0]
 800e2b2:	2203      	movs	r2, #3
 800e2b4:	4650      	mov	r0, sl
 800e2b6:	f7f1 ff8b 	bl	80001d0 <memchr>
 800e2ba:	b138      	cbz	r0, 800e2cc <_svfiprintf_r+0x150>
 800e2bc:	9b04      	ldr	r3, [sp, #16]
 800e2be:	eba0 000a 	sub.w	r0, r0, sl
 800e2c2:	2240      	movs	r2, #64	@ 0x40
 800e2c4:	4082      	lsls	r2, r0
 800e2c6:	4313      	orrs	r3, r2
 800e2c8:	3401      	adds	r4, #1
 800e2ca:	9304      	str	r3, [sp, #16]
 800e2cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2d0:	4824      	ldr	r0, [pc, #144]	@ (800e364 <_svfiprintf_r+0x1e8>)
 800e2d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e2d6:	2206      	movs	r2, #6
 800e2d8:	f7f1 ff7a 	bl	80001d0 <memchr>
 800e2dc:	2800      	cmp	r0, #0
 800e2de:	d036      	beq.n	800e34e <_svfiprintf_r+0x1d2>
 800e2e0:	4b21      	ldr	r3, [pc, #132]	@ (800e368 <_svfiprintf_r+0x1ec>)
 800e2e2:	bb1b      	cbnz	r3, 800e32c <_svfiprintf_r+0x1b0>
 800e2e4:	9b03      	ldr	r3, [sp, #12]
 800e2e6:	3307      	adds	r3, #7
 800e2e8:	f023 0307 	bic.w	r3, r3, #7
 800e2ec:	3308      	adds	r3, #8
 800e2ee:	9303      	str	r3, [sp, #12]
 800e2f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2f2:	4433      	add	r3, r6
 800e2f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2f6:	e76a      	b.n	800e1ce <_svfiprintf_r+0x52>
 800e2f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2fc:	460c      	mov	r4, r1
 800e2fe:	2001      	movs	r0, #1
 800e300:	e7a8      	b.n	800e254 <_svfiprintf_r+0xd8>
 800e302:	2300      	movs	r3, #0
 800e304:	3401      	adds	r4, #1
 800e306:	9305      	str	r3, [sp, #20]
 800e308:	4619      	mov	r1, r3
 800e30a:	f04f 0c0a 	mov.w	ip, #10
 800e30e:	4620      	mov	r0, r4
 800e310:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e314:	3a30      	subs	r2, #48	@ 0x30
 800e316:	2a09      	cmp	r2, #9
 800e318:	d903      	bls.n	800e322 <_svfiprintf_r+0x1a6>
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d0c6      	beq.n	800e2ac <_svfiprintf_r+0x130>
 800e31e:	9105      	str	r1, [sp, #20]
 800e320:	e7c4      	b.n	800e2ac <_svfiprintf_r+0x130>
 800e322:	fb0c 2101 	mla	r1, ip, r1, r2
 800e326:	4604      	mov	r4, r0
 800e328:	2301      	movs	r3, #1
 800e32a:	e7f0      	b.n	800e30e <_svfiprintf_r+0x192>
 800e32c:	ab03      	add	r3, sp, #12
 800e32e:	9300      	str	r3, [sp, #0]
 800e330:	462a      	mov	r2, r5
 800e332:	4b0e      	ldr	r3, [pc, #56]	@ (800e36c <_svfiprintf_r+0x1f0>)
 800e334:	a904      	add	r1, sp, #16
 800e336:	4638      	mov	r0, r7
 800e338:	f7fd fcd0 	bl	800bcdc <_printf_float>
 800e33c:	1c42      	adds	r2, r0, #1
 800e33e:	4606      	mov	r6, r0
 800e340:	d1d6      	bne.n	800e2f0 <_svfiprintf_r+0x174>
 800e342:	89ab      	ldrh	r3, [r5, #12]
 800e344:	065b      	lsls	r3, r3, #25
 800e346:	f53f af2d 	bmi.w	800e1a4 <_svfiprintf_r+0x28>
 800e34a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e34c:	e72c      	b.n	800e1a8 <_svfiprintf_r+0x2c>
 800e34e:	ab03      	add	r3, sp, #12
 800e350:	9300      	str	r3, [sp, #0]
 800e352:	462a      	mov	r2, r5
 800e354:	4b05      	ldr	r3, [pc, #20]	@ (800e36c <_svfiprintf_r+0x1f0>)
 800e356:	a904      	add	r1, sp, #16
 800e358:	4638      	mov	r0, r7
 800e35a:	f7fd ff57 	bl	800c20c <_printf_i>
 800e35e:	e7ed      	b.n	800e33c <_svfiprintf_r+0x1c0>
 800e360:	08012cb8 	.word	0x08012cb8
 800e364:	08012cc2 	.word	0x08012cc2
 800e368:	0800bcdd 	.word	0x0800bcdd
 800e36c:	0800e0c5 	.word	0x0800e0c5
 800e370:	08012cbe 	.word	0x08012cbe

0800e374 <__sfputc_r>:
 800e374:	6893      	ldr	r3, [r2, #8]
 800e376:	3b01      	subs	r3, #1
 800e378:	2b00      	cmp	r3, #0
 800e37a:	b410      	push	{r4}
 800e37c:	6093      	str	r3, [r2, #8]
 800e37e:	da08      	bge.n	800e392 <__sfputc_r+0x1e>
 800e380:	6994      	ldr	r4, [r2, #24]
 800e382:	42a3      	cmp	r3, r4
 800e384:	db01      	blt.n	800e38a <__sfputc_r+0x16>
 800e386:	290a      	cmp	r1, #10
 800e388:	d103      	bne.n	800e392 <__sfputc_r+0x1e>
 800e38a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e38e:	f7fe b9f2 	b.w	800c776 <__swbuf_r>
 800e392:	6813      	ldr	r3, [r2, #0]
 800e394:	1c58      	adds	r0, r3, #1
 800e396:	6010      	str	r0, [r2, #0]
 800e398:	7019      	strb	r1, [r3, #0]
 800e39a:	4608      	mov	r0, r1
 800e39c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3a0:	4770      	bx	lr

0800e3a2 <__sfputs_r>:
 800e3a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3a4:	4606      	mov	r6, r0
 800e3a6:	460f      	mov	r7, r1
 800e3a8:	4614      	mov	r4, r2
 800e3aa:	18d5      	adds	r5, r2, r3
 800e3ac:	42ac      	cmp	r4, r5
 800e3ae:	d101      	bne.n	800e3b4 <__sfputs_r+0x12>
 800e3b0:	2000      	movs	r0, #0
 800e3b2:	e007      	b.n	800e3c4 <__sfputs_r+0x22>
 800e3b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3b8:	463a      	mov	r2, r7
 800e3ba:	4630      	mov	r0, r6
 800e3bc:	f7ff ffda 	bl	800e374 <__sfputc_r>
 800e3c0:	1c43      	adds	r3, r0, #1
 800e3c2:	d1f3      	bne.n	800e3ac <__sfputs_r+0xa>
 800e3c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e3c8 <_vfiprintf_r>:
 800e3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3cc:	460d      	mov	r5, r1
 800e3ce:	b09d      	sub	sp, #116	@ 0x74
 800e3d0:	4614      	mov	r4, r2
 800e3d2:	4698      	mov	r8, r3
 800e3d4:	4606      	mov	r6, r0
 800e3d6:	b118      	cbz	r0, 800e3e0 <_vfiprintf_r+0x18>
 800e3d8:	6a03      	ldr	r3, [r0, #32]
 800e3da:	b90b      	cbnz	r3, 800e3e0 <_vfiprintf_r+0x18>
 800e3dc:	f7fe f8c2 	bl	800c564 <__sinit>
 800e3e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e3e2:	07d9      	lsls	r1, r3, #31
 800e3e4:	d405      	bmi.n	800e3f2 <_vfiprintf_r+0x2a>
 800e3e6:	89ab      	ldrh	r3, [r5, #12]
 800e3e8:	059a      	lsls	r2, r3, #22
 800e3ea:	d402      	bmi.n	800e3f2 <_vfiprintf_r+0x2a>
 800e3ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e3ee:	f7fe fb6a 	bl	800cac6 <__retarget_lock_acquire_recursive>
 800e3f2:	89ab      	ldrh	r3, [r5, #12]
 800e3f4:	071b      	lsls	r3, r3, #28
 800e3f6:	d501      	bpl.n	800e3fc <_vfiprintf_r+0x34>
 800e3f8:	692b      	ldr	r3, [r5, #16]
 800e3fa:	b99b      	cbnz	r3, 800e424 <_vfiprintf_r+0x5c>
 800e3fc:	4629      	mov	r1, r5
 800e3fe:	4630      	mov	r0, r6
 800e400:	f7fe f9f8 	bl	800c7f4 <__swsetup_r>
 800e404:	b170      	cbz	r0, 800e424 <_vfiprintf_r+0x5c>
 800e406:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e408:	07dc      	lsls	r4, r3, #31
 800e40a:	d504      	bpl.n	800e416 <_vfiprintf_r+0x4e>
 800e40c:	f04f 30ff 	mov.w	r0, #4294967295
 800e410:	b01d      	add	sp, #116	@ 0x74
 800e412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e416:	89ab      	ldrh	r3, [r5, #12]
 800e418:	0598      	lsls	r0, r3, #22
 800e41a:	d4f7      	bmi.n	800e40c <_vfiprintf_r+0x44>
 800e41c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e41e:	f7fe fb53 	bl	800cac8 <__retarget_lock_release_recursive>
 800e422:	e7f3      	b.n	800e40c <_vfiprintf_r+0x44>
 800e424:	2300      	movs	r3, #0
 800e426:	9309      	str	r3, [sp, #36]	@ 0x24
 800e428:	2320      	movs	r3, #32
 800e42a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e42e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e432:	2330      	movs	r3, #48	@ 0x30
 800e434:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e5e4 <_vfiprintf_r+0x21c>
 800e438:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e43c:	f04f 0901 	mov.w	r9, #1
 800e440:	4623      	mov	r3, r4
 800e442:	469a      	mov	sl, r3
 800e444:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e448:	b10a      	cbz	r2, 800e44e <_vfiprintf_r+0x86>
 800e44a:	2a25      	cmp	r2, #37	@ 0x25
 800e44c:	d1f9      	bne.n	800e442 <_vfiprintf_r+0x7a>
 800e44e:	ebba 0b04 	subs.w	fp, sl, r4
 800e452:	d00b      	beq.n	800e46c <_vfiprintf_r+0xa4>
 800e454:	465b      	mov	r3, fp
 800e456:	4622      	mov	r2, r4
 800e458:	4629      	mov	r1, r5
 800e45a:	4630      	mov	r0, r6
 800e45c:	f7ff ffa1 	bl	800e3a2 <__sfputs_r>
 800e460:	3001      	adds	r0, #1
 800e462:	f000 80a7 	beq.w	800e5b4 <_vfiprintf_r+0x1ec>
 800e466:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e468:	445a      	add	r2, fp
 800e46a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e46c:	f89a 3000 	ldrb.w	r3, [sl]
 800e470:	2b00      	cmp	r3, #0
 800e472:	f000 809f 	beq.w	800e5b4 <_vfiprintf_r+0x1ec>
 800e476:	2300      	movs	r3, #0
 800e478:	f04f 32ff 	mov.w	r2, #4294967295
 800e47c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e480:	f10a 0a01 	add.w	sl, sl, #1
 800e484:	9304      	str	r3, [sp, #16]
 800e486:	9307      	str	r3, [sp, #28]
 800e488:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e48c:	931a      	str	r3, [sp, #104]	@ 0x68
 800e48e:	4654      	mov	r4, sl
 800e490:	2205      	movs	r2, #5
 800e492:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e496:	4853      	ldr	r0, [pc, #332]	@ (800e5e4 <_vfiprintf_r+0x21c>)
 800e498:	f7f1 fe9a 	bl	80001d0 <memchr>
 800e49c:	9a04      	ldr	r2, [sp, #16]
 800e49e:	b9d8      	cbnz	r0, 800e4d8 <_vfiprintf_r+0x110>
 800e4a0:	06d1      	lsls	r1, r2, #27
 800e4a2:	bf44      	itt	mi
 800e4a4:	2320      	movmi	r3, #32
 800e4a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4aa:	0713      	lsls	r3, r2, #28
 800e4ac:	bf44      	itt	mi
 800e4ae:	232b      	movmi	r3, #43	@ 0x2b
 800e4b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4b4:	f89a 3000 	ldrb.w	r3, [sl]
 800e4b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4ba:	d015      	beq.n	800e4e8 <_vfiprintf_r+0x120>
 800e4bc:	9a07      	ldr	r2, [sp, #28]
 800e4be:	4654      	mov	r4, sl
 800e4c0:	2000      	movs	r0, #0
 800e4c2:	f04f 0c0a 	mov.w	ip, #10
 800e4c6:	4621      	mov	r1, r4
 800e4c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4cc:	3b30      	subs	r3, #48	@ 0x30
 800e4ce:	2b09      	cmp	r3, #9
 800e4d0:	d94b      	bls.n	800e56a <_vfiprintf_r+0x1a2>
 800e4d2:	b1b0      	cbz	r0, 800e502 <_vfiprintf_r+0x13a>
 800e4d4:	9207      	str	r2, [sp, #28]
 800e4d6:	e014      	b.n	800e502 <_vfiprintf_r+0x13a>
 800e4d8:	eba0 0308 	sub.w	r3, r0, r8
 800e4dc:	fa09 f303 	lsl.w	r3, r9, r3
 800e4e0:	4313      	orrs	r3, r2
 800e4e2:	9304      	str	r3, [sp, #16]
 800e4e4:	46a2      	mov	sl, r4
 800e4e6:	e7d2      	b.n	800e48e <_vfiprintf_r+0xc6>
 800e4e8:	9b03      	ldr	r3, [sp, #12]
 800e4ea:	1d19      	adds	r1, r3, #4
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	9103      	str	r1, [sp, #12]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	bfbb      	ittet	lt
 800e4f4:	425b      	neglt	r3, r3
 800e4f6:	f042 0202 	orrlt.w	r2, r2, #2
 800e4fa:	9307      	strge	r3, [sp, #28]
 800e4fc:	9307      	strlt	r3, [sp, #28]
 800e4fe:	bfb8      	it	lt
 800e500:	9204      	strlt	r2, [sp, #16]
 800e502:	7823      	ldrb	r3, [r4, #0]
 800e504:	2b2e      	cmp	r3, #46	@ 0x2e
 800e506:	d10a      	bne.n	800e51e <_vfiprintf_r+0x156>
 800e508:	7863      	ldrb	r3, [r4, #1]
 800e50a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e50c:	d132      	bne.n	800e574 <_vfiprintf_r+0x1ac>
 800e50e:	9b03      	ldr	r3, [sp, #12]
 800e510:	1d1a      	adds	r2, r3, #4
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	9203      	str	r2, [sp, #12]
 800e516:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e51a:	3402      	adds	r4, #2
 800e51c:	9305      	str	r3, [sp, #20]
 800e51e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e5f4 <_vfiprintf_r+0x22c>
 800e522:	7821      	ldrb	r1, [r4, #0]
 800e524:	2203      	movs	r2, #3
 800e526:	4650      	mov	r0, sl
 800e528:	f7f1 fe52 	bl	80001d0 <memchr>
 800e52c:	b138      	cbz	r0, 800e53e <_vfiprintf_r+0x176>
 800e52e:	9b04      	ldr	r3, [sp, #16]
 800e530:	eba0 000a 	sub.w	r0, r0, sl
 800e534:	2240      	movs	r2, #64	@ 0x40
 800e536:	4082      	lsls	r2, r0
 800e538:	4313      	orrs	r3, r2
 800e53a:	3401      	adds	r4, #1
 800e53c:	9304      	str	r3, [sp, #16]
 800e53e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e542:	4829      	ldr	r0, [pc, #164]	@ (800e5e8 <_vfiprintf_r+0x220>)
 800e544:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e548:	2206      	movs	r2, #6
 800e54a:	f7f1 fe41 	bl	80001d0 <memchr>
 800e54e:	2800      	cmp	r0, #0
 800e550:	d03f      	beq.n	800e5d2 <_vfiprintf_r+0x20a>
 800e552:	4b26      	ldr	r3, [pc, #152]	@ (800e5ec <_vfiprintf_r+0x224>)
 800e554:	bb1b      	cbnz	r3, 800e59e <_vfiprintf_r+0x1d6>
 800e556:	9b03      	ldr	r3, [sp, #12]
 800e558:	3307      	adds	r3, #7
 800e55a:	f023 0307 	bic.w	r3, r3, #7
 800e55e:	3308      	adds	r3, #8
 800e560:	9303      	str	r3, [sp, #12]
 800e562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e564:	443b      	add	r3, r7
 800e566:	9309      	str	r3, [sp, #36]	@ 0x24
 800e568:	e76a      	b.n	800e440 <_vfiprintf_r+0x78>
 800e56a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e56e:	460c      	mov	r4, r1
 800e570:	2001      	movs	r0, #1
 800e572:	e7a8      	b.n	800e4c6 <_vfiprintf_r+0xfe>
 800e574:	2300      	movs	r3, #0
 800e576:	3401      	adds	r4, #1
 800e578:	9305      	str	r3, [sp, #20]
 800e57a:	4619      	mov	r1, r3
 800e57c:	f04f 0c0a 	mov.w	ip, #10
 800e580:	4620      	mov	r0, r4
 800e582:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e586:	3a30      	subs	r2, #48	@ 0x30
 800e588:	2a09      	cmp	r2, #9
 800e58a:	d903      	bls.n	800e594 <_vfiprintf_r+0x1cc>
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d0c6      	beq.n	800e51e <_vfiprintf_r+0x156>
 800e590:	9105      	str	r1, [sp, #20]
 800e592:	e7c4      	b.n	800e51e <_vfiprintf_r+0x156>
 800e594:	fb0c 2101 	mla	r1, ip, r1, r2
 800e598:	4604      	mov	r4, r0
 800e59a:	2301      	movs	r3, #1
 800e59c:	e7f0      	b.n	800e580 <_vfiprintf_r+0x1b8>
 800e59e:	ab03      	add	r3, sp, #12
 800e5a0:	9300      	str	r3, [sp, #0]
 800e5a2:	462a      	mov	r2, r5
 800e5a4:	4b12      	ldr	r3, [pc, #72]	@ (800e5f0 <_vfiprintf_r+0x228>)
 800e5a6:	a904      	add	r1, sp, #16
 800e5a8:	4630      	mov	r0, r6
 800e5aa:	f7fd fb97 	bl	800bcdc <_printf_float>
 800e5ae:	4607      	mov	r7, r0
 800e5b0:	1c78      	adds	r0, r7, #1
 800e5b2:	d1d6      	bne.n	800e562 <_vfiprintf_r+0x19a>
 800e5b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5b6:	07d9      	lsls	r1, r3, #31
 800e5b8:	d405      	bmi.n	800e5c6 <_vfiprintf_r+0x1fe>
 800e5ba:	89ab      	ldrh	r3, [r5, #12]
 800e5bc:	059a      	lsls	r2, r3, #22
 800e5be:	d402      	bmi.n	800e5c6 <_vfiprintf_r+0x1fe>
 800e5c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e5c2:	f7fe fa81 	bl	800cac8 <__retarget_lock_release_recursive>
 800e5c6:	89ab      	ldrh	r3, [r5, #12]
 800e5c8:	065b      	lsls	r3, r3, #25
 800e5ca:	f53f af1f 	bmi.w	800e40c <_vfiprintf_r+0x44>
 800e5ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e5d0:	e71e      	b.n	800e410 <_vfiprintf_r+0x48>
 800e5d2:	ab03      	add	r3, sp, #12
 800e5d4:	9300      	str	r3, [sp, #0]
 800e5d6:	462a      	mov	r2, r5
 800e5d8:	4b05      	ldr	r3, [pc, #20]	@ (800e5f0 <_vfiprintf_r+0x228>)
 800e5da:	a904      	add	r1, sp, #16
 800e5dc:	4630      	mov	r0, r6
 800e5de:	f7fd fe15 	bl	800c20c <_printf_i>
 800e5e2:	e7e4      	b.n	800e5ae <_vfiprintf_r+0x1e6>
 800e5e4:	08012cb8 	.word	0x08012cb8
 800e5e8:	08012cc2 	.word	0x08012cc2
 800e5ec:	0800bcdd 	.word	0x0800bcdd
 800e5f0:	0800e3a3 	.word	0x0800e3a3
 800e5f4:	08012cbe 	.word	0x08012cbe

0800e5f8 <__sflush_r>:
 800e5f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e600:	0716      	lsls	r6, r2, #28
 800e602:	4605      	mov	r5, r0
 800e604:	460c      	mov	r4, r1
 800e606:	d454      	bmi.n	800e6b2 <__sflush_r+0xba>
 800e608:	684b      	ldr	r3, [r1, #4]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	dc02      	bgt.n	800e614 <__sflush_r+0x1c>
 800e60e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e610:	2b00      	cmp	r3, #0
 800e612:	dd48      	ble.n	800e6a6 <__sflush_r+0xae>
 800e614:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e616:	2e00      	cmp	r6, #0
 800e618:	d045      	beq.n	800e6a6 <__sflush_r+0xae>
 800e61a:	2300      	movs	r3, #0
 800e61c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e620:	682f      	ldr	r7, [r5, #0]
 800e622:	6a21      	ldr	r1, [r4, #32]
 800e624:	602b      	str	r3, [r5, #0]
 800e626:	d030      	beq.n	800e68a <__sflush_r+0x92>
 800e628:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e62a:	89a3      	ldrh	r3, [r4, #12]
 800e62c:	0759      	lsls	r1, r3, #29
 800e62e:	d505      	bpl.n	800e63c <__sflush_r+0x44>
 800e630:	6863      	ldr	r3, [r4, #4]
 800e632:	1ad2      	subs	r2, r2, r3
 800e634:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e636:	b10b      	cbz	r3, 800e63c <__sflush_r+0x44>
 800e638:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e63a:	1ad2      	subs	r2, r2, r3
 800e63c:	2300      	movs	r3, #0
 800e63e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e640:	6a21      	ldr	r1, [r4, #32]
 800e642:	4628      	mov	r0, r5
 800e644:	47b0      	blx	r6
 800e646:	1c43      	adds	r3, r0, #1
 800e648:	89a3      	ldrh	r3, [r4, #12]
 800e64a:	d106      	bne.n	800e65a <__sflush_r+0x62>
 800e64c:	6829      	ldr	r1, [r5, #0]
 800e64e:	291d      	cmp	r1, #29
 800e650:	d82b      	bhi.n	800e6aa <__sflush_r+0xb2>
 800e652:	4a2a      	ldr	r2, [pc, #168]	@ (800e6fc <__sflush_r+0x104>)
 800e654:	410a      	asrs	r2, r1
 800e656:	07d6      	lsls	r6, r2, #31
 800e658:	d427      	bmi.n	800e6aa <__sflush_r+0xb2>
 800e65a:	2200      	movs	r2, #0
 800e65c:	6062      	str	r2, [r4, #4]
 800e65e:	04d9      	lsls	r1, r3, #19
 800e660:	6922      	ldr	r2, [r4, #16]
 800e662:	6022      	str	r2, [r4, #0]
 800e664:	d504      	bpl.n	800e670 <__sflush_r+0x78>
 800e666:	1c42      	adds	r2, r0, #1
 800e668:	d101      	bne.n	800e66e <__sflush_r+0x76>
 800e66a:	682b      	ldr	r3, [r5, #0]
 800e66c:	b903      	cbnz	r3, 800e670 <__sflush_r+0x78>
 800e66e:	6560      	str	r0, [r4, #84]	@ 0x54
 800e670:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e672:	602f      	str	r7, [r5, #0]
 800e674:	b1b9      	cbz	r1, 800e6a6 <__sflush_r+0xae>
 800e676:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e67a:	4299      	cmp	r1, r3
 800e67c:	d002      	beq.n	800e684 <__sflush_r+0x8c>
 800e67e:	4628      	mov	r0, r5
 800e680:	f7ff f89e 	bl	800d7c0 <_free_r>
 800e684:	2300      	movs	r3, #0
 800e686:	6363      	str	r3, [r4, #52]	@ 0x34
 800e688:	e00d      	b.n	800e6a6 <__sflush_r+0xae>
 800e68a:	2301      	movs	r3, #1
 800e68c:	4628      	mov	r0, r5
 800e68e:	47b0      	blx	r6
 800e690:	4602      	mov	r2, r0
 800e692:	1c50      	adds	r0, r2, #1
 800e694:	d1c9      	bne.n	800e62a <__sflush_r+0x32>
 800e696:	682b      	ldr	r3, [r5, #0]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d0c6      	beq.n	800e62a <__sflush_r+0x32>
 800e69c:	2b1d      	cmp	r3, #29
 800e69e:	d001      	beq.n	800e6a4 <__sflush_r+0xac>
 800e6a0:	2b16      	cmp	r3, #22
 800e6a2:	d11e      	bne.n	800e6e2 <__sflush_r+0xea>
 800e6a4:	602f      	str	r7, [r5, #0]
 800e6a6:	2000      	movs	r0, #0
 800e6a8:	e022      	b.n	800e6f0 <__sflush_r+0xf8>
 800e6aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6ae:	b21b      	sxth	r3, r3
 800e6b0:	e01b      	b.n	800e6ea <__sflush_r+0xf2>
 800e6b2:	690f      	ldr	r7, [r1, #16]
 800e6b4:	2f00      	cmp	r7, #0
 800e6b6:	d0f6      	beq.n	800e6a6 <__sflush_r+0xae>
 800e6b8:	0793      	lsls	r3, r2, #30
 800e6ba:	680e      	ldr	r6, [r1, #0]
 800e6bc:	bf08      	it	eq
 800e6be:	694b      	ldreq	r3, [r1, #20]
 800e6c0:	600f      	str	r7, [r1, #0]
 800e6c2:	bf18      	it	ne
 800e6c4:	2300      	movne	r3, #0
 800e6c6:	eba6 0807 	sub.w	r8, r6, r7
 800e6ca:	608b      	str	r3, [r1, #8]
 800e6cc:	f1b8 0f00 	cmp.w	r8, #0
 800e6d0:	dde9      	ble.n	800e6a6 <__sflush_r+0xae>
 800e6d2:	6a21      	ldr	r1, [r4, #32]
 800e6d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e6d6:	4643      	mov	r3, r8
 800e6d8:	463a      	mov	r2, r7
 800e6da:	4628      	mov	r0, r5
 800e6dc:	47b0      	blx	r6
 800e6de:	2800      	cmp	r0, #0
 800e6e0:	dc08      	bgt.n	800e6f4 <__sflush_r+0xfc>
 800e6e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6ea:	81a3      	strh	r3, [r4, #12]
 800e6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e6f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6f4:	4407      	add	r7, r0
 800e6f6:	eba8 0800 	sub.w	r8, r8, r0
 800e6fa:	e7e7      	b.n	800e6cc <__sflush_r+0xd4>
 800e6fc:	dfbffffe 	.word	0xdfbffffe

0800e700 <_fflush_r>:
 800e700:	b538      	push	{r3, r4, r5, lr}
 800e702:	690b      	ldr	r3, [r1, #16]
 800e704:	4605      	mov	r5, r0
 800e706:	460c      	mov	r4, r1
 800e708:	b913      	cbnz	r3, 800e710 <_fflush_r+0x10>
 800e70a:	2500      	movs	r5, #0
 800e70c:	4628      	mov	r0, r5
 800e70e:	bd38      	pop	{r3, r4, r5, pc}
 800e710:	b118      	cbz	r0, 800e71a <_fflush_r+0x1a>
 800e712:	6a03      	ldr	r3, [r0, #32]
 800e714:	b90b      	cbnz	r3, 800e71a <_fflush_r+0x1a>
 800e716:	f7fd ff25 	bl	800c564 <__sinit>
 800e71a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d0f3      	beq.n	800e70a <_fflush_r+0xa>
 800e722:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e724:	07d0      	lsls	r0, r2, #31
 800e726:	d404      	bmi.n	800e732 <_fflush_r+0x32>
 800e728:	0599      	lsls	r1, r3, #22
 800e72a:	d402      	bmi.n	800e732 <_fflush_r+0x32>
 800e72c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e72e:	f7fe f9ca 	bl	800cac6 <__retarget_lock_acquire_recursive>
 800e732:	4628      	mov	r0, r5
 800e734:	4621      	mov	r1, r4
 800e736:	f7ff ff5f 	bl	800e5f8 <__sflush_r>
 800e73a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e73c:	07da      	lsls	r2, r3, #31
 800e73e:	4605      	mov	r5, r0
 800e740:	d4e4      	bmi.n	800e70c <_fflush_r+0xc>
 800e742:	89a3      	ldrh	r3, [r4, #12]
 800e744:	059b      	lsls	r3, r3, #22
 800e746:	d4e1      	bmi.n	800e70c <_fflush_r+0xc>
 800e748:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e74a:	f7fe f9bd 	bl	800cac8 <__retarget_lock_release_recursive>
 800e74e:	e7dd      	b.n	800e70c <_fflush_r+0xc>

0800e750 <fiprintf>:
 800e750:	b40e      	push	{r1, r2, r3}
 800e752:	b503      	push	{r0, r1, lr}
 800e754:	4601      	mov	r1, r0
 800e756:	ab03      	add	r3, sp, #12
 800e758:	4805      	ldr	r0, [pc, #20]	@ (800e770 <fiprintf+0x20>)
 800e75a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e75e:	6800      	ldr	r0, [r0, #0]
 800e760:	9301      	str	r3, [sp, #4]
 800e762:	f7ff fe31 	bl	800e3c8 <_vfiprintf_r>
 800e766:	b002      	add	sp, #8
 800e768:	f85d eb04 	ldr.w	lr, [sp], #4
 800e76c:	b003      	add	sp, #12
 800e76e:	4770      	bx	lr
 800e770:	20000168 	.word	0x20000168

0800e774 <__swhatbuf_r>:
 800e774:	b570      	push	{r4, r5, r6, lr}
 800e776:	460c      	mov	r4, r1
 800e778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e77c:	2900      	cmp	r1, #0
 800e77e:	b096      	sub	sp, #88	@ 0x58
 800e780:	4615      	mov	r5, r2
 800e782:	461e      	mov	r6, r3
 800e784:	da0d      	bge.n	800e7a2 <__swhatbuf_r+0x2e>
 800e786:	89a3      	ldrh	r3, [r4, #12]
 800e788:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e78c:	f04f 0100 	mov.w	r1, #0
 800e790:	bf14      	ite	ne
 800e792:	2340      	movne	r3, #64	@ 0x40
 800e794:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e798:	2000      	movs	r0, #0
 800e79a:	6031      	str	r1, [r6, #0]
 800e79c:	602b      	str	r3, [r5, #0]
 800e79e:	b016      	add	sp, #88	@ 0x58
 800e7a0:	bd70      	pop	{r4, r5, r6, pc}
 800e7a2:	466a      	mov	r2, sp
 800e7a4:	f000 f862 	bl	800e86c <_fstat_r>
 800e7a8:	2800      	cmp	r0, #0
 800e7aa:	dbec      	blt.n	800e786 <__swhatbuf_r+0x12>
 800e7ac:	9901      	ldr	r1, [sp, #4]
 800e7ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e7b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e7b6:	4259      	negs	r1, r3
 800e7b8:	4159      	adcs	r1, r3
 800e7ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e7be:	e7eb      	b.n	800e798 <__swhatbuf_r+0x24>

0800e7c0 <__smakebuf_r>:
 800e7c0:	898b      	ldrh	r3, [r1, #12]
 800e7c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7c4:	079d      	lsls	r5, r3, #30
 800e7c6:	4606      	mov	r6, r0
 800e7c8:	460c      	mov	r4, r1
 800e7ca:	d507      	bpl.n	800e7dc <__smakebuf_r+0x1c>
 800e7cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e7d0:	6023      	str	r3, [r4, #0]
 800e7d2:	6123      	str	r3, [r4, #16]
 800e7d4:	2301      	movs	r3, #1
 800e7d6:	6163      	str	r3, [r4, #20]
 800e7d8:	b003      	add	sp, #12
 800e7da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7dc:	ab01      	add	r3, sp, #4
 800e7de:	466a      	mov	r2, sp
 800e7e0:	f7ff ffc8 	bl	800e774 <__swhatbuf_r>
 800e7e4:	9f00      	ldr	r7, [sp, #0]
 800e7e6:	4605      	mov	r5, r0
 800e7e8:	4639      	mov	r1, r7
 800e7ea:	4630      	mov	r0, r6
 800e7ec:	f7ff f85c 	bl	800d8a8 <_malloc_r>
 800e7f0:	b948      	cbnz	r0, 800e806 <__smakebuf_r+0x46>
 800e7f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7f6:	059a      	lsls	r2, r3, #22
 800e7f8:	d4ee      	bmi.n	800e7d8 <__smakebuf_r+0x18>
 800e7fa:	f023 0303 	bic.w	r3, r3, #3
 800e7fe:	f043 0302 	orr.w	r3, r3, #2
 800e802:	81a3      	strh	r3, [r4, #12]
 800e804:	e7e2      	b.n	800e7cc <__smakebuf_r+0xc>
 800e806:	89a3      	ldrh	r3, [r4, #12]
 800e808:	6020      	str	r0, [r4, #0]
 800e80a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e80e:	81a3      	strh	r3, [r4, #12]
 800e810:	9b01      	ldr	r3, [sp, #4]
 800e812:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e816:	b15b      	cbz	r3, 800e830 <__smakebuf_r+0x70>
 800e818:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e81c:	4630      	mov	r0, r6
 800e81e:	f000 f837 	bl	800e890 <_isatty_r>
 800e822:	b128      	cbz	r0, 800e830 <__smakebuf_r+0x70>
 800e824:	89a3      	ldrh	r3, [r4, #12]
 800e826:	f023 0303 	bic.w	r3, r3, #3
 800e82a:	f043 0301 	orr.w	r3, r3, #1
 800e82e:	81a3      	strh	r3, [r4, #12]
 800e830:	89a3      	ldrh	r3, [r4, #12]
 800e832:	431d      	orrs	r5, r3
 800e834:	81a5      	strh	r5, [r4, #12]
 800e836:	e7cf      	b.n	800e7d8 <__smakebuf_r+0x18>

0800e838 <memmove>:
 800e838:	4288      	cmp	r0, r1
 800e83a:	b510      	push	{r4, lr}
 800e83c:	eb01 0402 	add.w	r4, r1, r2
 800e840:	d902      	bls.n	800e848 <memmove+0x10>
 800e842:	4284      	cmp	r4, r0
 800e844:	4623      	mov	r3, r4
 800e846:	d807      	bhi.n	800e858 <memmove+0x20>
 800e848:	1e43      	subs	r3, r0, #1
 800e84a:	42a1      	cmp	r1, r4
 800e84c:	d008      	beq.n	800e860 <memmove+0x28>
 800e84e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e852:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e856:	e7f8      	b.n	800e84a <memmove+0x12>
 800e858:	4402      	add	r2, r0
 800e85a:	4601      	mov	r1, r0
 800e85c:	428a      	cmp	r2, r1
 800e85e:	d100      	bne.n	800e862 <memmove+0x2a>
 800e860:	bd10      	pop	{r4, pc}
 800e862:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e866:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e86a:	e7f7      	b.n	800e85c <memmove+0x24>

0800e86c <_fstat_r>:
 800e86c:	b538      	push	{r3, r4, r5, lr}
 800e86e:	4d07      	ldr	r5, [pc, #28]	@ (800e88c <_fstat_r+0x20>)
 800e870:	2300      	movs	r3, #0
 800e872:	4604      	mov	r4, r0
 800e874:	4608      	mov	r0, r1
 800e876:	4611      	mov	r1, r2
 800e878:	602b      	str	r3, [r5, #0]
 800e87a:	f7fd f8dc 	bl	800ba36 <_fstat>
 800e87e:	1c43      	adds	r3, r0, #1
 800e880:	d102      	bne.n	800e888 <_fstat_r+0x1c>
 800e882:	682b      	ldr	r3, [r5, #0]
 800e884:	b103      	cbz	r3, 800e888 <_fstat_r+0x1c>
 800e886:	6023      	str	r3, [r4, #0]
 800e888:	bd38      	pop	{r3, r4, r5, pc}
 800e88a:	bf00      	nop
 800e88c:	20001434 	.word	0x20001434

0800e890 <_isatty_r>:
 800e890:	b538      	push	{r3, r4, r5, lr}
 800e892:	4d06      	ldr	r5, [pc, #24]	@ (800e8ac <_isatty_r+0x1c>)
 800e894:	2300      	movs	r3, #0
 800e896:	4604      	mov	r4, r0
 800e898:	4608      	mov	r0, r1
 800e89a:	602b      	str	r3, [r5, #0]
 800e89c:	f7fd f8d9 	bl	800ba52 <_isatty>
 800e8a0:	1c43      	adds	r3, r0, #1
 800e8a2:	d102      	bne.n	800e8aa <_isatty_r+0x1a>
 800e8a4:	682b      	ldr	r3, [r5, #0]
 800e8a6:	b103      	cbz	r3, 800e8aa <_isatty_r+0x1a>
 800e8a8:	6023      	str	r3, [r4, #0]
 800e8aa:	bd38      	pop	{r3, r4, r5, pc}
 800e8ac:	20001434 	.word	0x20001434

0800e8b0 <_sbrk_r>:
 800e8b0:	b538      	push	{r3, r4, r5, lr}
 800e8b2:	4d06      	ldr	r5, [pc, #24]	@ (800e8cc <_sbrk_r+0x1c>)
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	4604      	mov	r4, r0
 800e8b8:	4608      	mov	r0, r1
 800e8ba:	602b      	str	r3, [r5, #0]
 800e8bc:	f7f6 f9b8 	bl	8004c30 <_sbrk>
 800e8c0:	1c43      	adds	r3, r0, #1
 800e8c2:	d102      	bne.n	800e8ca <_sbrk_r+0x1a>
 800e8c4:	682b      	ldr	r3, [r5, #0]
 800e8c6:	b103      	cbz	r3, 800e8ca <_sbrk_r+0x1a>
 800e8c8:	6023      	str	r3, [r4, #0]
 800e8ca:	bd38      	pop	{r3, r4, r5, pc}
 800e8cc:	20001434 	.word	0x20001434

0800e8d0 <abort>:
 800e8d0:	b508      	push	{r3, lr}
 800e8d2:	2006      	movs	r0, #6
 800e8d4:	f000 f88c 	bl	800e9f0 <raise>
 800e8d8:	2001      	movs	r0, #1
 800e8da:	f001 fe1d 	bl	8010518 <_exit>

0800e8de <_calloc_r>:
 800e8de:	b570      	push	{r4, r5, r6, lr}
 800e8e0:	fba1 5402 	umull	r5, r4, r1, r2
 800e8e4:	b93c      	cbnz	r4, 800e8f6 <_calloc_r+0x18>
 800e8e6:	4629      	mov	r1, r5
 800e8e8:	f7fe ffde 	bl	800d8a8 <_malloc_r>
 800e8ec:	4606      	mov	r6, r0
 800e8ee:	b928      	cbnz	r0, 800e8fc <_calloc_r+0x1e>
 800e8f0:	2600      	movs	r6, #0
 800e8f2:	4630      	mov	r0, r6
 800e8f4:	bd70      	pop	{r4, r5, r6, pc}
 800e8f6:	220c      	movs	r2, #12
 800e8f8:	6002      	str	r2, [r0, #0]
 800e8fa:	e7f9      	b.n	800e8f0 <_calloc_r+0x12>
 800e8fc:	462a      	mov	r2, r5
 800e8fe:	4621      	mov	r1, r4
 800e900:	f7fd ffde 	bl	800c8c0 <memset>
 800e904:	e7f5      	b.n	800e8f2 <_calloc_r+0x14>

0800e906 <__ascii_mbtowc>:
 800e906:	b082      	sub	sp, #8
 800e908:	b901      	cbnz	r1, 800e90c <__ascii_mbtowc+0x6>
 800e90a:	a901      	add	r1, sp, #4
 800e90c:	b142      	cbz	r2, 800e920 <__ascii_mbtowc+0x1a>
 800e90e:	b14b      	cbz	r3, 800e924 <__ascii_mbtowc+0x1e>
 800e910:	7813      	ldrb	r3, [r2, #0]
 800e912:	600b      	str	r3, [r1, #0]
 800e914:	7812      	ldrb	r2, [r2, #0]
 800e916:	1e10      	subs	r0, r2, #0
 800e918:	bf18      	it	ne
 800e91a:	2001      	movne	r0, #1
 800e91c:	b002      	add	sp, #8
 800e91e:	4770      	bx	lr
 800e920:	4610      	mov	r0, r2
 800e922:	e7fb      	b.n	800e91c <__ascii_mbtowc+0x16>
 800e924:	f06f 0001 	mvn.w	r0, #1
 800e928:	e7f8      	b.n	800e91c <__ascii_mbtowc+0x16>

0800e92a <_realloc_r>:
 800e92a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e92e:	4680      	mov	r8, r0
 800e930:	4615      	mov	r5, r2
 800e932:	460c      	mov	r4, r1
 800e934:	b921      	cbnz	r1, 800e940 <_realloc_r+0x16>
 800e936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e93a:	4611      	mov	r1, r2
 800e93c:	f7fe bfb4 	b.w	800d8a8 <_malloc_r>
 800e940:	b92a      	cbnz	r2, 800e94e <_realloc_r+0x24>
 800e942:	f7fe ff3d 	bl	800d7c0 <_free_r>
 800e946:	2400      	movs	r4, #0
 800e948:	4620      	mov	r0, r4
 800e94a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e94e:	f000 f86b 	bl	800ea28 <_malloc_usable_size_r>
 800e952:	4285      	cmp	r5, r0
 800e954:	4606      	mov	r6, r0
 800e956:	d802      	bhi.n	800e95e <_realloc_r+0x34>
 800e958:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e95c:	d8f4      	bhi.n	800e948 <_realloc_r+0x1e>
 800e95e:	4629      	mov	r1, r5
 800e960:	4640      	mov	r0, r8
 800e962:	f7fe ffa1 	bl	800d8a8 <_malloc_r>
 800e966:	4607      	mov	r7, r0
 800e968:	2800      	cmp	r0, #0
 800e96a:	d0ec      	beq.n	800e946 <_realloc_r+0x1c>
 800e96c:	42b5      	cmp	r5, r6
 800e96e:	462a      	mov	r2, r5
 800e970:	4621      	mov	r1, r4
 800e972:	bf28      	it	cs
 800e974:	4632      	movcs	r2, r6
 800e976:	f7fe f8a8 	bl	800caca <memcpy>
 800e97a:	4621      	mov	r1, r4
 800e97c:	4640      	mov	r0, r8
 800e97e:	f7fe ff1f 	bl	800d7c0 <_free_r>
 800e982:	463c      	mov	r4, r7
 800e984:	e7e0      	b.n	800e948 <_realloc_r+0x1e>

0800e986 <__ascii_wctomb>:
 800e986:	4603      	mov	r3, r0
 800e988:	4608      	mov	r0, r1
 800e98a:	b141      	cbz	r1, 800e99e <__ascii_wctomb+0x18>
 800e98c:	2aff      	cmp	r2, #255	@ 0xff
 800e98e:	d904      	bls.n	800e99a <__ascii_wctomb+0x14>
 800e990:	228a      	movs	r2, #138	@ 0x8a
 800e992:	601a      	str	r2, [r3, #0]
 800e994:	f04f 30ff 	mov.w	r0, #4294967295
 800e998:	4770      	bx	lr
 800e99a:	700a      	strb	r2, [r1, #0]
 800e99c:	2001      	movs	r0, #1
 800e99e:	4770      	bx	lr

0800e9a0 <_raise_r>:
 800e9a0:	291f      	cmp	r1, #31
 800e9a2:	b538      	push	{r3, r4, r5, lr}
 800e9a4:	4605      	mov	r5, r0
 800e9a6:	460c      	mov	r4, r1
 800e9a8:	d904      	bls.n	800e9b4 <_raise_r+0x14>
 800e9aa:	2316      	movs	r3, #22
 800e9ac:	6003      	str	r3, [r0, #0]
 800e9ae:	f04f 30ff 	mov.w	r0, #4294967295
 800e9b2:	bd38      	pop	{r3, r4, r5, pc}
 800e9b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e9b6:	b112      	cbz	r2, 800e9be <_raise_r+0x1e>
 800e9b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e9bc:	b94b      	cbnz	r3, 800e9d2 <_raise_r+0x32>
 800e9be:	4628      	mov	r0, r5
 800e9c0:	f000 f830 	bl	800ea24 <_getpid_r>
 800e9c4:	4622      	mov	r2, r4
 800e9c6:	4601      	mov	r1, r0
 800e9c8:	4628      	mov	r0, r5
 800e9ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9ce:	f000 b817 	b.w	800ea00 <_kill_r>
 800e9d2:	2b01      	cmp	r3, #1
 800e9d4:	d00a      	beq.n	800e9ec <_raise_r+0x4c>
 800e9d6:	1c59      	adds	r1, r3, #1
 800e9d8:	d103      	bne.n	800e9e2 <_raise_r+0x42>
 800e9da:	2316      	movs	r3, #22
 800e9dc:	6003      	str	r3, [r0, #0]
 800e9de:	2001      	movs	r0, #1
 800e9e0:	e7e7      	b.n	800e9b2 <_raise_r+0x12>
 800e9e2:	2100      	movs	r1, #0
 800e9e4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e9e8:	4620      	mov	r0, r4
 800e9ea:	4798      	blx	r3
 800e9ec:	2000      	movs	r0, #0
 800e9ee:	e7e0      	b.n	800e9b2 <_raise_r+0x12>

0800e9f0 <raise>:
 800e9f0:	4b02      	ldr	r3, [pc, #8]	@ (800e9fc <raise+0xc>)
 800e9f2:	4601      	mov	r1, r0
 800e9f4:	6818      	ldr	r0, [r3, #0]
 800e9f6:	f7ff bfd3 	b.w	800e9a0 <_raise_r>
 800e9fa:	bf00      	nop
 800e9fc:	20000168 	.word	0x20000168

0800ea00 <_kill_r>:
 800ea00:	b538      	push	{r3, r4, r5, lr}
 800ea02:	4d07      	ldr	r5, [pc, #28]	@ (800ea20 <_kill_r+0x20>)
 800ea04:	2300      	movs	r3, #0
 800ea06:	4604      	mov	r4, r0
 800ea08:	4608      	mov	r0, r1
 800ea0a:	4611      	mov	r1, r2
 800ea0c:	602b      	str	r3, [r5, #0]
 800ea0e:	f001 fd7b 	bl	8010508 <_kill>
 800ea12:	1c43      	adds	r3, r0, #1
 800ea14:	d102      	bne.n	800ea1c <_kill_r+0x1c>
 800ea16:	682b      	ldr	r3, [r5, #0]
 800ea18:	b103      	cbz	r3, 800ea1c <_kill_r+0x1c>
 800ea1a:	6023      	str	r3, [r4, #0]
 800ea1c:	bd38      	pop	{r3, r4, r5, pc}
 800ea1e:	bf00      	nop
 800ea20:	20001434 	.word	0x20001434

0800ea24 <_getpid_r>:
 800ea24:	f7fc bfe4 	b.w	800b9f0 <_getpid>

0800ea28 <_malloc_usable_size_r>:
 800ea28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea2c:	1f18      	subs	r0, r3, #4
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	bfbc      	itt	lt
 800ea32:	580b      	ldrlt	r3, [r1, r0]
 800ea34:	18c0      	addlt	r0, r0, r3
 800ea36:	4770      	bx	lr

0800ea38 <atan2>:
 800ea38:	f000 bba6 	b.w	800f188 <__ieee754_atan2>

0800ea3c <fmod>:
 800ea3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea3e:	ed2d 8b02 	vpush	{d8}
 800ea42:	ec57 6b10 	vmov	r6, r7, d0
 800ea46:	ec55 4b11 	vmov	r4, r5, d1
 800ea4a:	f000 fc63 	bl	800f314 <__ieee754_fmod>
 800ea4e:	4622      	mov	r2, r4
 800ea50:	462b      	mov	r3, r5
 800ea52:	4630      	mov	r0, r6
 800ea54:	4639      	mov	r1, r7
 800ea56:	eeb0 8a40 	vmov.f32	s16, s0
 800ea5a:	eef0 8a60 	vmov.f32	s17, s1
 800ea5e:	f7f2 f865 	bl	8000b2c <__aeabi_dcmpun>
 800ea62:	b990      	cbnz	r0, 800ea8a <fmod+0x4e>
 800ea64:	2200      	movs	r2, #0
 800ea66:	2300      	movs	r3, #0
 800ea68:	4620      	mov	r0, r4
 800ea6a:	4629      	mov	r1, r5
 800ea6c:	f7f2 f82c 	bl	8000ac8 <__aeabi_dcmpeq>
 800ea70:	b158      	cbz	r0, 800ea8a <fmod+0x4e>
 800ea72:	f7fd fffd 	bl	800ca70 <__errno>
 800ea76:	2321      	movs	r3, #33	@ 0x21
 800ea78:	6003      	str	r3, [r0, #0]
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	4610      	mov	r0, r2
 800ea80:	4619      	mov	r1, r3
 800ea82:	f7f1 fee3 	bl	800084c <__aeabi_ddiv>
 800ea86:	ec41 0b18 	vmov	d8, r0, r1
 800ea8a:	eeb0 0a48 	vmov.f32	s0, s16
 800ea8e:	eef0 0a68 	vmov.f32	s1, s17
 800ea92:	ecbd 8b02 	vpop	{d8}
 800ea96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ea98 <sqrt>:
 800ea98:	b538      	push	{r3, r4, r5, lr}
 800ea9a:	ed2d 8b02 	vpush	{d8}
 800ea9e:	ec55 4b10 	vmov	r4, r5, d0
 800eaa2:	f000 f8cd 	bl	800ec40 <__ieee754_sqrt>
 800eaa6:	4622      	mov	r2, r4
 800eaa8:	462b      	mov	r3, r5
 800eaaa:	4620      	mov	r0, r4
 800eaac:	4629      	mov	r1, r5
 800eaae:	eeb0 8a40 	vmov.f32	s16, s0
 800eab2:	eef0 8a60 	vmov.f32	s17, s1
 800eab6:	f7f2 f839 	bl	8000b2c <__aeabi_dcmpun>
 800eaba:	b990      	cbnz	r0, 800eae2 <sqrt+0x4a>
 800eabc:	2200      	movs	r2, #0
 800eabe:	2300      	movs	r3, #0
 800eac0:	4620      	mov	r0, r4
 800eac2:	4629      	mov	r1, r5
 800eac4:	f7f2 f80a 	bl	8000adc <__aeabi_dcmplt>
 800eac8:	b158      	cbz	r0, 800eae2 <sqrt+0x4a>
 800eaca:	f7fd ffd1 	bl	800ca70 <__errno>
 800eace:	2321      	movs	r3, #33	@ 0x21
 800ead0:	6003      	str	r3, [r0, #0]
 800ead2:	2200      	movs	r2, #0
 800ead4:	2300      	movs	r3, #0
 800ead6:	4610      	mov	r0, r2
 800ead8:	4619      	mov	r1, r3
 800eada:	f7f1 feb7 	bl	800084c <__aeabi_ddiv>
 800eade:	ec41 0b18 	vmov	d8, r0, r1
 800eae2:	eeb0 0a48 	vmov.f32	s0, s16
 800eae6:	eef0 0a68 	vmov.f32	s1, s17
 800eaea:	ecbd 8b02 	vpop	{d8}
 800eaee:	bd38      	pop	{r3, r4, r5, pc}

0800eaf0 <cos>:
 800eaf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eaf2:	ec53 2b10 	vmov	r2, r3, d0
 800eaf6:	4826      	ldr	r0, [pc, #152]	@ (800eb90 <cos+0xa0>)
 800eaf8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800eafc:	4281      	cmp	r1, r0
 800eafe:	d806      	bhi.n	800eb0e <cos+0x1e>
 800eb00:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800eb88 <cos+0x98>
 800eb04:	b005      	add	sp, #20
 800eb06:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb0a:	f000 b9b9 	b.w	800ee80 <__kernel_cos>
 800eb0e:	4821      	ldr	r0, [pc, #132]	@ (800eb94 <cos+0xa4>)
 800eb10:	4281      	cmp	r1, r0
 800eb12:	d908      	bls.n	800eb26 <cos+0x36>
 800eb14:	4610      	mov	r0, r2
 800eb16:	4619      	mov	r1, r3
 800eb18:	f7f1 fbb6 	bl	8000288 <__aeabi_dsub>
 800eb1c:	ec41 0b10 	vmov	d0, r0, r1
 800eb20:	b005      	add	sp, #20
 800eb22:	f85d fb04 	ldr.w	pc, [sp], #4
 800eb26:	4668      	mov	r0, sp
 800eb28:	f000 fcfe 	bl	800f528 <__ieee754_rem_pio2>
 800eb2c:	f000 0003 	and.w	r0, r0, #3
 800eb30:	2801      	cmp	r0, #1
 800eb32:	d00b      	beq.n	800eb4c <cos+0x5c>
 800eb34:	2802      	cmp	r0, #2
 800eb36:	d015      	beq.n	800eb64 <cos+0x74>
 800eb38:	b9d8      	cbnz	r0, 800eb72 <cos+0x82>
 800eb3a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eb3e:	ed9d 0b00 	vldr	d0, [sp]
 800eb42:	f000 f99d 	bl	800ee80 <__kernel_cos>
 800eb46:	ec51 0b10 	vmov	r0, r1, d0
 800eb4a:	e7e7      	b.n	800eb1c <cos+0x2c>
 800eb4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eb50:	ed9d 0b00 	vldr	d0, [sp]
 800eb54:	f000 fa5c 	bl	800f010 <__kernel_sin>
 800eb58:	ec53 2b10 	vmov	r2, r3, d0
 800eb5c:	4610      	mov	r0, r2
 800eb5e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800eb62:	e7db      	b.n	800eb1c <cos+0x2c>
 800eb64:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eb68:	ed9d 0b00 	vldr	d0, [sp]
 800eb6c:	f000 f988 	bl	800ee80 <__kernel_cos>
 800eb70:	e7f2      	b.n	800eb58 <cos+0x68>
 800eb72:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eb76:	ed9d 0b00 	vldr	d0, [sp]
 800eb7a:	2001      	movs	r0, #1
 800eb7c:	f000 fa48 	bl	800f010 <__kernel_sin>
 800eb80:	e7e1      	b.n	800eb46 <cos+0x56>
 800eb82:	bf00      	nop
 800eb84:	f3af 8000 	nop.w
	...
 800eb90:	3fe921fb 	.word	0x3fe921fb
 800eb94:	7fefffff 	.word	0x7fefffff

0800eb98 <sin>:
 800eb98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eb9a:	ec53 2b10 	vmov	r2, r3, d0
 800eb9e:	4826      	ldr	r0, [pc, #152]	@ (800ec38 <sin+0xa0>)
 800eba0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800eba4:	4281      	cmp	r1, r0
 800eba6:	d807      	bhi.n	800ebb8 <sin+0x20>
 800eba8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800ec30 <sin+0x98>
 800ebac:	2000      	movs	r0, #0
 800ebae:	b005      	add	sp, #20
 800ebb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebb4:	f000 ba2c 	b.w	800f010 <__kernel_sin>
 800ebb8:	4820      	ldr	r0, [pc, #128]	@ (800ec3c <sin+0xa4>)
 800ebba:	4281      	cmp	r1, r0
 800ebbc:	d908      	bls.n	800ebd0 <sin+0x38>
 800ebbe:	4610      	mov	r0, r2
 800ebc0:	4619      	mov	r1, r3
 800ebc2:	f7f1 fb61 	bl	8000288 <__aeabi_dsub>
 800ebc6:	ec41 0b10 	vmov	d0, r0, r1
 800ebca:	b005      	add	sp, #20
 800ebcc:	f85d fb04 	ldr.w	pc, [sp], #4
 800ebd0:	4668      	mov	r0, sp
 800ebd2:	f000 fca9 	bl	800f528 <__ieee754_rem_pio2>
 800ebd6:	f000 0003 	and.w	r0, r0, #3
 800ebda:	2801      	cmp	r0, #1
 800ebdc:	d00c      	beq.n	800ebf8 <sin+0x60>
 800ebde:	2802      	cmp	r0, #2
 800ebe0:	d011      	beq.n	800ec06 <sin+0x6e>
 800ebe2:	b9e8      	cbnz	r0, 800ec20 <sin+0x88>
 800ebe4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ebe8:	ed9d 0b00 	vldr	d0, [sp]
 800ebec:	2001      	movs	r0, #1
 800ebee:	f000 fa0f 	bl	800f010 <__kernel_sin>
 800ebf2:	ec51 0b10 	vmov	r0, r1, d0
 800ebf6:	e7e6      	b.n	800ebc6 <sin+0x2e>
 800ebf8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ebfc:	ed9d 0b00 	vldr	d0, [sp]
 800ec00:	f000 f93e 	bl	800ee80 <__kernel_cos>
 800ec04:	e7f5      	b.n	800ebf2 <sin+0x5a>
 800ec06:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ec0a:	ed9d 0b00 	vldr	d0, [sp]
 800ec0e:	2001      	movs	r0, #1
 800ec10:	f000 f9fe 	bl	800f010 <__kernel_sin>
 800ec14:	ec53 2b10 	vmov	r2, r3, d0
 800ec18:	4610      	mov	r0, r2
 800ec1a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800ec1e:	e7d2      	b.n	800ebc6 <sin+0x2e>
 800ec20:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ec24:	ed9d 0b00 	vldr	d0, [sp]
 800ec28:	f000 f92a 	bl	800ee80 <__kernel_cos>
 800ec2c:	e7f2      	b.n	800ec14 <sin+0x7c>
 800ec2e:	bf00      	nop
	...
 800ec38:	3fe921fb 	.word	0x3fe921fb
 800ec3c:	7fefffff 	.word	0x7fefffff

0800ec40 <__ieee754_sqrt>:
 800ec40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec44:	4a68      	ldr	r2, [pc, #416]	@ (800ede8 <__ieee754_sqrt+0x1a8>)
 800ec46:	ec55 4b10 	vmov	r4, r5, d0
 800ec4a:	43aa      	bics	r2, r5
 800ec4c:	462b      	mov	r3, r5
 800ec4e:	4621      	mov	r1, r4
 800ec50:	d110      	bne.n	800ec74 <__ieee754_sqrt+0x34>
 800ec52:	4622      	mov	r2, r4
 800ec54:	4620      	mov	r0, r4
 800ec56:	4629      	mov	r1, r5
 800ec58:	f7f1 fcce 	bl	80005f8 <__aeabi_dmul>
 800ec5c:	4602      	mov	r2, r0
 800ec5e:	460b      	mov	r3, r1
 800ec60:	4620      	mov	r0, r4
 800ec62:	4629      	mov	r1, r5
 800ec64:	f7f1 fb12 	bl	800028c <__adddf3>
 800ec68:	4604      	mov	r4, r0
 800ec6a:	460d      	mov	r5, r1
 800ec6c:	ec45 4b10 	vmov	d0, r4, r5
 800ec70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec74:	2d00      	cmp	r5, #0
 800ec76:	dc0e      	bgt.n	800ec96 <__ieee754_sqrt+0x56>
 800ec78:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ec7c:	4322      	orrs	r2, r4
 800ec7e:	d0f5      	beq.n	800ec6c <__ieee754_sqrt+0x2c>
 800ec80:	b19d      	cbz	r5, 800ecaa <__ieee754_sqrt+0x6a>
 800ec82:	4622      	mov	r2, r4
 800ec84:	4620      	mov	r0, r4
 800ec86:	4629      	mov	r1, r5
 800ec88:	f7f1 fafe 	bl	8000288 <__aeabi_dsub>
 800ec8c:	4602      	mov	r2, r0
 800ec8e:	460b      	mov	r3, r1
 800ec90:	f7f1 fddc 	bl	800084c <__aeabi_ddiv>
 800ec94:	e7e8      	b.n	800ec68 <__ieee754_sqrt+0x28>
 800ec96:	152a      	asrs	r2, r5, #20
 800ec98:	d115      	bne.n	800ecc6 <__ieee754_sqrt+0x86>
 800ec9a:	2000      	movs	r0, #0
 800ec9c:	e009      	b.n	800ecb2 <__ieee754_sqrt+0x72>
 800ec9e:	0acb      	lsrs	r3, r1, #11
 800eca0:	3a15      	subs	r2, #21
 800eca2:	0549      	lsls	r1, r1, #21
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d0fa      	beq.n	800ec9e <__ieee754_sqrt+0x5e>
 800eca8:	e7f7      	b.n	800ec9a <__ieee754_sqrt+0x5a>
 800ecaa:	462a      	mov	r2, r5
 800ecac:	e7fa      	b.n	800eca4 <__ieee754_sqrt+0x64>
 800ecae:	005b      	lsls	r3, r3, #1
 800ecb0:	3001      	adds	r0, #1
 800ecb2:	02dc      	lsls	r4, r3, #11
 800ecb4:	d5fb      	bpl.n	800ecae <__ieee754_sqrt+0x6e>
 800ecb6:	1e44      	subs	r4, r0, #1
 800ecb8:	1b12      	subs	r2, r2, r4
 800ecba:	f1c0 0420 	rsb	r4, r0, #32
 800ecbe:	fa21 f404 	lsr.w	r4, r1, r4
 800ecc2:	4323      	orrs	r3, r4
 800ecc4:	4081      	lsls	r1, r0
 800ecc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ecca:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800ecce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ecd2:	07d2      	lsls	r2, r2, #31
 800ecd4:	bf5c      	itt	pl
 800ecd6:	005b      	lslpl	r3, r3, #1
 800ecd8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800ecdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ece0:	bf58      	it	pl
 800ece2:	0049      	lslpl	r1, r1, #1
 800ece4:	2600      	movs	r6, #0
 800ece6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ecea:	106d      	asrs	r5, r5, #1
 800ecec:	0049      	lsls	r1, r1, #1
 800ecee:	2016      	movs	r0, #22
 800ecf0:	4632      	mov	r2, r6
 800ecf2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ecf6:	1917      	adds	r7, r2, r4
 800ecf8:	429f      	cmp	r7, r3
 800ecfa:	bfde      	ittt	le
 800ecfc:	193a      	addle	r2, r7, r4
 800ecfe:	1bdb      	suble	r3, r3, r7
 800ed00:	1936      	addle	r6, r6, r4
 800ed02:	0fcf      	lsrs	r7, r1, #31
 800ed04:	3801      	subs	r0, #1
 800ed06:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800ed0a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ed0e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ed12:	d1f0      	bne.n	800ecf6 <__ieee754_sqrt+0xb6>
 800ed14:	4604      	mov	r4, r0
 800ed16:	2720      	movs	r7, #32
 800ed18:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ed1c:	429a      	cmp	r2, r3
 800ed1e:	eb00 0e0c 	add.w	lr, r0, ip
 800ed22:	db02      	blt.n	800ed2a <__ieee754_sqrt+0xea>
 800ed24:	d113      	bne.n	800ed4e <__ieee754_sqrt+0x10e>
 800ed26:	458e      	cmp	lr, r1
 800ed28:	d811      	bhi.n	800ed4e <__ieee754_sqrt+0x10e>
 800ed2a:	f1be 0f00 	cmp.w	lr, #0
 800ed2e:	eb0e 000c 	add.w	r0, lr, ip
 800ed32:	da42      	bge.n	800edba <__ieee754_sqrt+0x17a>
 800ed34:	2800      	cmp	r0, #0
 800ed36:	db40      	blt.n	800edba <__ieee754_sqrt+0x17a>
 800ed38:	f102 0801 	add.w	r8, r2, #1
 800ed3c:	1a9b      	subs	r3, r3, r2
 800ed3e:	458e      	cmp	lr, r1
 800ed40:	bf88      	it	hi
 800ed42:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ed46:	eba1 010e 	sub.w	r1, r1, lr
 800ed4a:	4464      	add	r4, ip
 800ed4c:	4642      	mov	r2, r8
 800ed4e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ed52:	3f01      	subs	r7, #1
 800ed54:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ed58:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ed5c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ed60:	d1dc      	bne.n	800ed1c <__ieee754_sqrt+0xdc>
 800ed62:	4319      	orrs	r1, r3
 800ed64:	d01b      	beq.n	800ed9e <__ieee754_sqrt+0x15e>
 800ed66:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800edec <__ieee754_sqrt+0x1ac>
 800ed6a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800edf0 <__ieee754_sqrt+0x1b0>
 800ed6e:	e9da 0100 	ldrd	r0, r1, [sl]
 800ed72:	e9db 2300 	ldrd	r2, r3, [fp]
 800ed76:	f7f1 fa87 	bl	8000288 <__aeabi_dsub>
 800ed7a:	e9da 8900 	ldrd	r8, r9, [sl]
 800ed7e:	4602      	mov	r2, r0
 800ed80:	460b      	mov	r3, r1
 800ed82:	4640      	mov	r0, r8
 800ed84:	4649      	mov	r1, r9
 800ed86:	f7f1 feb3 	bl	8000af0 <__aeabi_dcmple>
 800ed8a:	b140      	cbz	r0, 800ed9e <__ieee754_sqrt+0x15e>
 800ed8c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ed90:	e9da 0100 	ldrd	r0, r1, [sl]
 800ed94:	e9db 2300 	ldrd	r2, r3, [fp]
 800ed98:	d111      	bne.n	800edbe <__ieee754_sqrt+0x17e>
 800ed9a:	3601      	adds	r6, #1
 800ed9c:	463c      	mov	r4, r7
 800ed9e:	1072      	asrs	r2, r6, #1
 800eda0:	0863      	lsrs	r3, r4, #1
 800eda2:	07f1      	lsls	r1, r6, #31
 800eda4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800eda8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800edac:	bf48      	it	mi
 800edae:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800edb2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800edb6:	4618      	mov	r0, r3
 800edb8:	e756      	b.n	800ec68 <__ieee754_sqrt+0x28>
 800edba:	4690      	mov	r8, r2
 800edbc:	e7be      	b.n	800ed3c <__ieee754_sqrt+0xfc>
 800edbe:	f7f1 fa65 	bl	800028c <__adddf3>
 800edc2:	e9da 8900 	ldrd	r8, r9, [sl]
 800edc6:	4602      	mov	r2, r0
 800edc8:	460b      	mov	r3, r1
 800edca:	4640      	mov	r0, r8
 800edcc:	4649      	mov	r1, r9
 800edce:	f7f1 fe85 	bl	8000adc <__aeabi_dcmplt>
 800edd2:	b120      	cbz	r0, 800edde <__ieee754_sqrt+0x19e>
 800edd4:	1ca0      	adds	r0, r4, #2
 800edd6:	bf08      	it	eq
 800edd8:	3601      	addeq	r6, #1
 800edda:	3402      	adds	r4, #2
 800eddc:	e7df      	b.n	800ed9e <__ieee754_sqrt+0x15e>
 800edde:	1c63      	adds	r3, r4, #1
 800ede0:	f023 0401 	bic.w	r4, r3, #1
 800ede4:	e7db      	b.n	800ed9e <__ieee754_sqrt+0x15e>
 800ede6:	bf00      	nop
 800ede8:	7ff00000 	.word	0x7ff00000
 800edec:	20000330 	.word	0x20000330
 800edf0:	20000328 	.word	0x20000328

0800edf4 <round>:
 800edf4:	ec51 0b10 	vmov	r0, r1, d0
 800edf8:	b570      	push	{r4, r5, r6, lr}
 800edfa:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800edfe:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800ee02:	2a13      	cmp	r2, #19
 800ee04:	460b      	mov	r3, r1
 800ee06:	4605      	mov	r5, r0
 800ee08:	dc1b      	bgt.n	800ee42 <round+0x4e>
 800ee0a:	2a00      	cmp	r2, #0
 800ee0c:	da0b      	bge.n	800ee26 <round+0x32>
 800ee0e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800ee12:	3201      	adds	r2, #1
 800ee14:	bf04      	itt	eq
 800ee16:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800ee1a:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800ee1e:	2200      	movs	r2, #0
 800ee20:	4619      	mov	r1, r3
 800ee22:	4610      	mov	r0, r2
 800ee24:	e015      	b.n	800ee52 <round+0x5e>
 800ee26:	4c15      	ldr	r4, [pc, #84]	@ (800ee7c <round+0x88>)
 800ee28:	4114      	asrs	r4, r2
 800ee2a:	ea04 0601 	and.w	r6, r4, r1
 800ee2e:	4306      	orrs	r6, r0
 800ee30:	d00f      	beq.n	800ee52 <round+0x5e>
 800ee32:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800ee36:	fa41 f202 	asr.w	r2, r1, r2
 800ee3a:	4413      	add	r3, r2
 800ee3c:	ea23 0304 	bic.w	r3, r3, r4
 800ee40:	e7ed      	b.n	800ee1e <round+0x2a>
 800ee42:	2a33      	cmp	r2, #51	@ 0x33
 800ee44:	dd08      	ble.n	800ee58 <round+0x64>
 800ee46:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800ee4a:	d102      	bne.n	800ee52 <round+0x5e>
 800ee4c:	4602      	mov	r2, r0
 800ee4e:	f7f1 fa1d 	bl	800028c <__adddf3>
 800ee52:	ec41 0b10 	vmov	d0, r0, r1
 800ee56:	bd70      	pop	{r4, r5, r6, pc}
 800ee58:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800ee5c:	f04f 34ff 	mov.w	r4, #4294967295
 800ee60:	40f4      	lsrs	r4, r6
 800ee62:	4204      	tst	r4, r0
 800ee64:	d0f5      	beq.n	800ee52 <round+0x5e>
 800ee66:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800ee6a:	2201      	movs	r2, #1
 800ee6c:	408a      	lsls	r2, r1
 800ee6e:	1952      	adds	r2, r2, r5
 800ee70:	bf28      	it	cs
 800ee72:	3301      	addcs	r3, #1
 800ee74:	ea22 0204 	bic.w	r2, r2, r4
 800ee78:	e7d2      	b.n	800ee20 <round+0x2c>
 800ee7a:	bf00      	nop
 800ee7c:	000fffff 	.word	0x000fffff

0800ee80 <__kernel_cos>:
 800ee80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee84:	ec57 6b10 	vmov	r6, r7, d0
 800ee88:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800ee8c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800ee90:	ed8d 1b00 	vstr	d1, [sp]
 800ee94:	d206      	bcs.n	800eea4 <__kernel_cos+0x24>
 800ee96:	4630      	mov	r0, r6
 800ee98:	4639      	mov	r1, r7
 800ee9a:	f7f1 fe5d 	bl	8000b58 <__aeabi_d2iz>
 800ee9e:	2800      	cmp	r0, #0
 800eea0:	f000 8088 	beq.w	800efb4 <__kernel_cos+0x134>
 800eea4:	4632      	mov	r2, r6
 800eea6:	463b      	mov	r3, r7
 800eea8:	4630      	mov	r0, r6
 800eeaa:	4639      	mov	r1, r7
 800eeac:	f7f1 fba4 	bl	80005f8 <__aeabi_dmul>
 800eeb0:	4b51      	ldr	r3, [pc, #324]	@ (800eff8 <__kernel_cos+0x178>)
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	4604      	mov	r4, r0
 800eeb6:	460d      	mov	r5, r1
 800eeb8:	f7f1 fb9e 	bl	80005f8 <__aeabi_dmul>
 800eebc:	a340      	add	r3, pc, #256	@ (adr r3, 800efc0 <__kernel_cos+0x140>)
 800eebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eec2:	4682      	mov	sl, r0
 800eec4:	468b      	mov	fp, r1
 800eec6:	4620      	mov	r0, r4
 800eec8:	4629      	mov	r1, r5
 800eeca:	f7f1 fb95 	bl	80005f8 <__aeabi_dmul>
 800eece:	a33e      	add	r3, pc, #248	@ (adr r3, 800efc8 <__kernel_cos+0x148>)
 800eed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed4:	f7f1 f9da 	bl	800028c <__adddf3>
 800eed8:	4622      	mov	r2, r4
 800eeda:	462b      	mov	r3, r5
 800eedc:	f7f1 fb8c 	bl	80005f8 <__aeabi_dmul>
 800eee0:	a33b      	add	r3, pc, #236	@ (adr r3, 800efd0 <__kernel_cos+0x150>)
 800eee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee6:	f7f1 f9cf 	bl	8000288 <__aeabi_dsub>
 800eeea:	4622      	mov	r2, r4
 800eeec:	462b      	mov	r3, r5
 800eeee:	f7f1 fb83 	bl	80005f8 <__aeabi_dmul>
 800eef2:	a339      	add	r3, pc, #228	@ (adr r3, 800efd8 <__kernel_cos+0x158>)
 800eef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef8:	f7f1 f9c8 	bl	800028c <__adddf3>
 800eefc:	4622      	mov	r2, r4
 800eefe:	462b      	mov	r3, r5
 800ef00:	f7f1 fb7a 	bl	80005f8 <__aeabi_dmul>
 800ef04:	a336      	add	r3, pc, #216	@ (adr r3, 800efe0 <__kernel_cos+0x160>)
 800ef06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef0a:	f7f1 f9bd 	bl	8000288 <__aeabi_dsub>
 800ef0e:	4622      	mov	r2, r4
 800ef10:	462b      	mov	r3, r5
 800ef12:	f7f1 fb71 	bl	80005f8 <__aeabi_dmul>
 800ef16:	a334      	add	r3, pc, #208	@ (adr r3, 800efe8 <__kernel_cos+0x168>)
 800ef18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef1c:	f7f1 f9b6 	bl	800028c <__adddf3>
 800ef20:	4622      	mov	r2, r4
 800ef22:	462b      	mov	r3, r5
 800ef24:	f7f1 fb68 	bl	80005f8 <__aeabi_dmul>
 800ef28:	4622      	mov	r2, r4
 800ef2a:	462b      	mov	r3, r5
 800ef2c:	f7f1 fb64 	bl	80005f8 <__aeabi_dmul>
 800ef30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef34:	4604      	mov	r4, r0
 800ef36:	460d      	mov	r5, r1
 800ef38:	4630      	mov	r0, r6
 800ef3a:	4639      	mov	r1, r7
 800ef3c:	f7f1 fb5c 	bl	80005f8 <__aeabi_dmul>
 800ef40:	460b      	mov	r3, r1
 800ef42:	4602      	mov	r2, r0
 800ef44:	4629      	mov	r1, r5
 800ef46:	4620      	mov	r0, r4
 800ef48:	f7f1 f99e 	bl	8000288 <__aeabi_dsub>
 800ef4c:	4b2b      	ldr	r3, [pc, #172]	@ (800effc <__kernel_cos+0x17c>)
 800ef4e:	4598      	cmp	r8, r3
 800ef50:	4606      	mov	r6, r0
 800ef52:	460f      	mov	r7, r1
 800ef54:	d810      	bhi.n	800ef78 <__kernel_cos+0xf8>
 800ef56:	4602      	mov	r2, r0
 800ef58:	460b      	mov	r3, r1
 800ef5a:	4650      	mov	r0, sl
 800ef5c:	4659      	mov	r1, fp
 800ef5e:	f7f1 f993 	bl	8000288 <__aeabi_dsub>
 800ef62:	460b      	mov	r3, r1
 800ef64:	4926      	ldr	r1, [pc, #152]	@ (800f000 <__kernel_cos+0x180>)
 800ef66:	4602      	mov	r2, r0
 800ef68:	2000      	movs	r0, #0
 800ef6a:	f7f1 f98d 	bl	8000288 <__aeabi_dsub>
 800ef6e:	ec41 0b10 	vmov	d0, r0, r1
 800ef72:	b003      	add	sp, #12
 800ef74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef78:	4b22      	ldr	r3, [pc, #136]	@ (800f004 <__kernel_cos+0x184>)
 800ef7a:	4921      	ldr	r1, [pc, #132]	@ (800f000 <__kernel_cos+0x180>)
 800ef7c:	4598      	cmp	r8, r3
 800ef7e:	bf8c      	ite	hi
 800ef80:	4d21      	ldrhi	r5, [pc, #132]	@ (800f008 <__kernel_cos+0x188>)
 800ef82:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800ef86:	2400      	movs	r4, #0
 800ef88:	4622      	mov	r2, r4
 800ef8a:	462b      	mov	r3, r5
 800ef8c:	2000      	movs	r0, #0
 800ef8e:	f7f1 f97b 	bl	8000288 <__aeabi_dsub>
 800ef92:	4622      	mov	r2, r4
 800ef94:	4680      	mov	r8, r0
 800ef96:	4689      	mov	r9, r1
 800ef98:	462b      	mov	r3, r5
 800ef9a:	4650      	mov	r0, sl
 800ef9c:	4659      	mov	r1, fp
 800ef9e:	f7f1 f973 	bl	8000288 <__aeabi_dsub>
 800efa2:	4632      	mov	r2, r6
 800efa4:	463b      	mov	r3, r7
 800efa6:	f7f1 f96f 	bl	8000288 <__aeabi_dsub>
 800efaa:	4602      	mov	r2, r0
 800efac:	460b      	mov	r3, r1
 800efae:	4640      	mov	r0, r8
 800efb0:	4649      	mov	r1, r9
 800efb2:	e7da      	b.n	800ef6a <__kernel_cos+0xea>
 800efb4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800eff0 <__kernel_cos+0x170>
 800efb8:	e7db      	b.n	800ef72 <__kernel_cos+0xf2>
 800efba:	bf00      	nop
 800efbc:	f3af 8000 	nop.w
 800efc0:	be8838d4 	.word	0xbe8838d4
 800efc4:	bda8fae9 	.word	0xbda8fae9
 800efc8:	bdb4b1c4 	.word	0xbdb4b1c4
 800efcc:	3e21ee9e 	.word	0x3e21ee9e
 800efd0:	809c52ad 	.word	0x809c52ad
 800efd4:	3e927e4f 	.word	0x3e927e4f
 800efd8:	19cb1590 	.word	0x19cb1590
 800efdc:	3efa01a0 	.word	0x3efa01a0
 800efe0:	16c15177 	.word	0x16c15177
 800efe4:	3f56c16c 	.word	0x3f56c16c
 800efe8:	5555554c 	.word	0x5555554c
 800efec:	3fa55555 	.word	0x3fa55555
 800eff0:	00000000 	.word	0x00000000
 800eff4:	3ff00000 	.word	0x3ff00000
 800eff8:	3fe00000 	.word	0x3fe00000
 800effc:	3fd33332 	.word	0x3fd33332
 800f000:	3ff00000 	.word	0x3ff00000
 800f004:	3fe90000 	.word	0x3fe90000
 800f008:	3fd20000 	.word	0x3fd20000
 800f00c:	00000000 	.word	0x00000000

0800f010 <__kernel_sin>:
 800f010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f014:	ec55 4b10 	vmov	r4, r5, d0
 800f018:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f01c:	b085      	sub	sp, #20
 800f01e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800f022:	ed8d 1b02 	vstr	d1, [sp, #8]
 800f026:	4680      	mov	r8, r0
 800f028:	d205      	bcs.n	800f036 <__kernel_sin+0x26>
 800f02a:	4620      	mov	r0, r4
 800f02c:	4629      	mov	r1, r5
 800f02e:	f7f1 fd93 	bl	8000b58 <__aeabi_d2iz>
 800f032:	2800      	cmp	r0, #0
 800f034:	d052      	beq.n	800f0dc <__kernel_sin+0xcc>
 800f036:	4622      	mov	r2, r4
 800f038:	462b      	mov	r3, r5
 800f03a:	4620      	mov	r0, r4
 800f03c:	4629      	mov	r1, r5
 800f03e:	f7f1 fadb 	bl	80005f8 <__aeabi_dmul>
 800f042:	4682      	mov	sl, r0
 800f044:	468b      	mov	fp, r1
 800f046:	4602      	mov	r2, r0
 800f048:	460b      	mov	r3, r1
 800f04a:	4620      	mov	r0, r4
 800f04c:	4629      	mov	r1, r5
 800f04e:	f7f1 fad3 	bl	80005f8 <__aeabi_dmul>
 800f052:	a342      	add	r3, pc, #264	@ (adr r3, 800f15c <__kernel_sin+0x14c>)
 800f054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f058:	e9cd 0100 	strd	r0, r1, [sp]
 800f05c:	4650      	mov	r0, sl
 800f05e:	4659      	mov	r1, fp
 800f060:	f7f1 faca 	bl	80005f8 <__aeabi_dmul>
 800f064:	a33f      	add	r3, pc, #252	@ (adr r3, 800f164 <__kernel_sin+0x154>)
 800f066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f06a:	f7f1 f90d 	bl	8000288 <__aeabi_dsub>
 800f06e:	4652      	mov	r2, sl
 800f070:	465b      	mov	r3, fp
 800f072:	f7f1 fac1 	bl	80005f8 <__aeabi_dmul>
 800f076:	a33d      	add	r3, pc, #244	@ (adr r3, 800f16c <__kernel_sin+0x15c>)
 800f078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f07c:	f7f1 f906 	bl	800028c <__adddf3>
 800f080:	4652      	mov	r2, sl
 800f082:	465b      	mov	r3, fp
 800f084:	f7f1 fab8 	bl	80005f8 <__aeabi_dmul>
 800f088:	a33a      	add	r3, pc, #232	@ (adr r3, 800f174 <__kernel_sin+0x164>)
 800f08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f08e:	f7f1 f8fb 	bl	8000288 <__aeabi_dsub>
 800f092:	4652      	mov	r2, sl
 800f094:	465b      	mov	r3, fp
 800f096:	f7f1 faaf 	bl	80005f8 <__aeabi_dmul>
 800f09a:	a338      	add	r3, pc, #224	@ (adr r3, 800f17c <__kernel_sin+0x16c>)
 800f09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a0:	f7f1 f8f4 	bl	800028c <__adddf3>
 800f0a4:	4606      	mov	r6, r0
 800f0a6:	460f      	mov	r7, r1
 800f0a8:	f1b8 0f00 	cmp.w	r8, #0
 800f0ac:	d11b      	bne.n	800f0e6 <__kernel_sin+0xd6>
 800f0ae:	4602      	mov	r2, r0
 800f0b0:	460b      	mov	r3, r1
 800f0b2:	4650      	mov	r0, sl
 800f0b4:	4659      	mov	r1, fp
 800f0b6:	f7f1 fa9f 	bl	80005f8 <__aeabi_dmul>
 800f0ba:	a325      	add	r3, pc, #148	@ (adr r3, 800f150 <__kernel_sin+0x140>)
 800f0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c0:	f7f1 f8e2 	bl	8000288 <__aeabi_dsub>
 800f0c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f0c8:	f7f1 fa96 	bl	80005f8 <__aeabi_dmul>
 800f0cc:	4602      	mov	r2, r0
 800f0ce:	460b      	mov	r3, r1
 800f0d0:	4620      	mov	r0, r4
 800f0d2:	4629      	mov	r1, r5
 800f0d4:	f7f1 f8da 	bl	800028c <__adddf3>
 800f0d8:	4604      	mov	r4, r0
 800f0da:	460d      	mov	r5, r1
 800f0dc:	ec45 4b10 	vmov	d0, r4, r5
 800f0e0:	b005      	add	sp, #20
 800f0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f0ea:	4b1b      	ldr	r3, [pc, #108]	@ (800f158 <__kernel_sin+0x148>)
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	f7f1 fa83 	bl	80005f8 <__aeabi_dmul>
 800f0f2:	4632      	mov	r2, r6
 800f0f4:	4680      	mov	r8, r0
 800f0f6:	4689      	mov	r9, r1
 800f0f8:	463b      	mov	r3, r7
 800f0fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f0fe:	f7f1 fa7b 	bl	80005f8 <__aeabi_dmul>
 800f102:	4602      	mov	r2, r0
 800f104:	460b      	mov	r3, r1
 800f106:	4640      	mov	r0, r8
 800f108:	4649      	mov	r1, r9
 800f10a:	f7f1 f8bd 	bl	8000288 <__aeabi_dsub>
 800f10e:	4652      	mov	r2, sl
 800f110:	465b      	mov	r3, fp
 800f112:	f7f1 fa71 	bl	80005f8 <__aeabi_dmul>
 800f116:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f11a:	f7f1 f8b5 	bl	8000288 <__aeabi_dsub>
 800f11e:	a30c      	add	r3, pc, #48	@ (adr r3, 800f150 <__kernel_sin+0x140>)
 800f120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f124:	4606      	mov	r6, r0
 800f126:	460f      	mov	r7, r1
 800f128:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f12c:	f7f1 fa64 	bl	80005f8 <__aeabi_dmul>
 800f130:	4602      	mov	r2, r0
 800f132:	460b      	mov	r3, r1
 800f134:	4630      	mov	r0, r6
 800f136:	4639      	mov	r1, r7
 800f138:	f7f1 f8a8 	bl	800028c <__adddf3>
 800f13c:	4602      	mov	r2, r0
 800f13e:	460b      	mov	r3, r1
 800f140:	4620      	mov	r0, r4
 800f142:	4629      	mov	r1, r5
 800f144:	f7f1 f8a0 	bl	8000288 <__aeabi_dsub>
 800f148:	e7c6      	b.n	800f0d8 <__kernel_sin+0xc8>
 800f14a:	bf00      	nop
 800f14c:	f3af 8000 	nop.w
 800f150:	55555549 	.word	0x55555549
 800f154:	3fc55555 	.word	0x3fc55555
 800f158:	3fe00000 	.word	0x3fe00000
 800f15c:	5acfd57c 	.word	0x5acfd57c
 800f160:	3de5d93a 	.word	0x3de5d93a
 800f164:	8a2b9ceb 	.word	0x8a2b9ceb
 800f168:	3e5ae5e6 	.word	0x3e5ae5e6
 800f16c:	57b1fe7d 	.word	0x57b1fe7d
 800f170:	3ec71de3 	.word	0x3ec71de3
 800f174:	19c161d5 	.word	0x19c161d5
 800f178:	3f2a01a0 	.word	0x3f2a01a0
 800f17c:	1110f8a6 	.word	0x1110f8a6
 800f180:	3f811111 	.word	0x3f811111
 800f184:	00000000 	.word	0x00000000

0800f188 <__ieee754_atan2>:
 800f188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f18c:	ec57 6b11 	vmov	r6, r7, d1
 800f190:	4273      	negs	r3, r6
 800f192:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800f310 <__ieee754_atan2+0x188>
 800f196:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800f19a:	4333      	orrs	r3, r6
 800f19c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800f1a0:	4543      	cmp	r3, r8
 800f1a2:	ec51 0b10 	vmov	r0, r1, d0
 800f1a6:	4635      	mov	r5, r6
 800f1a8:	d809      	bhi.n	800f1be <__ieee754_atan2+0x36>
 800f1aa:	4244      	negs	r4, r0
 800f1ac:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f1b0:	4304      	orrs	r4, r0
 800f1b2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800f1b6:	4544      	cmp	r4, r8
 800f1b8:	468e      	mov	lr, r1
 800f1ba:	4681      	mov	r9, r0
 800f1bc:	d907      	bls.n	800f1ce <__ieee754_atan2+0x46>
 800f1be:	4632      	mov	r2, r6
 800f1c0:	463b      	mov	r3, r7
 800f1c2:	f7f1 f863 	bl	800028c <__adddf3>
 800f1c6:	ec41 0b10 	vmov	d0, r0, r1
 800f1ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1ce:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800f1d2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800f1d6:	4334      	orrs	r4, r6
 800f1d8:	d103      	bne.n	800f1e2 <__ieee754_atan2+0x5a>
 800f1da:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1de:	f000 bb9f 	b.w	800f920 <atan>
 800f1e2:	17bc      	asrs	r4, r7, #30
 800f1e4:	f004 0402 	and.w	r4, r4, #2
 800f1e8:	ea53 0909 	orrs.w	r9, r3, r9
 800f1ec:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800f1f0:	d107      	bne.n	800f202 <__ieee754_atan2+0x7a>
 800f1f2:	2c02      	cmp	r4, #2
 800f1f4:	d05f      	beq.n	800f2b6 <__ieee754_atan2+0x12e>
 800f1f6:	2c03      	cmp	r4, #3
 800f1f8:	d1e5      	bne.n	800f1c6 <__ieee754_atan2+0x3e>
 800f1fa:	a141      	add	r1, pc, #260	@ (adr r1, 800f300 <__ieee754_atan2+0x178>)
 800f1fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f200:	e7e1      	b.n	800f1c6 <__ieee754_atan2+0x3e>
 800f202:	4315      	orrs	r5, r2
 800f204:	d106      	bne.n	800f214 <__ieee754_atan2+0x8c>
 800f206:	f1be 0f00 	cmp.w	lr, #0
 800f20a:	da5f      	bge.n	800f2cc <__ieee754_atan2+0x144>
 800f20c:	a13e      	add	r1, pc, #248	@ (adr r1, 800f308 <__ieee754_atan2+0x180>)
 800f20e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f212:	e7d8      	b.n	800f1c6 <__ieee754_atan2+0x3e>
 800f214:	4542      	cmp	r2, r8
 800f216:	d10f      	bne.n	800f238 <__ieee754_atan2+0xb0>
 800f218:	4293      	cmp	r3, r2
 800f21a:	f104 34ff 	add.w	r4, r4, #4294967295
 800f21e:	d107      	bne.n	800f230 <__ieee754_atan2+0xa8>
 800f220:	2c02      	cmp	r4, #2
 800f222:	d84c      	bhi.n	800f2be <__ieee754_atan2+0x136>
 800f224:	4b34      	ldr	r3, [pc, #208]	@ (800f2f8 <__ieee754_atan2+0x170>)
 800f226:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f22a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f22e:	e7ca      	b.n	800f1c6 <__ieee754_atan2+0x3e>
 800f230:	2c02      	cmp	r4, #2
 800f232:	d848      	bhi.n	800f2c6 <__ieee754_atan2+0x13e>
 800f234:	4b31      	ldr	r3, [pc, #196]	@ (800f2fc <__ieee754_atan2+0x174>)
 800f236:	e7f6      	b.n	800f226 <__ieee754_atan2+0x9e>
 800f238:	4543      	cmp	r3, r8
 800f23a:	d0e4      	beq.n	800f206 <__ieee754_atan2+0x7e>
 800f23c:	1a9b      	subs	r3, r3, r2
 800f23e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800f242:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f246:	da1e      	bge.n	800f286 <__ieee754_atan2+0xfe>
 800f248:	2f00      	cmp	r7, #0
 800f24a:	da01      	bge.n	800f250 <__ieee754_atan2+0xc8>
 800f24c:	323c      	adds	r2, #60	@ 0x3c
 800f24e:	db1e      	blt.n	800f28e <__ieee754_atan2+0x106>
 800f250:	4632      	mov	r2, r6
 800f252:	463b      	mov	r3, r7
 800f254:	f7f1 fafa 	bl	800084c <__aeabi_ddiv>
 800f258:	ec41 0b10 	vmov	d0, r0, r1
 800f25c:	f000 fcf8 	bl	800fc50 <fabs>
 800f260:	f000 fb5e 	bl	800f920 <atan>
 800f264:	ec51 0b10 	vmov	r0, r1, d0
 800f268:	2c01      	cmp	r4, #1
 800f26a:	d013      	beq.n	800f294 <__ieee754_atan2+0x10c>
 800f26c:	2c02      	cmp	r4, #2
 800f26e:	d015      	beq.n	800f29c <__ieee754_atan2+0x114>
 800f270:	2c00      	cmp	r4, #0
 800f272:	d0a8      	beq.n	800f1c6 <__ieee754_atan2+0x3e>
 800f274:	a318      	add	r3, pc, #96	@ (adr r3, 800f2d8 <__ieee754_atan2+0x150>)
 800f276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f27a:	f7f1 f805 	bl	8000288 <__aeabi_dsub>
 800f27e:	a318      	add	r3, pc, #96	@ (adr r3, 800f2e0 <__ieee754_atan2+0x158>)
 800f280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f284:	e014      	b.n	800f2b0 <__ieee754_atan2+0x128>
 800f286:	a118      	add	r1, pc, #96	@ (adr r1, 800f2e8 <__ieee754_atan2+0x160>)
 800f288:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f28c:	e7ec      	b.n	800f268 <__ieee754_atan2+0xe0>
 800f28e:	2000      	movs	r0, #0
 800f290:	2100      	movs	r1, #0
 800f292:	e7e9      	b.n	800f268 <__ieee754_atan2+0xe0>
 800f294:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f298:	4619      	mov	r1, r3
 800f29a:	e794      	b.n	800f1c6 <__ieee754_atan2+0x3e>
 800f29c:	a30e      	add	r3, pc, #56	@ (adr r3, 800f2d8 <__ieee754_atan2+0x150>)
 800f29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a2:	f7f0 fff1 	bl	8000288 <__aeabi_dsub>
 800f2a6:	4602      	mov	r2, r0
 800f2a8:	460b      	mov	r3, r1
 800f2aa:	a10d      	add	r1, pc, #52	@ (adr r1, 800f2e0 <__ieee754_atan2+0x158>)
 800f2ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2b0:	f7f0 ffea 	bl	8000288 <__aeabi_dsub>
 800f2b4:	e787      	b.n	800f1c6 <__ieee754_atan2+0x3e>
 800f2b6:	a10a      	add	r1, pc, #40	@ (adr r1, 800f2e0 <__ieee754_atan2+0x158>)
 800f2b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2bc:	e783      	b.n	800f1c6 <__ieee754_atan2+0x3e>
 800f2be:	a10c      	add	r1, pc, #48	@ (adr r1, 800f2f0 <__ieee754_atan2+0x168>)
 800f2c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2c4:	e77f      	b.n	800f1c6 <__ieee754_atan2+0x3e>
 800f2c6:	2000      	movs	r0, #0
 800f2c8:	2100      	movs	r1, #0
 800f2ca:	e77c      	b.n	800f1c6 <__ieee754_atan2+0x3e>
 800f2cc:	a106      	add	r1, pc, #24	@ (adr r1, 800f2e8 <__ieee754_atan2+0x160>)
 800f2ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2d2:	e778      	b.n	800f1c6 <__ieee754_atan2+0x3e>
 800f2d4:	f3af 8000 	nop.w
 800f2d8:	33145c07 	.word	0x33145c07
 800f2dc:	3ca1a626 	.word	0x3ca1a626
 800f2e0:	54442d18 	.word	0x54442d18
 800f2e4:	400921fb 	.word	0x400921fb
 800f2e8:	54442d18 	.word	0x54442d18
 800f2ec:	3ff921fb 	.word	0x3ff921fb
 800f2f0:	54442d18 	.word	0x54442d18
 800f2f4:	3fe921fb 	.word	0x3fe921fb
 800f2f8:	08012cf0 	.word	0x08012cf0
 800f2fc:	08012cd8 	.word	0x08012cd8
 800f300:	54442d18 	.word	0x54442d18
 800f304:	c00921fb 	.word	0xc00921fb
 800f308:	54442d18 	.word	0x54442d18
 800f30c:	bff921fb 	.word	0xbff921fb
 800f310:	7ff00000 	.word	0x7ff00000

0800f314 <__ieee754_fmod>:
 800f314:	ec53 2b11 	vmov	r2, r3, d1
 800f318:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 800f31c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f320:	ea52 040c 	orrs.w	r4, r2, ip
 800f324:	ec51 0b10 	vmov	r0, r1, d0
 800f328:	461e      	mov	r6, r3
 800f32a:	4617      	mov	r7, r2
 800f32c:	4696      	mov	lr, r2
 800f32e:	d00c      	beq.n	800f34a <__ieee754_fmod+0x36>
 800f330:	4c77      	ldr	r4, [pc, #476]	@ (800f510 <__ieee754_fmod+0x1fc>)
 800f332:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800f336:	45a0      	cmp	r8, r4
 800f338:	4689      	mov	r9, r1
 800f33a:	d806      	bhi.n	800f34a <__ieee754_fmod+0x36>
 800f33c:	4254      	negs	r4, r2
 800f33e:	4d75      	ldr	r5, [pc, #468]	@ (800f514 <__ieee754_fmod+0x200>)
 800f340:	4314      	orrs	r4, r2
 800f342:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800f346:	42ac      	cmp	r4, r5
 800f348:	d909      	bls.n	800f35e <__ieee754_fmod+0x4a>
 800f34a:	f7f1 f955 	bl	80005f8 <__aeabi_dmul>
 800f34e:	4602      	mov	r2, r0
 800f350:	460b      	mov	r3, r1
 800f352:	f7f1 fa7b 	bl	800084c <__aeabi_ddiv>
 800f356:	ec41 0b10 	vmov	d0, r0, r1
 800f35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f35e:	45e0      	cmp	r8, ip
 800f360:	4682      	mov	sl, r0
 800f362:	4604      	mov	r4, r0
 800f364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800f368:	dc09      	bgt.n	800f37e <__ieee754_fmod+0x6a>
 800f36a:	dbf4      	blt.n	800f356 <__ieee754_fmod+0x42>
 800f36c:	4282      	cmp	r2, r0
 800f36e:	d8f2      	bhi.n	800f356 <__ieee754_fmod+0x42>
 800f370:	d105      	bne.n	800f37e <__ieee754_fmod+0x6a>
 800f372:	4b69      	ldr	r3, [pc, #420]	@ (800f518 <__ieee754_fmod+0x204>)
 800f374:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800f378:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f37c:	e7eb      	b.n	800f356 <__ieee754_fmod+0x42>
 800f37e:	4a65      	ldr	r2, [pc, #404]	@ (800f514 <__ieee754_fmod+0x200>)
 800f380:	ea19 0f02 	tst.w	r9, r2
 800f384:	d148      	bne.n	800f418 <__ieee754_fmod+0x104>
 800f386:	f1b8 0f00 	cmp.w	r8, #0
 800f38a:	d13d      	bne.n	800f408 <__ieee754_fmod+0xf4>
 800f38c:	4963      	ldr	r1, [pc, #396]	@ (800f51c <__ieee754_fmod+0x208>)
 800f38e:	4653      	mov	r3, sl
 800f390:	2b00      	cmp	r3, #0
 800f392:	dc36      	bgt.n	800f402 <__ieee754_fmod+0xee>
 800f394:	4216      	tst	r6, r2
 800f396:	d14f      	bne.n	800f438 <__ieee754_fmod+0x124>
 800f398:	f1bc 0f00 	cmp.w	ip, #0
 800f39c:	d144      	bne.n	800f428 <__ieee754_fmod+0x114>
 800f39e:	4a5f      	ldr	r2, [pc, #380]	@ (800f51c <__ieee754_fmod+0x208>)
 800f3a0:	463b      	mov	r3, r7
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	dc3d      	bgt.n	800f422 <__ieee754_fmod+0x10e>
 800f3a6:	485e      	ldr	r0, [pc, #376]	@ (800f520 <__ieee754_fmod+0x20c>)
 800f3a8:	4281      	cmp	r1, r0
 800f3aa:	db4a      	blt.n	800f442 <__ieee754_fmod+0x12e>
 800f3ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f3b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f3b4:	485a      	ldr	r0, [pc, #360]	@ (800f520 <__ieee754_fmod+0x20c>)
 800f3b6:	4282      	cmp	r2, r0
 800f3b8:	db57      	blt.n	800f46a <__ieee754_fmod+0x156>
 800f3ba:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800f3be:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800f3c2:	1a89      	subs	r1, r1, r2
 800f3c4:	1b98      	subs	r0, r3, r6
 800f3c6:	eba4 070e 	sub.w	r7, r4, lr
 800f3ca:	2900      	cmp	r1, #0
 800f3cc:	d162      	bne.n	800f494 <__ieee754_fmod+0x180>
 800f3ce:	4574      	cmp	r4, lr
 800f3d0:	bf38      	it	cc
 800f3d2:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800f3d6:	2800      	cmp	r0, #0
 800f3d8:	bfa4      	itt	ge
 800f3da:	463c      	movge	r4, r7
 800f3dc:	4603      	movge	r3, r0
 800f3de:	ea53 0104 	orrs.w	r1, r3, r4
 800f3e2:	d0c6      	beq.n	800f372 <__ieee754_fmod+0x5e>
 800f3e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f3e8:	db69      	blt.n	800f4be <__ieee754_fmod+0x1aa>
 800f3ea:	494d      	ldr	r1, [pc, #308]	@ (800f520 <__ieee754_fmod+0x20c>)
 800f3ec:	428a      	cmp	r2, r1
 800f3ee:	db6c      	blt.n	800f4ca <__ieee754_fmod+0x1b6>
 800f3f0:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f3f4:	432b      	orrs	r3, r5
 800f3f6:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800f3fa:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f3fe:	4620      	mov	r0, r4
 800f400:	e7a9      	b.n	800f356 <__ieee754_fmod+0x42>
 800f402:	3901      	subs	r1, #1
 800f404:	005b      	lsls	r3, r3, #1
 800f406:	e7c3      	b.n	800f390 <__ieee754_fmod+0x7c>
 800f408:	4945      	ldr	r1, [pc, #276]	@ (800f520 <__ieee754_fmod+0x20c>)
 800f40a:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800f40e:	2b00      	cmp	r3, #0
 800f410:	ddc0      	ble.n	800f394 <__ieee754_fmod+0x80>
 800f412:	3901      	subs	r1, #1
 800f414:	005b      	lsls	r3, r3, #1
 800f416:	e7fa      	b.n	800f40e <__ieee754_fmod+0xfa>
 800f418:	ea4f 5128 	mov.w	r1, r8, asr #20
 800f41c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800f420:	e7b8      	b.n	800f394 <__ieee754_fmod+0x80>
 800f422:	3a01      	subs	r2, #1
 800f424:	005b      	lsls	r3, r3, #1
 800f426:	e7bc      	b.n	800f3a2 <__ieee754_fmod+0x8e>
 800f428:	4a3d      	ldr	r2, [pc, #244]	@ (800f520 <__ieee754_fmod+0x20c>)
 800f42a:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800f42e:	2b00      	cmp	r3, #0
 800f430:	ddb9      	ble.n	800f3a6 <__ieee754_fmod+0x92>
 800f432:	3a01      	subs	r2, #1
 800f434:	005b      	lsls	r3, r3, #1
 800f436:	e7fa      	b.n	800f42e <__ieee754_fmod+0x11a>
 800f438:	ea4f 522c 	mov.w	r2, ip, asr #20
 800f43c:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800f440:	e7b1      	b.n	800f3a6 <__ieee754_fmod+0x92>
 800f442:	1a40      	subs	r0, r0, r1
 800f444:	281f      	cmp	r0, #31
 800f446:	dc0a      	bgt.n	800f45e <__ieee754_fmod+0x14a>
 800f448:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 800f44c:	fa08 f800 	lsl.w	r8, r8, r0
 800f450:	fa2a f303 	lsr.w	r3, sl, r3
 800f454:	ea43 0308 	orr.w	r3, r3, r8
 800f458:	fa0a f400 	lsl.w	r4, sl, r0
 800f45c:	e7aa      	b.n	800f3b4 <__ieee754_fmod+0xa0>
 800f45e:	4b31      	ldr	r3, [pc, #196]	@ (800f524 <__ieee754_fmod+0x210>)
 800f460:	1a5b      	subs	r3, r3, r1
 800f462:	fa0a f303 	lsl.w	r3, sl, r3
 800f466:	2400      	movs	r4, #0
 800f468:	e7a4      	b.n	800f3b4 <__ieee754_fmod+0xa0>
 800f46a:	1a80      	subs	r0, r0, r2
 800f46c:	281f      	cmp	r0, #31
 800f46e:	dc0a      	bgt.n	800f486 <__ieee754_fmod+0x172>
 800f470:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 800f474:	fa0c fc00 	lsl.w	ip, ip, r0
 800f478:	fa27 f606 	lsr.w	r6, r7, r6
 800f47c:	ea46 060c 	orr.w	r6, r6, ip
 800f480:	fa07 fe00 	lsl.w	lr, r7, r0
 800f484:	e79d      	b.n	800f3c2 <__ieee754_fmod+0xae>
 800f486:	4e27      	ldr	r6, [pc, #156]	@ (800f524 <__ieee754_fmod+0x210>)
 800f488:	1ab6      	subs	r6, r6, r2
 800f48a:	fa07 f606 	lsl.w	r6, r7, r6
 800f48e:	f04f 0e00 	mov.w	lr, #0
 800f492:	e796      	b.n	800f3c2 <__ieee754_fmod+0xae>
 800f494:	4574      	cmp	r4, lr
 800f496:	bf38      	it	cc
 800f498:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800f49c:	2800      	cmp	r0, #0
 800f49e:	da05      	bge.n	800f4ac <__ieee754_fmod+0x198>
 800f4a0:	0fe0      	lsrs	r0, r4, #31
 800f4a2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800f4a6:	0064      	lsls	r4, r4, #1
 800f4a8:	3901      	subs	r1, #1
 800f4aa:	e78b      	b.n	800f3c4 <__ieee754_fmod+0xb0>
 800f4ac:	ea50 0307 	orrs.w	r3, r0, r7
 800f4b0:	f43f af5f 	beq.w	800f372 <__ieee754_fmod+0x5e>
 800f4b4:	0ffb      	lsrs	r3, r7, #31
 800f4b6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800f4ba:	007c      	lsls	r4, r7, #1
 800f4bc:	e7f4      	b.n	800f4a8 <__ieee754_fmod+0x194>
 800f4be:	0fe1      	lsrs	r1, r4, #31
 800f4c0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800f4c4:	0064      	lsls	r4, r4, #1
 800f4c6:	3a01      	subs	r2, #1
 800f4c8:	e78c      	b.n	800f3e4 <__ieee754_fmod+0xd0>
 800f4ca:	1a89      	subs	r1, r1, r2
 800f4cc:	2914      	cmp	r1, #20
 800f4ce:	dc0a      	bgt.n	800f4e6 <__ieee754_fmod+0x1d2>
 800f4d0:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800f4d4:	fa03 f202 	lsl.w	r2, r3, r2
 800f4d8:	40cc      	lsrs	r4, r1
 800f4da:	4322      	orrs	r2, r4
 800f4dc:	410b      	asrs	r3, r1
 800f4de:	ea43 0105 	orr.w	r1, r3, r5
 800f4e2:	4610      	mov	r0, r2
 800f4e4:	e737      	b.n	800f356 <__ieee754_fmod+0x42>
 800f4e6:	291f      	cmp	r1, #31
 800f4e8:	dc07      	bgt.n	800f4fa <__ieee754_fmod+0x1e6>
 800f4ea:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800f4ee:	40cc      	lsrs	r4, r1
 800f4f0:	fa03 f202 	lsl.w	r2, r3, r2
 800f4f4:	4322      	orrs	r2, r4
 800f4f6:	462b      	mov	r3, r5
 800f4f8:	e7f1      	b.n	800f4de <__ieee754_fmod+0x1ca>
 800f4fa:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800f4fe:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800f502:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800f506:	32e2      	adds	r2, #226	@ 0xe2
 800f508:	fa43 f202 	asr.w	r2, r3, r2
 800f50c:	e7f3      	b.n	800f4f6 <__ieee754_fmod+0x1e2>
 800f50e:	bf00      	nop
 800f510:	7fefffff 	.word	0x7fefffff
 800f514:	7ff00000 	.word	0x7ff00000
 800f518:	08012d08 	.word	0x08012d08
 800f51c:	fffffbed 	.word	0xfffffbed
 800f520:	fffffc02 	.word	0xfffffc02
 800f524:	fffffbe2 	.word	0xfffffbe2

0800f528 <__ieee754_rem_pio2>:
 800f528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f52c:	ec57 6b10 	vmov	r6, r7, d0
 800f530:	4bc5      	ldr	r3, [pc, #788]	@ (800f848 <__ieee754_rem_pio2+0x320>)
 800f532:	b08d      	sub	sp, #52	@ 0x34
 800f534:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f538:	4598      	cmp	r8, r3
 800f53a:	4604      	mov	r4, r0
 800f53c:	9704      	str	r7, [sp, #16]
 800f53e:	d807      	bhi.n	800f550 <__ieee754_rem_pio2+0x28>
 800f540:	2200      	movs	r2, #0
 800f542:	2300      	movs	r3, #0
 800f544:	ed80 0b00 	vstr	d0, [r0]
 800f548:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f54c:	2500      	movs	r5, #0
 800f54e:	e028      	b.n	800f5a2 <__ieee754_rem_pio2+0x7a>
 800f550:	4bbe      	ldr	r3, [pc, #760]	@ (800f84c <__ieee754_rem_pio2+0x324>)
 800f552:	4598      	cmp	r8, r3
 800f554:	d878      	bhi.n	800f648 <__ieee754_rem_pio2+0x120>
 800f556:	9b04      	ldr	r3, [sp, #16]
 800f558:	4dbd      	ldr	r5, [pc, #756]	@ (800f850 <__ieee754_rem_pio2+0x328>)
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	4630      	mov	r0, r6
 800f55e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800f810 <__ieee754_rem_pio2+0x2e8>)
 800f560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f564:	4639      	mov	r1, r7
 800f566:	dd38      	ble.n	800f5da <__ieee754_rem_pio2+0xb2>
 800f568:	f7f0 fe8e 	bl	8000288 <__aeabi_dsub>
 800f56c:	45a8      	cmp	r8, r5
 800f56e:	4606      	mov	r6, r0
 800f570:	460f      	mov	r7, r1
 800f572:	d01a      	beq.n	800f5aa <__ieee754_rem_pio2+0x82>
 800f574:	a3a8      	add	r3, pc, #672	@ (adr r3, 800f818 <__ieee754_rem_pio2+0x2f0>)
 800f576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f57a:	f7f0 fe85 	bl	8000288 <__aeabi_dsub>
 800f57e:	4602      	mov	r2, r0
 800f580:	460b      	mov	r3, r1
 800f582:	4680      	mov	r8, r0
 800f584:	4689      	mov	r9, r1
 800f586:	4630      	mov	r0, r6
 800f588:	4639      	mov	r1, r7
 800f58a:	f7f0 fe7d 	bl	8000288 <__aeabi_dsub>
 800f58e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800f818 <__ieee754_rem_pio2+0x2f0>)
 800f590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f594:	f7f0 fe78 	bl	8000288 <__aeabi_dsub>
 800f598:	e9c4 8900 	strd	r8, r9, [r4]
 800f59c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f5a0:	2501      	movs	r5, #1
 800f5a2:	4628      	mov	r0, r5
 800f5a4:	b00d      	add	sp, #52	@ 0x34
 800f5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5aa:	a39d      	add	r3, pc, #628	@ (adr r3, 800f820 <__ieee754_rem_pio2+0x2f8>)
 800f5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5b0:	f7f0 fe6a 	bl	8000288 <__aeabi_dsub>
 800f5b4:	a39c      	add	r3, pc, #624	@ (adr r3, 800f828 <__ieee754_rem_pio2+0x300>)
 800f5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ba:	4606      	mov	r6, r0
 800f5bc:	460f      	mov	r7, r1
 800f5be:	f7f0 fe63 	bl	8000288 <__aeabi_dsub>
 800f5c2:	4602      	mov	r2, r0
 800f5c4:	460b      	mov	r3, r1
 800f5c6:	4680      	mov	r8, r0
 800f5c8:	4689      	mov	r9, r1
 800f5ca:	4630      	mov	r0, r6
 800f5cc:	4639      	mov	r1, r7
 800f5ce:	f7f0 fe5b 	bl	8000288 <__aeabi_dsub>
 800f5d2:	a395      	add	r3, pc, #596	@ (adr r3, 800f828 <__ieee754_rem_pio2+0x300>)
 800f5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d8:	e7dc      	b.n	800f594 <__ieee754_rem_pio2+0x6c>
 800f5da:	f7f0 fe57 	bl	800028c <__adddf3>
 800f5de:	45a8      	cmp	r8, r5
 800f5e0:	4606      	mov	r6, r0
 800f5e2:	460f      	mov	r7, r1
 800f5e4:	d018      	beq.n	800f618 <__ieee754_rem_pio2+0xf0>
 800f5e6:	a38c      	add	r3, pc, #560	@ (adr r3, 800f818 <__ieee754_rem_pio2+0x2f0>)
 800f5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ec:	f7f0 fe4e 	bl	800028c <__adddf3>
 800f5f0:	4602      	mov	r2, r0
 800f5f2:	460b      	mov	r3, r1
 800f5f4:	4680      	mov	r8, r0
 800f5f6:	4689      	mov	r9, r1
 800f5f8:	4630      	mov	r0, r6
 800f5fa:	4639      	mov	r1, r7
 800f5fc:	f7f0 fe44 	bl	8000288 <__aeabi_dsub>
 800f600:	a385      	add	r3, pc, #532	@ (adr r3, 800f818 <__ieee754_rem_pio2+0x2f0>)
 800f602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f606:	f7f0 fe41 	bl	800028c <__adddf3>
 800f60a:	f04f 35ff 	mov.w	r5, #4294967295
 800f60e:	e9c4 8900 	strd	r8, r9, [r4]
 800f612:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f616:	e7c4      	b.n	800f5a2 <__ieee754_rem_pio2+0x7a>
 800f618:	a381      	add	r3, pc, #516	@ (adr r3, 800f820 <__ieee754_rem_pio2+0x2f8>)
 800f61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f61e:	f7f0 fe35 	bl	800028c <__adddf3>
 800f622:	a381      	add	r3, pc, #516	@ (adr r3, 800f828 <__ieee754_rem_pio2+0x300>)
 800f624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f628:	4606      	mov	r6, r0
 800f62a:	460f      	mov	r7, r1
 800f62c:	f7f0 fe2e 	bl	800028c <__adddf3>
 800f630:	4602      	mov	r2, r0
 800f632:	460b      	mov	r3, r1
 800f634:	4680      	mov	r8, r0
 800f636:	4689      	mov	r9, r1
 800f638:	4630      	mov	r0, r6
 800f63a:	4639      	mov	r1, r7
 800f63c:	f7f0 fe24 	bl	8000288 <__aeabi_dsub>
 800f640:	a379      	add	r3, pc, #484	@ (adr r3, 800f828 <__ieee754_rem_pio2+0x300>)
 800f642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f646:	e7de      	b.n	800f606 <__ieee754_rem_pio2+0xde>
 800f648:	4b82      	ldr	r3, [pc, #520]	@ (800f854 <__ieee754_rem_pio2+0x32c>)
 800f64a:	4598      	cmp	r8, r3
 800f64c:	f200 80d1 	bhi.w	800f7f2 <__ieee754_rem_pio2+0x2ca>
 800f650:	f000 fafe 	bl	800fc50 <fabs>
 800f654:	ec57 6b10 	vmov	r6, r7, d0
 800f658:	a375      	add	r3, pc, #468	@ (adr r3, 800f830 <__ieee754_rem_pio2+0x308>)
 800f65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f65e:	4630      	mov	r0, r6
 800f660:	4639      	mov	r1, r7
 800f662:	f7f0 ffc9 	bl	80005f8 <__aeabi_dmul>
 800f666:	4b7c      	ldr	r3, [pc, #496]	@ (800f858 <__ieee754_rem_pio2+0x330>)
 800f668:	2200      	movs	r2, #0
 800f66a:	f7f0 fe0f 	bl	800028c <__adddf3>
 800f66e:	f7f1 fa73 	bl	8000b58 <__aeabi_d2iz>
 800f672:	4605      	mov	r5, r0
 800f674:	f7f0 ff56 	bl	8000524 <__aeabi_i2d>
 800f678:	4602      	mov	r2, r0
 800f67a:	460b      	mov	r3, r1
 800f67c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f680:	a363      	add	r3, pc, #396	@ (adr r3, 800f810 <__ieee754_rem_pio2+0x2e8>)
 800f682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f686:	f7f0 ffb7 	bl	80005f8 <__aeabi_dmul>
 800f68a:	4602      	mov	r2, r0
 800f68c:	460b      	mov	r3, r1
 800f68e:	4630      	mov	r0, r6
 800f690:	4639      	mov	r1, r7
 800f692:	f7f0 fdf9 	bl	8000288 <__aeabi_dsub>
 800f696:	a360      	add	r3, pc, #384	@ (adr r3, 800f818 <__ieee754_rem_pio2+0x2f0>)
 800f698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f69c:	4682      	mov	sl, r0
 800f69e:	468b      	mov	fp, r1
 800f6a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6a4:	f7f0 ffa8 	bl	80005f8 <__aeabi_dmul>
 800f6a8:	2d1f      	cmp	r5, #31
 800f6aa:	4606      	mov	r6, r0
 800f6ac:	460f      	mov	r7, r1
 800f6ae:	dc0c      	bgt.n	800f6ca <__ieee754_rem_pio2+0x1a2>
 800f6b0:	4b6a      	ldr	r3, [pc, #424]	@ (800f85c <__ieee754_rem_pio2+0x334>)
 800f6b2:	1e6a      	subs	r2, r5, #1
 800f6b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6b8:	4543      	cmp	r3, r8
 800f6ba:	d006      	beq.n	800f6ca <__ieee754_rem_pio2+0x1a2>
 800f6bc:	4632      	mov	r2, r6
 800f6be:	463b      	mov	r3, r7
 800f6c0:	4650      	mov	r0, sl
 800f6c2:	4659      	mov	r1, fp
 800f6c4:	f7f0 fde0 	bl	8000288 <__aeabi_dsub>
 800f6c8:	e00e      	b.n	800f6e8 <__ieee754_rem_pio2+0x1c0>
 800f6ca:	463b      	mov	r3, r7
 800f6cc:	4632      	mov	r2, r6
 800f6ce:	4650      	mov	r0, sl
 800f6d0:	4659      	mov	r1, fp
 800f6d2:	f7f0 fdd9 	bl	8000288 <__aeabi_dsub>
 800f6d6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f6da:	9305      	str	r3, [sp, #20]
 800f6dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f6e0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800f6e4:	2b10      	cmp	r3, #16
 800f6e6:	dc02      	bgt.n	800f6ee <__ieee754_rem_pio2+0x1c6>
 800f6e8:	e9c4 0100 	strd	r0, r1, [r4]
 800f6ec:	e039      	b.n	800f762 <__ieee754_rem_pio2+0x23a>
 800f6ee:	a34c      	add	r3, pc, #304	@ (adr r3, 800f820 <__ieee754_rem_pio2+0x2f8>)
 800f6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6f8:	f7f0 ff7e 	bl	80005f8 <__aeabi_dmul>
 800f6fc:	4606      	mov	r6, r0
 800f6fe:	460f      	mov	r7, r1
 800f700:	4602      	mov	r2, r0
 800f702:	460b      	mov	r3, r1
 800f704:	4650      	mov	r0, sl
 800f706:	4659      	mov	r1, fp
 800f708:	f7f0 fdbe 	bl	8000288 <__aeabi_dsub>
 800f70c:	4602      	mov	r2, r0
 800f70e:	460b      	mov	r3, r1
 800f710:	4680      	mov	r8, r0
 800f712:	4689      	mov	r9, r1
 800f714:	4650      	mov	r0, sl
 800f716:	4659      	mov	r1, fp
 800f718:	f7f0 fdb6 	bl	8000288 <__aeabi_dsub>
 800f71c:	4632      	mov	r2, r6
 800f71e:	463b      	mov	r3, r7
 800f720:	f7f0 fdb2 	bl	8000288 <__aeabi_dsub>
 800f724:	a340      	add	r3, pc, #256	@ (adr r3, 800f828 <__ieee754_rem_pio2+0x300>)
 800f726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f72a:	4606      	mov	r6, r0
 800f72c:	460f      	mov	r7, r1
 800f72e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f732:	f7f0 ff61 	bl	80005f8 <__aeabi_dmul>
 800f736:	4632      	mov	r2, r6
 800f738:	463b      	mov	r3, r7
 800f73a:	f7f0 fda5 	bl	8000288 <__aeabi_dsub>
 800f73e:	4602      	mov	r2, r0
 800f740:	460b      	mov	r3, r1
 800f742:	4606      	mov	r6, r0
 800f744:	460f      	mov	r7, r1
 800f746:	4640      	mov	r0, r8
 800f748:	4649      	mov	r1, r9
 800f74a:	f7f0 fd9d 	bl	8000288 <__aeabi_dsub>
 800f74e:	9a05      	ldr	r2, [sp, #20]
 800f750:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f754:	1ad3      	subs	r3, r2, r3
 800f756:	2b31      	cmp	r3, #49	@ 0x31
 800f758:	dc20      	bgt.n	800f79c <__ieee754_rem_pio2+0x274>
 800f75a:	e9c4 0100 	strd	r0, r1, [r4]
 800f75e:	46c2      	mov	sl, r8
 800f760:	46cb      	mov	fp, r9
 800f762:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f766:	4650      	mov	r0, sl
 800f768:	4642      	mov	r2, r8
 800f76a:	464b      	mov	r3, r9
 800f76c:	4659      	mov	r1, fp
 800f76e:	f7f0 fd8b 	bl	8000288 <__aeabi_dsub>
 800f772:	463b      	mov	r3, r7
 800f774:	4632      	mov	r2, r6
 800f776:	f7f0 fd87 	bl	8000288 <__aeabi_dsub>
 800f77a:	9b04      	ldr	r3, [sp, #16]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f782:	f6bf af0e 	bge.w	800f5a2 <__ieee754_rem_pio2+0x7a>
 800f786:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800f78a:	6063      	str	r3, [r4, #4]
 800f78c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f790:	f8c4 8000 	str.w	r8, [r4]
 800f794:	60a0      	str	r0, [r4, #8]
 800f796:	60e3      	str	r3, [r4, #12]
 800f798:	426d      	negs	r5, r5
 800f79a:	e702      	b.n	800f5a2 <__ieee754_rem_pio2+0x7a>
 800f79c:	a326      	add	r3, pc, #152	@ (adr r3, 800f838 <__ieee754_rem_pio2+0x310>)
 800f79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f7a6:	f7f0 ff27 	bl	80005f8 <__aeabi_dmul>
 800f7aa:	4606      	mov	r6, r0
 800f7ac:	460f      	mov	r7, r1
 800f7ae:	4602      	mov	r2, r0
 800f7b0:	460b      	mov	r3, r1
 800f7b2:	4640      	mov	r0, r8
 800f7b4:	4649      	mov	r1, r9
 800f7b6:	f7f0 fd67 	bl	8000288 <__aeabi_dsub>
 800f7ba:	4602      	mov	r2, r0
 800f7bc:	460b      	mov	r3, r1
 800f7be:	4682      	mov	sl, r0
 800f7c0:	468b      	mov	fp, r1
 800f7c2:	4640      	mov	r0, r8
 800f7c4:	4649      	mov	r1, r9
 800f7c6:	f7f0 fd5f 	bl	8000288 <__aeabi_dsub>
 800f7ca:	4632      	mov	r2, r6
 800f7cc:	463b      	mov	r3, r7
 800f7ce:	f7f0 fd5b 	bl	8000288 <__aeabi_dsub>
 800f7d2:	a31b      	add	r3, pc, #108	@ (adr r3, 800f840 <__ieee754_rem_pio2+0x318>)
 800f7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d8:	4606      	mov	r6, r0
 800f7da:	460f      	mov	r7, r1
 800f7dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f7e0:	f7f0 ff0a 	bl	80005f8 <__aeabi_dmul>
 800f7e4:	4632      	mov	r2, r6
 800f7e6:	463b      	mov	r3, r7
 800f7e8:	f7f0 fd4e 	bl	8000288 <__aeabi_dsub>
 800f7ec:	4606      	mov	r6, r0
 800f7ee:	460f      	mov	r7, r1
 800f7f0:	e764      	b.n	800f6bc <__ieee754_rem_pio2+0x194>
 800f7f2:	4b1b      	ldr	r3, [pc, #108]	@ (800f860 <__ieee754_rem_pio2+0x338>)
 800f7f4:	4598      	cmp	r8, r3
 800f7f6:	d935      	bls.n	800f864 <__ieee754_rem_pio2+0x33c>
 800f7f8:	4632      	mov	r2, r6
 800f7fa:	463b      	mov	r3, r7
 800f7fc:	4630      	mov	r0, r6
 800f7fe:	4639      	mov	r1, r7
 800f800:	f7f0 fd42 	bl	8000288 <__aeabi_dsub>
 800f804:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f808:	e9c4 0100 	strd	r0, r1, [r4]
 800f80c:	e69e      	b.n	800f54c <__ieee754_rem_pio2+0x24>
 800f80e:	bf00      	nop
 800f810:	54400000 	.word	0x54400000
 800f814:	3ff921fb 	.word	0x3ff921fb
 800f818:	1a626331 	.word	0x1a626331
 800f81c:	3dd0b461 	.word	0x3dd0b461
 800f820:	1a600000 	.word	0x1a600000
 800f824:	3dd0b461 	.word	0x3dd0b461
 800f828:	2e037073 	.word	0x2e037073
 800f82c:	3ba3198a 	.word	0x3ba3198a
 800f830:	6dc9c883 	.word	0x6dc9c883
 800f834:	3fe45f30 	.word	0x3fe45f30
 800f838:	2e000000 	.word	0x2e000000
 800f83c:	3ba3198a 	.word	0x3ba3198a
 800f840:	252049c1 	.word	0x252049c1
 800f844:	397b839a 	.word	0x397b839a
 800f848:	3fe921fb 	.word	0x3fe921fb
 800f84c:	4002d97b 	.word	0x4002d97b
 800f850:	3ff921fb 	.word	0x3ff921fb
 800f854:	413921fb 	.word	0x413921fb
 800f858:	3fe00000 	.word	0x3fe00000
 800f85c:	08012d18 	.word	0x08012d18
 800f860:	7fefffff 	.word	0x7fefffff
 800f864:	ea4f 5528 	mov.w	r5, r8, asr #20
 800f868:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800f86c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800f870:	4630      	mov	r0, r6
 800f872:	460f      	mov	r7, r1
 800f874:	f7f1 f970 	bl	8000b58 <__aeabi_d2iz>
 800f878:	f7f0 fe54 	bl	8000524 <__aeabi_i2d>
 800f87c:	4602      	mov	r2, r0
 800f87e:	460b      	mov	r3, r1
 800f880:	4630      	mov	r0, r6
 800f882:	4639      	mov	r1, r7
 800f884:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f888:	f7f0 fcfe 	bl	8000288 <__aeabi_dsub>
 800f88c:	4b22      	ldr	r3, [pc, #136]	@ (800f918 <__ieee754_rem_pio2+0x3f0>)
 800f88e:	2200      	movs	r2, #0
 800f890:	f7f0 feb2 	bl	80005f8 <__aeabi_dmul>
 800f894:	460f      	mov	r7, r1
 800f896:	4606      	mov	r6, r0
 800f898:	f7f1 f95e 	bl	8000b58 <__aeabi_d2iz>
 800f89c:	f7f0 fe42 	bl	8000524 <__aeabi_i2d>
 800f8a0:	4602      	mov	r2, r0
 800f8a2:	460b      	mov	r3, r1
 800f8a4:	4630      	mov	r0, r6
 800f8a6:	4639      	mov	r1, r7
 800f8a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f8ac:	f7f0 fcec 	bl	8000288 <__aeabi_dsub>
 800f8b0:	4b19      	ldr	r3, [pc, #100]	@ (800f918 <__ieee754_rem_pio2+0x3f0>)
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	f7f0 fea0 	bl	80005f8 <__aeabi_dmul>
 800f8b8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800f8bc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800f8c0:	f04f 0803 	mov.w	r8, #3
 800f8c4:	2600      	movs	r6, #0
 800f8c6:	2700      	movs	r7, #0
 800f8c8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800f8cc:	4632      	mov	r2, r6
 800f8ce:	463b      	mov	r3, r7
 800f8d0:	46c2      	mov	sl, r8
 800f8d2:	f108 38ff 	add.w	r8, r8, #4294967295
 800f8d6:	f7f1 f8f7 	bl	8000ac8 <__aeabi_dcmpeq>
 800f8da:	2800      	cmp	r0, #0
 800f8dc:	d1f4      	bne.n	800f8c8 <__ieee754_rem_pio2+0x3a0>
 800f8de:	4b0f      	ldr	r3, [pc, #60]	@ (800f91c <__ieee754_rem_pio2+0x3f4>)
 800f8e0:	9301      	str	r3, [sp, #4]
 800f8e2:	2302      	movs	r3, #2
 800f8e4:	9300      	str	r3, [sp, #0]
 800f8e6:	462a      	mov	r2, r5
 800f8e8:	4653      	mov	r3, sl
 800f8ea:	4621      	mov	r1, r4
 800f8ec:	a806      	add	r0, sp, #24
 800f8ee:	f000 fa37 	bl	800fd60 <__kernel_rem_pio2>
 800f8f2:	9b04      	ldr	r3, [sp, #16]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	4605      	mov	r5, r0
 800f8f8:	f6bf ae53 	bge.w	800f5a2 <__ieee754_rem_pio2+0x7a>
 800f8fc:	e9d4 2100 	ldrd	r2, r1, [r4]
 800f900:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f904:	e9c4 2300 	strd	r2, r3, [r4]
 800f908:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800f90c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f910:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800f914:	e740      	b.n	800f798 <__ieee754_rem_pio2+0x270>
 800f916:	bf00      	nop
 800f918:	41700000 	.word	0x41700000
 800f91c:	08012d98 	.word	0x08012d98

0800f920 <atan>:
 800f920:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f924:	ec55 4b10 	vmov	r4, r5, d0
 800f928:	4bbf      	ldr	r3, [pc, #764]	@ (800fc28 <atan+0x308>)
 800f92a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800f92e:	429e      	cmp	r6, r3
 800f930:	46ab      	mov	fp, r5
 800f932:	d918      	bls.n	800f966 <atan+0x46>
 800f934:	4bbd      	ldr	r3, [pc, #756]	@ (800fc2c <atan+0x30c>)
 800f936:	429e      	cmp	r6, r3
 800f938:	d801      	bhi.n	800f93e <atan+0x1e>
 800f93a:	d109      	bne.n	800f950 <atan+0x30>
 800f93c:	b144      	cbz	r4, 800f950 <atan+0x30>
 800f93e:	4622      	mov	r2, r4
 800f940:	462b      	mov	r3, r5
 800f942:	4620      	mov	r0, r4
 800f944:	4629      	mov	r1, r5
 800f946:	f7f0 fca1 	bl	800028c <__adddf3>
 800f94a:	4604      	mov	r4, r0
 800f94c:	460d      	mov	r5, r1
 800f94e:	e006      	b.n	800f95e <atan+0x3e>
 800f950:	f1bb 0f00 	cmp.w	fp, #0
 800f954:	f340 812b 	ble.w	800fbae <atan+0x28e>
 800f958:	a597      	add	r5, pc, #604	@ (adr r5, 800fbb8 <atan+0x298>)
 800f95a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f95e:	ec45 4b10 	vmov	d0, r4, r5
 800f962:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f966:	4bb2      	ldr	r3, [pc, #712]	@ (800fc30 <atan+0x310>)
 800f968:	429e      	cmp	r6, r3
 800f96a:	d813      	bhi.n	800f994 <atan+0x74>
 800f96c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800f970:	429e      	cmp	r6, r3
 800f972:	d80c      	bhi.n	800f98e <atan+0x6e>
 800f974:	a392      	add	r3, pc, #584	@ (adr r3, 800fbc0 <atan+0x2a0>)
 800f976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f97a:	4620      	mov	r0, r4
 800f97c:	4629      	mov	r1, r5
 800f97e:	f7f0 fc85 	bl	800028c <__adddf3>
 800f982:	4bac      	ldr	r3, [pc, #688]	@ (800fc34 <atan+0x314>)
 800f984:	2200      	movs	r2, #0
 800f986:	f7f1 f8c7 	bl	8000b18 <__aeabi_dcmpgt>
 800f98a:	2800      	cmp	r0, #0
 800f98c:	d1e7      	bne.n	800f95e <atan+0x3e>
 800f98e:	f04f 3aff 	mov.w	sl, #4294967295
 800f992:	e029      	b.n	800f9e8 <atan+0xc8>
 800f994:	f000 f95c 	bl	800fc50 <fabs>
 800f998:	4ba7      	ldr	r3, [pc, #668]	@ (800fc38 <atan+0x318>)
 800f99a:	429e      	cmp	r6, r3
 800f99c:	ec55 4b10 	vmov	r4, r5, d0
 800f9a0:	f200 80bc 	bhi.w	800fb1c <atan+0x1fc>
 800f9a4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800f9a8:	429e      	cmp	r6, r3
 800f9aa:	f200 809e 	bhi.w	800faea <atan+0x1ca>
 800f9ae:	4622      	mov	r2, r4
 800f9b0:	462b      	mov	r3, r5
 800f9b2:	4620      	mov	r0, r4
 800f9b4:	4629      	mov	r1, r5
 800f9b6:	f7f0 fc69 	bl	800028c <__adddf3>
 800f9ba:	4b9e      	ldr	r3, [pc, #632]	@ (800fc34 <atan+0x314>)
 800f9bc:	2200      	movs	r2, #0
 800f9be:	f7f0 fc63 	bl	8000288 <__aeabi_dsub>
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	4606      	mov	r6, r0
 800f9c6:	460f      	mov	r7, r1
 800f9c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f9cc:	4620      	mov	r0, r4
 800f9ce:	4629      	mov	r1, r5
 800f9d0:	f7f0 fc5c 	bl	800028c <__adddf3>
 800f9d4:	4602      	mov	r2, r0
 800f9d6:	460b      	mov	r3, r1
 800f9d8:	4630      	mov	r0, r6
 800f9da:	4639      	mov	r1, r7
 800f9dc:	f7f0 ff36 	bl	800084c <__aeabi_ddiv>
 800f9e0:	f04f 0a00 	mov.w	sl, #0
 800f9e4:	4604      	mov	r4, r0
 800f9e6:	460d      	mov	r5, r1
 800f9e8:	4622      	mov	r2, r4
 800f9ea:	462b      	mov	r3, r5
 800f9ec:	4620      	mov	r0, r4
 800f9ee:	4629      	mov	r1, r5
 800f9f0:	f7f0 fe02 	bl	80005f8 <__aeabi_dmul>
 800f9f4:	4602      	mov	r2, r0
 800f9f6:	460b      	mov	r3, r1
 800f9f8:	4680      	mov	r8, r0
 800f9fa:	4689      	mov	r9, r1
 800f9fc:	f7f0 fdfc 	bl	80005f8 <__aeabi_dmul>
 800fa00:	a371      	add	r3, pc, #452	@ (adr r3, 800fbc8 <atan+0x2a8>)
 800fa02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa06:	4606      	mov	r6, r0
 800fa08:	460f      	mov	r7, r1
 800fa0a:	f7f0 fdf5 	bl	80005f8 <__aeabi_dmul>
 800fa0e:	a370      	add	r3, pc, #448	@ (adr r3, 800fbd0 <atan+0x2b0>)
 800fa10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa14:	f7f0 fc3a 	bl	800028c <__adddf3>
 800fa18:	4632      	mov	r2, r6
 800fa1a:	463b      	mov	r3, r7
 800fa1c:	f7f0 fdec 	bl	80005f8 <__aeabi_dmul>
 800fa20:	a36d      	add	r3, pc, #436	@ (adr r3, 800fbd8 <atan+0x2b8>)
 800fa22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa26:	f7f0 fc31 	bl	800028c <__adddf3>
 800fa2a:	4632      	mov	r2, r6
 800fa2c:	463b      	mov	r3, r7
 800fa2e:	f7f0 fde3 	bl	80005f8 <__aeabi_dmul>
 800fa32:	a36b      	add	r3, pc, #428	@ (adr r3, 800fbe0 <atan+0x2c0>)
 800fa34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa38:	f7f0 fc28 	bl	800028c <__adddf3>
 800fa3c:	4632      	mov	r2, r6
 800fa3e:	463b      	mov	r3, r7
 800fa40:	f7f0 fdda 	bl	80005f8 <__aeabi_dmul>
 800fa44:	a368      	add	r3, pc, #416	@ (adr r3, 800fbe8 <atan+0x2c8>)
 800fa46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa4a:	f7f0 fc1f 	bl	800028c <__adddf3>
 800fa4e:	4632      	mov	r2, r6
 800fa50:	463b      	mov	r3, r7
 800fa52:	f7f0 fdd1 	bl	80005f8 <__aeabi_dmul>
 800fa56:	a366      	add	r3, pc, #408	@ (adr r3, 800fbf0 <atan+0x2d0>)
 800fa58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa5c:	f7f0 fc16 	bl	800028c <__adddf3>
 800fa60:	4642      	mov	r2, r8
 800fa62:	464b      	mov	r3, r9
 800fa64:	f7f0 fdc8 	bl	80005f8 <__aeabi_dmul>
 800fa68:	a363      	add	r3, pc, #396	@ (adr r3, 800fbf8 <atan+0x2d8>)
 800fa6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa6e:	4680      	mov	r8, r0
 800fa70:	4689      	mov	r9, r1
 800fa72:	4630      	mov	r0, r6
 800fa74:	4639      	mov	r1, r7
 800fa76:	f7f0 fdbf 	bl	80005f8 <__aeabi_dmul>
 800fa7a:	a361      	add	r3, pc, #388	@ (adr r3, 800fc00 <atan+0x2e0>)
 800fa7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa80:	f7f0 fc02 	bl	8000288 <__aeabi_dsub>
 800fa84:	4632      	mov	r2, r6
 800fa86:	463b      	mov	r3, r7
 800fa88:	f7f0 fdb6 	bl	80005f8 <__aeabi_dmul>
 800fa8c:	a35e      	add	r3, pc, #376	@ (adr r3, 800fc08 <atan+0x2e8>)
 800fa8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa92:	f7f0 fbf9 	bl	8000288 <__aeabi_dsub>
 800fa96:	4632      	mov	r2, r6
 800fa98:	463b      	mov	r3, r7
 800fa9a:	f7f0 fdad 	bl	80005f8 <__aeabi_dmul>
 800fa9e:	a35c      	add	r3, pc, #368	@ (adr r3, 800fc10 <atan+0x2f0>)
 800faa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faa4:	f7f0 fbf0 	bl	8000288 <__aeabi_dsub>
 800faa8:	4632      	mov	r2, r6
 800faaa:	463b      	mov	r3, r7
 800faac:	f7f0 fda4 	bl	80005f8 <__aeabi_dmul>
 800fab0:	a359      	add	r3, pc, #356	@ (adr r3, 800fc18 <atan+0x2f8>)
 800fab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab6:	f7f0 fbe7 	bl	8000288 <__aeabi_dsub>
 800faba:	4632      	mov	r2, r6
 800fabc:	463b      	mov	r3, r7
 800fabe:	f7f0 fd9b 	bl	80005f8 <__aeabi_dmul>
 800fac2:	4602      	mov	r2, r0
 800fac4:	460b      	mov	r3, r1
 800fac6:	4640      	mov	r0, r8
 800fac8:	4649      	mov	r1, r9
 800faca:	f7f0 fbdf 	bl	800028c <__adddf3>
 800face:	4622      	mov	r2, r4
 800fad0:	462b      	mov	r3, r5
 800fad2:	f7f0 fd91 	bl	80005f8 <__aeabi_dmul>
 800fad6:	f1ba 3fff 	cmp.w	sl, #4294967295
 800fada:	4602      	mov	r2, r0
 800fadc:	460b      	mov	r3, r1
 800fade:	d148      	bne.n	800fb72 <atan+0x252>
 800fae0:	4620      	mov	r0, r4
 800fae2:	4629      	mov	r1, r5
 800fae4:	f7f0 fbd0 	bl	8000288 <__aeabi_dsub>
 800fae8:	e72f      	b.n	800f94a <atan+0x2a>
 800faea:	4b52      	ldr	r3, [pc, #328]	@ (800fc34 <atan+0x314>)
 800faec:	2200      	movs	r2, #0
 800faee:	4620      	mov	r0, r4
 800faf0:	4629      	mov	r1, r5
 800faf2:	f7f0 fbc9 	bl	8000288 <__aeabi_dsub>
 800faf6:	4b4f      	ldr	r3, [pc, #316]	@ (800fc34 <atan+0x314>)
 800faf8:	4606      	mov	r6, r0
 800fafa:	460f      	mov	r7, r1
 800fafc:	2200      	movs	r2, #0
 800fafe:	4620      	mov	r0, r4
 800fb00:	4629      	mov	r1, r5
 800fb02:	f7f0 fbc3 	bl	800028c <__adddf3>
 800fb06:	4602      	mov	r2, r0
 800fb08:	460b      	mov	r3, r1
 800fb0a:	4630      	mov	r0, r6
 800fb0c:	4639      	mov	r1, r7
 800fb0e:	f7f0 fe9d 	bl	800084c <__aeabi_ddiv>
 800fb12:	f04f 0a01 	mov.w	sl, #1
 800fb16:	4604      	mov	r4, r0
 800fb18:	460d      	mov	r5, r1
 800fb1a:	e765      	b.n	800f9e8 <atan+0xc8>
 800fb1c:	4b47      	ldr	r3, [pc, #284]	@ (800fc3c <atan+0x31c>)
 800fb1e:	429e      	cmp	r6, r3
 800fb20:	d21c      	bcs.n	800fb5c <atan+0x23c>
 800fb22:	4b47      	ldr	r3, [pc, #284]	@ (800fc40 <atan+0x320>)
 800fb24:	2200      	movs	r2, #0
 800fb26:	4620      	mov	r0, r4
 800fb28:	4629      	mov	r1, r5
 800fb2a:	f7f0 fbad 	bl	8000288 <__aeabi_dsub>
 800fb2e:	4b44      	ldr	r3, [pc, #272]	@ (800fc40 <atan+0x320>)
 800fb30:	4606      	mov	r6, r0
 800fb32:	460f      	mov	r7, r1
 800fb34:	2200      	movs	r2, #0
 800fb36:	4620      	mov	r0, r4
 800fb38:	4629      	mov	r1, r5
 800fb3a:	f7f0 fd5d 	bl	80005f8 <__aeabi_dmul>
 800fb3e:	4b3d      	ldr	r3, [pc, #244]	@ (800fc34 <atan+0x314>)
 800fb40:	2200      	movs	r2, #0
 800fb42:	f7f0 fba3 	bl	800028c <__adddf3>
 800fb46:	4602      	mov	r2, r0
 800fb48:	460b      	mov	r3, r1
 800fb4a:	4630      	mov	r0, r6
 800fb4c:	4639      	mov	r1, r7
 800fb4e:	f7f0 fe7d 	bl	800084c <__aeabi_ddiv>
 800fb52:	f04f 0a02 	mov.w	sl, #2
 800fb56:	4604      	mov	r4, r0
 800fb58:	460d      	mov	r5, r1
 800fb5a:	e745      	b.n	800f9e8 <atan+0xc8>
 800fb5c:	4622      	mov	r2, r4
 800fb5e:	462b      	mov	r3, r5
 800fb60:	4938      	ldr	r1, [pc, #224]	@ (800fc44 <atan+0x324>)
 800fb62:	2000      	movs	r0, #0
 800fb64:	f7f0 fe72 	bl	800084c <__aeabi_ddiv>
 800fb68:	f04f 0a03 	mov.w	sl, #3
 800fb6c:	4604      	mov	r4, r0
 800fb6e:	460d      	mov	r5, r1
 800fb70:	e73a      	b.n	800f9e8 <atan+0xc8>
 800fb72:	4b35      	ldr	r3, [pc, #212]	@ (800fc48 <atan+0x328>)
 800fb74:	4e35      	ldr	r6, [pc, #212]	@ (800fc4c <atan+0x32c>)
 800fb76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb7e:	f7f0 fb83 	bl	8000288 <__aeabi_dsub>
 800fb82:	4622      	mov	r2, r4
 800fb84:	462b      	mov	r3, r5
 800fb86:	f7f0 fb7f 	bl	8000288 <__aeabi_dsub>
 800fb8a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800fb8e:	4602      	mov	r2, r0
 800fb90:	460b      	mov	r3, r1
 800fb92:	e9d6 0100 	ldrd	r0, r1, [r6]
 800fb96:	f7f0 fb77 	bl	8000288 <__aeabi_dsub>
 800fb9a:	f1bb 0f00 	cmp.w	fp, #0
 800fb9e:	4604      	mov	r4, r0
 800fba0:	460d      	mov	r5, r1
 800fba2:	f6bf aedc 	bge.w	800f95e <atan+0x3e>
 800fba6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fbaa:	461d      	mov	r5, r3
 800fbac:	e6d7      	b.n	800f95e <atan+0x3e>
 800fbae:	a51c      	add	r5, pc, #112	@ (adr r5, 800fc20 <atan+0x300>)
 800fbb0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fbb4:	e6d3      	b.n	800f95e <atan+0x3e>
 800fbb6:	bf00      	nop
 800fbb8:	54442d18 	.word	0x54442d18
 800fbbc:	3ff921fb 	.word	0x3ff921fb
 800fbc0:	8800759c 	.word	0x8800759c
 800fbc4:	7e37e43c 	.word	0x7e37e43c
 800fbc8:	e322da11 	.word	0xe322da11
 800fbcc:	3f90ad3a 	.word	0x3f90ad3a
 800fbd0:	24760deb 	.word	0x24760deb
 800fbd4:	3fa97b4b 	.word	0x3fa97b4b
 800fbd8:	a0d03d51 	.word	0xa0d03d51
 800fbdc:	3fb10d66 	.word	0x3fb10d66
 800fbe0:	c54c206e 	.word	0xc54c206e
 800fbe4:	3fb745cd 	.word	0x3fb745cd
 800fbe8:	920083ff 	.word	0x920083ff
 800fbec:	3fc24924 	.word	0x3fc24924
 800fbf0:	5555550d 	.word	0x5555550d
 800fbf4:	3fd55555 	.word	0x3fd55555
 800fbf8:	2c6a6c2f 	.word	0x2c6a6c2f
 800fbfc:	bfa2b444 	.word	0xbfa2b444
 800fc00:	52defd9a 	.word	0x52defd9a
 800fc04:	3fadde2d 	.word	0x3fadde2d
 800fc08:	af749a6d 	.word	0xaf749a6d
 800fc0c:	3fb3b0f2 	.word	0x3fb3b0f2
 800fc10:	fe231671 	.word	0xfe231671
 800fc14:	3fbc71c6 	.word	0x3fbc71c6
 800fc18:	9998ebc4 	.word	0x9998ebc4
 800fc1c:	3fc99999 	.word	0x3fc99999
 800fc20:	54442d18 	.word	0x54442d18
 800fc24:	bff921fb 	.word	0xbff921fb
 800fc28:	440fffff 	.word	0x440fffff
 800fc2c:	7ff00000 	.word	0x7ff00000
 800fc30:	3fdbffff 	.word	0x3fdbffff
 800fc34:	3ff00000 	.word	0x3ff00000
 800fc38:	3ff2ffff 	.word	0x3ff2ffff
 800fc3c:	40038000 	.word	0x40038000
 800fc40:	3ff80000 	.word	0x3ff80000
 800fc44:	bff00000 	.word	0xbff00000
 800fc48:	08012ea0 	.word	0x08012ea0
 800fc4c:	08012ec0 	.word	0x08012ec0

0800fc50 <fabs>:
 800fc50:	ec51 0b10 	vmov	r0, r1, d0
 800fc54:	4602      	mov	r2, r0
 800fc56:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fc5a:	ec43 2b10 	vmov	d0, r2, r3
 800fc5e:	4770      	bx	lr

0800fc60 <scalbn>:
 800fc60:	b570      	push	{r4, r5, r6, lr}
 800fc62:	ec55 4b10 	vmov	r4, r5, d0
 800fc66:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800fc6a:	4606      	mov	r6, r0
 800fc6c:	462b      	mov	r3, r5
 800fc6e:	b991      	cbnz	r1, 800fc96 <scalbn+0x36>
 800fc70:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800fc74:	4323      	orrs	r3, r4
 800fc76:	d03d      	beq.n	800fcf4 <scalbn+0x94>
 800fc78:	4b35      	ldr	r3, [pc, #212]	@ (800fd50 <scalbn+0xf0>)
 800fc7a:	4620      	mov	r0, r4
 800fc7c:	4629      	mov	r1, r5
 800fc7e:	2200      	movs	r2, #0
 800fc80:	f7f0 fcba 	bl	80005f8 <__aeabi_dmul>
 800fc84:	4b33      	ldr	r3, [pc, #204]	@ (800fd54 <scalbn+0xf4>)
 800fc86:	429e      	cmp	r6, r3
 800fc88:	4604      	mov	r4, r0
 800fc8a:	460d      	mov	r5, r1
 800fc8c:	da0f      	bge.n	800fcae <scalbn+0x4e>
 800fc8e:	a328      	add	r3, pc, #160	@ (adr r3, 800fd30 <scalbn+0xd0>)
 800fc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc94:	e01e      	b.n	800fcd4 <scalbn+0x74>
 800fc96:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800fc9a:	4291      	cmp	r1, r2
 800fc9c:	d10b      	bne.n	800fcb6 <scalbn+0x56>
 800fc9e:	4622      	mov	r2, r4
 800fca0:	4620      	mov	r0, r4
 800fca2:	4629      	mov	r1, r5
 800fca4:	f7f0 faf2 	bl	800028c <__adddf3>
 800fca8:	4604      	mov	r4, r0
 800fcaa:	460d      	mov	r5, r1
 800fcac:	e022      	b.n	800fcf4 <scalbn+0x94>
 800fcae:	460b      	mov	r3, r1
 800fcb0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800fcb4:	3936      	subs	r1, #54	@ 0x36
 800fcb6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800fcba:	4296      	cmp	r6, r2
 800fcbc:	dd0d      	ble.n	800fcda <scalbn+0x7a>
 800fcbe:	2d00      	cmp	r5, #0
 800fcc0:	a11d      	add	r1, pc, #116	@ (adr r1, 800fd38 <scalbn+0xd8>)
 800fcc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fcc6:	da02      	bge.n	800fcce <scalbn+0x6e>
 800fcc8:	a11d      	add	r1, pc, #116	@ (adr r1, 800fd40 <scalbn+0xe0>)
 800fcca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fcce:	a31a      	add	r3, pc, #104	@ (adr r3, 800fd38 <scalbn+0xd8>)
 800fcd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd4:	f7f0 fc90 	bl	80005f8 <__aeabi_dmul>
 800fcd8:	e7e6      	b.n	800fca8 <scalbn+0x48>
 800fcda:	1872      	adds	r2, r6, r1
 800fcdc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800fce0:	428a      	cmp	r2, r1
 800fce2:	dcec      	bgt.n	800fcbe <scalbn+0x5e>
 800fce4:	2a00      	cmp	r2, #0
 800fce6:	dd08      	ble.n	800fcfa <scalbn+0x9a>
 800fce8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fcec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800fcf0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fcf4:	ec45 4b10 	vmov	d0, r4, r5
 800fcf8:	bd70      	pop	{r4, r5, r6, pc}
 800fcfa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800fcfe:	da08      	bge.n	800fd12 <scalbn+0xb2>
 800fd00:	2d00      	cmp	r5, #0
 800fd02:	a10b      	add	r1, pc, #44	@ (adr r1, 800fd30 <scalbn+0xd0>)
 800fd04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd08:	dac1      	bge.n	800fc8e <scalbn+0x2e>
 800fd0a:	a10f      	add	r1, pc, #60	@ (adr r1, 800fd48 <scalbn+0xe8>)
 800fd0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd10:	e7bd      	b.n	800fc8e <scalbn+0x2e>
 800fd12:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fd16:	3236      	adds	r2, #54	@ 0x36
 800fd18:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800fd1c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fd20:	4620      	mov	r0, r4
 800fd22:	4b0d      	ldr	r3, [pc, #52]	@ (800fd58 <scalbn+0xf8>)
 800fd24:	4629      	mov	r1, r5
 800fd26:	2200      	movs	r2, #0
 800fd28:	e7d4      	b.n	800fcd4 <scalbn+0x74>
 800fd2a:	bf00      	nop
 800fd2c:	f3af 8000 	nop.w
 800fd30:	c2f8f359 	.word	0xc2f8f359
 800fd34:	01a56e1f 	.word	0x01a56e1f
 800fd38:	8800759c 	.word	0x8800759c
 800fd3c:	7e37e43c 	.word	0x7e37e43c
 800fd40:	8800759c 	.word	0x8800759c
 800fd44:	fe37e43c 	.word	0xfe37e43c
 800fd48:	c2f8f359 	.word	0xc2f8f359
 800fd4c:	81a56e1f 	.word	0x81a56e1f
 800fd50:	43500000 	.word	0x43500000
 800fd54:	ffff3cb0 	.word	0xffff3cb0
 800fd58:	3c900000 	.word	0x3c900000
 800fd5c:	00000000 	.word	0x00000000

0800fd60 <__kernel_rem_pio2>:
 800fd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd64:	ed2d 8b02 	vpush	{d8}
 800fd68:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800fd6c:	f112 0f14 	cmn.w	r2, #20
 800fd70:	9306      	str	r3, [sp, #24]
 800fd72:	9104      	str	r1, [sp, #16]
 800fd74:	4bbe      	ldr	r3, [pc, #760]	@ (8010070 <__kernel_rem_pio2+0x310>)
 800fd76:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800fd78:	9008      	str	r0, [sp, #32]
 800fd7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fd7e:	9300      	str	r3, [sp, #0]
 800fd80:	9b06      	ldr	r3, [sp, #24]
 800fd82:	f103 33ff 	add.w	r3, r3, #4294967295
 800fd86:	bfa8      	it	ge
 800fd88:	1ed4      	subge	r4, r2, #3
 800fd8a:	9305      	str	r3, [sp, #20]
 800fd8c:	bfb2      	itee	lt
 800fd8e:	2400      	movlt	r4, #0
 800fd90:	2318      	movge	r3, #24
 800fd92:	fb94 f4f3 	sdivge	r4, r4, r3
 800fd96:	f06f 0317 	mvn.w	r3, #23
 800fd9a:	fb04 3303 	mla	r3, r4, r3, r3
 800fd9e:	eb03 0b02 	add.w	fp, r3, r2
 800fda2:	9b00      	ldr	r3, [sp, #0]
 800fda4:	9a05      	ldr	r2, [sp, #20]
 800fda6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8010060 <__kernel_rem_pio2+0x300>
 800fdaa:	eb03 0802 	add.w	r8, r3, r2
 800fdae:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800fdb0:	1aa7      	subs	r7, r4, r2
 800fdb2:	ae20      	add	r6, sp, #128	@ 0x80
 800fdb4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800fdb8:	2500      	movs	r5, #0
 800fdba:	4545      	cmp	r5, r8
 800fdbc:	dd13      	ble.n	800fde6 <__kernel_rem_pio2+0x86>
 800fdbe:	9b06      	ldr	r3, [sp, #24]
 800fdc0:	aa20      	add	r2, sp, #128	@ 0x80
 800fdc2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800fdc6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800fdca:	f04f 0800 	mov.w	r8, #0
 800fdce:	9b00      	ldr	r3, [sp, #0]
 800fdd0:	4598      	cmp	r8, r3
 800fdd2:	dc31      	bgt.n	800fe38 <__kernel_rem_pio2+0xd8>
 800fdd4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8010060 <__kernel_rem_pio2+0x300>
 800fdd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fddc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fde0:	462f      	mov	r7, r5
 800fde2:	2600      	movs	r6, #0
 800fde4:	e01b      	b.n	800fe1e <__kernel_rem_pio2+0xbe>
 800fde6:	42ef      	cmn	r7, r5
 800fde8:	d407      	bmi.n	800fdfa <__kernel_rem_pio2+0x9a>
 800fdea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800fdee:	f7f0 fb99 	bl	8000524 <__aeabi_i2d>
 800fdf2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800fdf6:	3501      	adds	r5, #1
 800fdf8:	e7df      	b.n	800fdba <__kernel_rem_pio2+0x5a>
 800fdfa:	ec51 0b18 	vmov	r0, r1, d8
 800fdfe:	e7f8      	b.n	800fdf2 <__kernel_rem_pio2+0x92>
 800fe00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe04:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800fe08:	f7f0 fbf6 	bl	80005f8 <__aeabi_dmul>
 800fe0c:	4602      	mov	r2, r0
 800fe0e:	460b      	mov	r3, r1
 800fe10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe14:	f7f0 fa3a 	bl	800028c <__adddf3>
 800fe18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe1c:	3601      	adds	r6, #1
 800fe1e:	9b05      	ldr	r3, [sp, #20]
 800fe20:	429e      	cmp	r6, r3
 800fe22:	f1a7 0708 	sub.w	r7, r7, #8
 800fe26:	ddeb      	ble.n	800fe00 <__kernel_rem_pio2+0xa0>
 800fe28:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fe2c:	f108 0801 	add.w	r8, r8, #1
 800fe30:	ecaa 7b02 	vstmia	sl!, {d7}
 800fe34:	3508      	adds	r5, #8
 800fe36:	e7ca      	b.n	800fdce <__kernel_rem_pio2+0x6e>
 800fe38:	9b00      	ldr	r3, [sp, #0]
 800fe3a:	f8dd 8000 	ldr.w	r8, [sp]
 800fe3e:	aa0c      	add	r2, sp, #48	@ 0x30
 800fe40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fe44:	930a      	str	r3, [sp, #40]	@ 0x28
 800fe46:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800fe48:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fe4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe4e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800fe52:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fe54:	ab98      	add	r3, sp, #608	@ 0x260
 800fe56:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fe5a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800fe5e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fe62:	ac0c      	add	r4, sp, #48	@ 0x30
 800fe64:	ab70      	add	r3, sp, #448	@ 0x1c0
 800fe66:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800fe6a:	46a1      	mov	r9, r4
 800fe6c:	46c2      	mov	sl, r8
 800fe6e:	f1ba 0f00 	cmp.w	sl, #0
 800fe72:	f1a5 0508 	sub.w	r5, r5, #8
 800fe76:	dc77      	bgt.n	800ff68 <__kernel_rem_pio2+0x208>
 800fe78:	4658      	mov	r0, fp
 800fe7a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800fe7e:	f7ff feef 	bl	800fc60 <scalbn>
 800fe82:	ec57 6b10 	vmov	r6, r7, d0
 800fe86:	2200      	movs	r2, #0
 800fe88:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800fe8c:	4630      	mov	r0, r6
 800fe8e:	4639      	mov	r1, r7
 800fe90:	f7f0 fbb2 	bl	80005f8 <__aeabi_dmul>
 800fe94:	ec41 0b10 	vmov	d0, r0, r1
 800fe98:	f000 faba 	bl	8010410 <floor>
 800fe9c:	4b75      	ldr	r3, [pc, #468]	@ (8010074 <__kernel_rem_pio2+0x314>)
 800fe9e:	ec51 0b10 	vmov	r0, r1, d0
 800fea2:	2200      	movs	r2, #0
 800fea4:	f7f0 fba8 	bl	80005f8 <__aeabi_dmul>
 800fea8:	4602      	mov	r2, r0
 800feaa:	460b      	mov	r3, r1
 800feac:	4630      	mov	r0, r6
 800feae:	4639      	mov	r1, r7
 800feb0:	f7f0 f9ea 	bl	8000288 <__aeabi_dsub>
 800feb4:	460f      	mov	r7, r1
 800feb6:	4606      	mov	r6, r0
 800feb8:	f7f0 fe4e 	bl	8000b58 <__aeabi_d2iz>
 800febc:	9002      	str	r0, [sp, #8]
 800febe:	f7f0 fb31 	bl	8000524 <__aeabi_i2d>
 800fec2:	4602      	mov	r2, r0
 800fec4:	460b      	mov	r3, r1
 800fec6:	4630      	mov	r0, r6
 800fec8:	4639      	mov	r1, r7
 800feca:	f7f0 f9dd 	bl	8000288 <__aeabi_dsub>
 800fece:	f1bb 0f00 	cmp.w	fp, #0
 800fed2:	4606      	mov	r6, r0
 800fed4:	460f      	mov	r7, r1
 800fed6:	dd6c      	ble.n	800ffb2 <__kernel_rem_pio2+0x252>
 800fed8:	f108 31ff 	add.w	r1, r8, #4294967295
 800fedc:	ab0c      	add	r3, sp, #48	@ 0x30
 800fede:	9d02      	ldr	r5, [sp, #8]
 800fee0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fee4:	f1cb 0018 	rsb	r0, fp, #24
 800fee8:	fa43 f200 	asr.w	r2, r3, r0
 800feec:	4415      	add	r5, r2
 800feee:	4082      	lsls	r2, r0
 800fef0:	1a9b      	subs	r3, r3, r2
 800fef2:	aa0c      	add	r2, sp, #48	@ 0x30
 800fef4:	9502      	str	r5, [sp, #8]
 800fef6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800fefa:	f1cb 0217 	rsb	r2, fp, #23
 800fefe:	fa43 f902 	asr.w	r9, r3, r2
 800ff02:	f1b9 0f00 	cmp.w	r9, #0
 800ff06:	dd64      	ble.n	800ffd2 <__kernel_rem_pio2+0x272>
 800ff08:	9b02      	ldr	r3, [sp, #8]
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	3301      	adds	r3, #1
 800ff0e:	9302      	str	r3, [sp, #8]
 800ff10:	4615      	mov	r5, r2
 800ff12:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800ff16:	4590      	cmp	r8, r2
 800ff18:	f300 80b8 	bgt.w	801008c <__kernel_rem_pio2+0x32c>
 800ff1c:	f1bb 0f00 	cmp.w	fp, #0
 800ff20:	dd07      	ble.n	800ff32 <__kernel_rem_pio2+0x1d2>
 800ff22:	f1bb 0f01 	cmp.w	fp, #1
 800ff26:	f000 80bf 	beq.w	80100a8 <__kernel_rem_pio2+0x348>
 800ff2a:	f1bb 0f02 	cmp.w	fp, #2
 800ff2e:	f000 80c6 	beq.w	80100be <__kernel_rem_pio2+0x35e>
 800ff32:	f1b9 0f02 	cmp.w	r9, #2
 800ff36:	d14c      	bne.n	800ffd2 <__kernel_rem_pio2+0x272>
 800ff38:	4632      	mov	r2, r6
 800ff3a:	463b      	mov	r3, r7
 800ff3c:	494e      	ldr	r1, [pc, #312]	@ (8010078 <__kernel_rem_pio2+0x318>)
 800ff3e:	2000      	movs	r0, #0
 800ff40:	f7f0 f9a2 	bl	8000288 <__aeabi_dsub>
 800ff44:	4606      	mov	r6, r0
 800ff46:	460f      	mov	r7, r1
 800ff48:	2d00      	cmp	r5, #0
 800ff4a:	d042      	beq.n	800ffd2 <__kernel_rem_pio2+0x272>
 800ff4c:	4658      	mov	r0, fp
 800ff4e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8010068 <__kernel_rem_pio2+0x308>
 800ff52:	f7ff fe85 	bl	800fc60 <scalbn>
 800ff56:	4630      	mov	r0, r6
 800ff58:	4639      	mov	r1, r7
 800ff5a:	ec53 2b10 	vmov	r2, r3, d0
 800ff5e:	f7f0 f993 	bl	8000288 <__aeabi_dsub>
 800ff62:	4606      	mov	r6, r0
 800ff64:	460f      	mov	r7, r1
 800ff66:	e034      	b.n	800ffd2 <__kernel_rem_pio2+0x272>
 800ff68:	4b44      	ldr	r3, [pc, #272]	@ (801007c <__kernel_rem_pio2+0x31c>)
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff70:	f7f0 fb42 	bl	80005f8 <__aeabi_dmul>
 800ff74:	f7f0 fdf0 	bl	8000b58 <__aeabi_d2iz>
 800ff78:	f7f0 fad4 	bl	8000524 <__aeabi_i2d>
 800ff7c:	4b40      	ldr	r3, [pc, #256]	@ (8010080 <__kernel_rem_pio2+0x320>)
 800ff7e:	2200      	movs	r2, #0
 800ff80:	4606      	mov	r6, r0
 800ff82:	460f      	mov	r7, r1
 800ff84:	f7f0 fb38 	bl	80005f8 <__aeabi_dmul>
 800ff88:	4602      	mov	r2, r0
 800ff8a:	460b      	mov	r3, r1
 800ff8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff90:	f7f0 f97a 	bl	8000288 <__aeabi_dsub>
 800ff94:	f7f0 fde0 	bl	8000b58 <__aeabi_d2iz>
 800ff98:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ff9c:	f849 0b04 	str.w	r0, [r9], #4
 800ffa0:	4639      	mov	r1, r7
 800ffa2:	4630      	mov	r0, r6
 800ffa4:	f7f0 f972 	bl	800028c <__adddf3>
 800ffa8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ffac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ffb0:	e75d      	b.n	800fe6e <__kernel_rem_pio2+0x10e>
 800ffb2:	d107      	bne.n	800ffc4 <__kernel_rem_pio2+0x264>
 800ffb4:	f108 33ff 	add.w	r3, r8, #4294967295
 800ffb8:	aa0c      	add	r2, sp, #48	@ 0x30
 800ffba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffbe:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800ffc2:	e79e      	b.n	800ff02 <__kernel_rem_pio2+0x1a2>
 800ffc4:	4b2f      	ldr	r3, [pc, #188]	@ (8010084 <__kernel_rem_pio2+0x324>)
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	f7f0 fd9c 	bl	8000b04 <__aeabi_dcmpge>
 800ffcc:	2800      	cmp	r0, #0
 800ffce:	d143      	bne.n	8010058 <__kernel_rem_pio2+0x2f8>
 800ffd0:	4681      	mov	r9, r0
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	4630      	mov	r0, r6
 800ffd8:	4639      	mov	r1, r7
 800ffda:	f7f0 fd75 	bl	8000ac8 <__aeabi_dcmpeq>
 800ffde:	2800      	cmp	r0, #0
 800ffe0:	f000 80bf 	beq.w	8010162 <__kernel_rem_pio2+0x402>
 800ffe4:	f108 33ff 	add.w	r3, r8, #4294967295
 800ffe8:	2200      	movs	r2, #0
 800ffea:	9900      	ldr	r1, [sp, #0]
 800ffec:	428b      	cmp	r3, r1
 800ffee:	da6e      	bge.n	80100ce <__kernel_rem_pio2+0x36e>
 800fff0:	2a00      	cmp	r2, #0
 800fff2:	f000 8089 	beq.w	8010108 <__kernel_rem_pio2+0x3a8>
 800fff6:	f108 38ff 	add.w	r8, r8, #4294967295
 800fffa:	ab0c      	add	r3, sp, #48	@ 0x30
 800fffc:	f1ab 0b18 	sub.w	fp, fp, #24
 8010000:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d0f6      	beq.n	800fff6 <__kernel_rem_pio2+0x296>
 8010008:	4658      	mov	r0, fp
 801000a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8010068 <__kernel_rem_pio2+0x308>
 801000e:	f7ff fe27 	bl	800fc60 <scalbn>
 8010012:	f108 0301 	add.w	r3, r8, #1
 8010016:	00da      	lsls	r2, r3, #3
 8010018:	9205      	str	r2, [sp, #20]
 801001a:	ec55 4b10 	vmov	r4, r5, d0
 801001e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8010020:	f8df b058 	ldr.w	fp, [pc, #88]	@ 801007c <__kernel_rem_pio2+0x31c>
 8010024:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8010028:	4646      	mov	r6, r8
 801002a:	f04f 0a00 	mov.w	sl, #0
 801002e:	2e00      	cmp	r6, #0
 8010030:	f280 80cf 	bge.w	80101d2 <__kernel_rem_pio2+0x472>
 8010034:	4644      	mov	r4, r8
 8010036:	2c00      	cmp	r4, #0
 8010038:	f2c0 80fd 	blt.w	8010236 <__kernel_rem_pio2+0x4d6>
 801003c:	4b12      	ldr	r3, [pc, #72]	@ (8010088 <__kernel_rem_pio2+0x328>)
 801003e:	461f      	mov	r7, r3
 8010040:	ab70      	add	r3, sp, #448	@ 0x1c0
 8010042:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010046:	9306      	str	r3, [sp, #24]
 8010048:	f04f 0a00 	mov.w	sl, #0
 801004c:	f04f 0b00 	mov.w	fp, #0
 8010050:	2600      	movs	r6, #0
 8010052:	eba8 0504 	sub.w	r5, r8, r4
 8010056:	e0e2      	b.n	801021e <__kernel_rem_pio2+0x4be>
 8010058:	f04f 0902 	mov.w	r9, #2
 801005c:	e754      	b.n	800ff08 <__kernel_rem_pio2+0x1a8>
 801005e:	bf00      	nop
	...
 801006c:	3ff00000 	.word	0x3ff00000
 8010070:	08012f20 	.word	0x08012f20
 8010074:	40200000 	.word	0x40200000
 8010078:	3ff00000 	.word	0x3ff00000
 801007c:	3e700000 	.word	0x3e700000
 8010080:	41700000 	.word	0x41700000
 8010084:	3fe00000 	.word	0x3fe00000
 8010088:	08012ee0 	.word	0x08012ee0
 801008c:	f854 3b04 	ldr.w	r3, [r4], #4
 8010090:	b945      	cbnz	r5, 80100a4 <__kernel_rem_pio2+0x344>
 8010092:	b123      	cbz	r3, 801009e <__kernel_rem_pio2+0x33e>
 8010094:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8010098:	f844 3c04 	str.w	r3, [r4, #-4]
 801009c:	2301      	movs	r3, #1
 801009e:	3201      	adds	r2, #1
 80100a0:	461d      	mov	r5, r3
 80100a2:	e738      	b.n	800ff16 <__kernel_rem_pio2+0x1b6>
 80100a4:	1acb      	subs	r3, r1, r3
 80100a6:	e7f7      	b.n	8010098 <__kernel_rem_pio2+0x338>
 80100a8:	f108 32ff 	add.w	r2, r8, #4294967295
 80100ac:	ab0c      	add	r3, sp, #48	@ 0x30
 80100ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100b2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80100b6:	a90c      	add	r1, sp, #48	@ 0x30
 80100b8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80100bc:	e739      	b.n	800ff32 <__kernel_rem_pio2+0x1d2>
 80100be:	f108 32ff 	add.w	r2, r8, #4294967295
 80100c2:	ab0c      	add	r3, sp, #48	@ 0x30
 80100c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100c8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80100cc:	e7f3      	b.n	80100b6 <__kernel_rem_pio2+0x356>
 80100ce:	a90c      	add	r1, sp, #48	@ 0x30
 80100d0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80100d4:	3b01      	subs	r3, #1
 80100d6:	430a      	orrs	r2, r1
 80100d8:	e787      	b.n	800ffea <__kernel_rem_pio2+0x28a>
 80100da:	3401      	adds	r4, #1
 80100dc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80100e0:	2a00      	cmp	r2, #0
 80100e2:	d0fa      	beq.n	80100da <__kernel_rem_pio2+0x37a>
 80100e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80100e6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80100ea:	eb0d 0503 	add.w	r5, sp, r3
 80100ee:	9b06      	ldr	r3, [sp, #24]
 80100f0:	aa20      	add	r2, sp, #128	@ 0x80
 80100f2:	4443      	add	r3, r8
 80100f4:	f108 0701 	add.w	r7, r8, #1
 80100f8:	3d98      	subs	r5, #152	@ 0x98
 80100fa:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80100fe:	4444      	add	r4, r8
 8010100:	42bc      	cmp	r4, r7
 8010102:	da04      	bge.n	801010e <__kernel_rem_pio2+0x3ae>
 8010104:	46a0      	mov	r8, r4
 8010106:	e6a2      	b.n	800fe4e <__kernel_rem_pio2+0xee>
 8010108:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801010a:	2401      	movs	r4, #1
 801010c:	e7e6      	b.n	80100dc <__kernel_rem_pio2+0x37c>
 801010e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010110:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8010114:	f7f0 fa06 	bl	8000524 <__aeabi_i2d>
 8010118:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80103e0 <__kernel_rem_pio2+0x680>
 801011c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010120:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010124:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010128:	46b2      	mov	sl, r6
 801012a:	f04f 0800 	mov.w	r8, #0
 801012e:	9b05      	ldr	r3, [sp, #20]
 8010130:	4598      	cmp	r8, r3
 8010132:	dd05      	ble.n	8010140 <__kernel_rem_pio2+0x3e0>
 8010134:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010138:	3701      	adds	r7, #1
 801013a:	eca5 7b02 	vstmia	r5!, {d7}
 801013e:	e7df      	b.n	8010100 <__kernel_rem_pio2+0x3a0>
 8010140:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8010144:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010148:	f7f0 fa56 	bl	80005f8 <__aeabi_dmul>
 801014c:	4602      	mov	r2, r0
 801014e:	460b      	mov	r3, r1
 8010150:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010154:	f7f0 f89a 	bl	800028c <__adddf3>
 8010158:	f108 0801 	add.w	r8, r8, #1
 801015c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010160:	e7e5      	b.n	801012e <__kernel_rem_pio2+0x3ce>
 8010162:	f1cb 0000 	rsb	r0, fp, #0
 8010166:	ec47 6b10 	vmov	d0, r6, r7
 801016a:	f7ff fd79 	bl	800fc60 <scalbn>
 801016e:	ec55 4b10 	vmov	r4, r5, d0
 8010172:	4b9d      	ldr	r3, [pc, #628]	@ (80103e8 <__kernel_rem_pio2+0x688>)
 8010174:	2200      	movs	r2, #0
 8010176:	4620      	mov	r0, r4
 8010178:	4629      	mov	r1, r5
 801017a:	f7f0 fcc3 	bl	8000b04 <__aeabi_dcmpge>
 801017e:	b300      	cbz	r0, 80101c2 <__kernel_rem_pio2+0x462>
 8010180:	4b9a      	ldr	r3, [pc, #616]	@ (80103ec <__kernel_rem_pio2+0x68c>)
 8010182:	2200      	movs	r2, #0
 8010184:	4620      	mov	r0, r4
 8010186:	4629      	mov	r1, r5
 8010188:	f7f0 fa36 	bl	80005f8 <__aeabi_dmul>
 801018c:	f7f0 fce4 	bl	8000b58 <__aeabi_d2iz>
 8010190:	4606      	mov	r6, r0
 8010192:	f7f0 f9c7 	bl	8000524 <__aeabi_i2d>
 8010196:	4b94      	ldr	r3, [pc, #592]	@ (80103e8 <__kernel_rem_pio2+0x688>)
 8010198:	2200      	movs	r2, #0
 801019a:	f7f0 fa2d 	bl	80005f8 <__aeabi_dmul>
 801019e:	460b      	mov	r3, r1
 80101a0:	4602      	mov	r2, r0
 80101a2:	4629      	mov	r1, r5
 80101a4:	4620      	mov	r0, r4
 80101a6:	f7f0 f86f 	bl	8000288 <__aeabi_dsub>
 80101aa:	f7f0 fcd5 	bl	8000b58 <__aeabi_d2iz>
 80101ae:	ab0c      	add	r3, sp, #48	@ 0x30
 80101b0:	f10b 0b18 	add.w	fp, fp, #24
 80101b4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80101b8:	f108 0801 	add.w	r8, r8, #1
 80101bc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80101c0:	e722      	b.n	8010008 <__kernel_rem_pio2+0x2a8>
 80101c2:	4620      	mov	r0, r4
 80101c4:	4629      	mov	r1, r5
 80101c6:	f7f0 fcc7 	bl	8000b58 <__aeabi_d2iz>
 80101ca:	ab0c      	add	r3, sp, #48	@ 0x30
 80101cc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80101d0:	e71a      	b.n	8010008 <__kernel_rem_pio2+0x2a8>
 80101d2:	ab0c      	add	r3, sp, #48	@ 0x30
 80101d4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80101d8:	f7f0 f9a4 	bl	8000524 <__aeabi_i2d>
 80101dc:	4622      	mov	r2, r4
 80101de:	462b      	mov	r3, r5
 80101e0:	f7f0 fa0a 	bl	80005f8 <__aeabi_dmul>
 80101e4:	4652      	mov	r2, sl
 80101e6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80101ea:	465b      	mov	r3, fp
 80101ec:	4620      	mov	r0, r4
 80101ee:	4629      	mov	r1, r5
 80101f0:	f7f0 fa02 	bl	80005f8 <__aeabi_dmul>
 80101f4:	3e01      	subs	r6, #1
 80101f6:	4604      	mov	r4, r0
 80101f8:	460d      	mov	r5, r1
 80101fa:	e718      	b.n	801002e <__kernel_rem_pio2+0x2ce>
 80101fc:	9906      	ldr	r1, [sp, #24]
 80101fe:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8010202:	9106      	str	r1, [sp, #24]
 8010204:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8010208:	f7f0 f9f6 	bl	80005f8 <__aeabi_dmul>
 801020c:	4602      	mov	r2, r0
 801020e:	460b      	mov	r3, r1
 8010210:	4650      	mov	r0, sl
 8010212:	4659      	mov	r1, fp
 8010214:	f7f0 f83a 	bl	800028c <__adddf3>
 8010218:	3601      	adds	r6, #1
 801021a:	4682      	mov	sl, r0
 801021c:	468b      	mov	fp, r1
 801021e:	9b00      	ldr	r3, [sp, #0]
 8010220:	429e      	cmp	r6, r3
 8010222:	dc01      	bgt.n	8010228 <__kernel_rem_pio2+0x4c8>
 8010224:	42b5      	cmp	r5, r6
 8010226:	dae9      	bge.n	80101fc <__kernel_rem_pio2+0x49c>
 8010228:	ab48      	add	r3, sp, #288	@ 0x120
 801022a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801022e:	e9c5 ab00 	strd	sl, fp, [r5]
 8010232:	3c01      	subs	r4, #1
 8010234:	e6ff      	b.n	8010036 <__kernel_rem_pio2+0x2d6>
 8010236:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8010238:	2b02      	cmp	r3, #2
 801023a:	dc0b      	bgt.n	8010254 <__kernel_rem_pio2+0x4f4>
 801023c:	2b00      	cmp	r3, #0
 801023e:	dc39      	bgt.n	80102b4 <__kernel_rem_pio2+0x554>
 8010240:	d05d      	beq.n	80102fe <__kernel_rem_pio2+0x59e>
 8010242:	9b02      	ldr	r3, [sp, #8]
 8010244:	f003 0007 	and.w	r0, r3, #7
 8010248:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801024c:	ecbd 8b02 	vpop	{d8}
 8010250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010254:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8010256:	2b03      	cmp	r3, #3
 8010258:	d1f3      	bne.n	8010242 <__kernel_rem_pio2+0x4e2>
 801025a:	9b05      	ldr	r3, [sp, #20]
 801025c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010260:	eb0d 0403 	add.w	r4, sp, r3
 8010264:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8010268:	4625      	mov	r5, r4
 801026a:	46c2      	mov	sl, r8
 801026c:	f1ba 0f00 	cmp.w	sl, #0
 8010270:	f1a5 0508 	sub.w	r5, r5, #8
 8010274:	dc6b      	bgt.n	801034e <__kernel_rem_pio2+0x5ee>
 8010276:	4645      	mov	r5, r8
 8010278:	2d01      	cmp	r5, #1
 801027a:	f1a4 0408 	sub.w	r4, r4, #8
 801027e:	f300 8087 	bgt.w	8010390 <__kernel_rem_pio2+0x630>
 8010282:	9c05      	ldr	r4, [sp, #20]
 8010284:	ab48      	add	r3, sp, #288	@ 0x120
 8010286:	441c      	add	r4, r3
 8010288:	2000      	movs	r0, #0
 801028a:	2100      	movs	r1, #0
 801028c:	f1b8 0f01 	cmp.w	r8, #1
 8010290:	f300 809c 	bgt.w	80103cc <__kernel_rem_pio2+0x66c>
 8010294:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8010298:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801029c:	f1b9 0f00 	cmp.w	r9, #0
 80102a0:	f040 80a6 	bne.w	80103f0 <__kernel_rem_pio2+0x690>
 80102a4:	9b04      	ldr	r3, [sp, #16]
 80102a6:	e9c3 7800 	strd	r7, r8, [r3]
 80102aa:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80102ae:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80102b2:	e7c6      	b.n	8010242 <__kernel_rem_pio2+0x4e2>
 80102b4:	9d05      	ldr	r5, [sp, #20]
 80102b6:	ab48      	add	r3, sp, #288	@ 0x120
 80102b8:	441d      	add	r5, r3
 80102ba:	4644      	mov	r4, r8
 80102bc:	2000      	movs	r0, #0
 80102be:	2100      	movs	r1, #0
 80102c0:	2c00      	cmp	r4, #0
 80102c2:	da35      	bge.n	8010330 <__kernel_rem_pio2+0x5d0>
 80102c4:	f1b9 0f00 	cmp.w	r9, #0
 80102c8:	d038      	beq.n	801033c <__kernel_rem_pio2+0x5dc>
 80102ca:	4602      	mov	r2, r0
 80102cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80102d0:	9c04      	ldr	r4, [sp, #16]
 80102d2:	e9c4 2300 	strd	r2, r3, [r4]
 80102d6:	4602      	mov	r2, r0
 80102d8:	460b      	mov	r3, r1
 80102da:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80102de:	f7ef ffd3 	bl	8000288 <__aeabi_dsub>
 80102e2:	ad4a      	add	r5, sp, #296	@ 0x128
 80102e4:	2401      	movs	r4, #1
 80102e6:	45a0      	cmp	r8, r4
 80102e8:	da2b      	bge.n	8010342 <__kernel_rem_pio2+0x5e2>
 80102ea:	f1b9 0f00 	cmp.w	r9, #0
 80102ee:	d002      	beq.n	80102f6 <__kernel_rem_pio2+0x596>
 80102f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80102f4:	4619      	mov	r1, r3
 80102f6:	9b04      	ldr	r3, [sp, #16]
 80102f8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80102fc:	e7a1      	b.n	8010242 <__kernel_rem_pio2+0x4e2>
 80102fe:	9c05      	ldr	r4, [sp, #20]
 8010300:	ab48      	add	r3, sp, #288	@ 0x120
 8010302:	441c      	add	r4, r3
 8010304:	2000      	movs	r0, #0
 8010306:	2100      	movs	r1, #0
 8010308:	f1b8 0f00 	cmp.w	r8, #0
 801030c:	da09      	bge.n	8010322 <__kernel_rem_pio2+0x5c2>
 801030e:	f1b9 0f00 	cmp.w	r9, #0
 8010312:	d002      	beq.n	801031a <__kernel_rem_pio2+0x5ba>
 8010314:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010318:	4619      	mov	r1, r3
 801031a:	9b04      	ldr	r3, [sp, #16]
 801031c:	e9c3 0100 	strd	r0, r1, [r3]
 8010320:	e78f      	b.n	8010242 <__kernel_rem_pio2+0x4e2>
 8010322:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010326:	f7ef ffb1 	bl	800028c <__adddf3>
 801032a:	f108 38ff 	add.w	r8, r8, #4294967295
 801032e:	e7eb      	b.n	8010308 <__kernel_rem_pio2+0x5a8>
 8010330:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8010334:	f7ef ffaa 	bl	800028c <__adddf3>
 8010338:	3c01      	subs	r4, #1
 801033a:	e7c1      	b.n	80102c0 <__kernel_rem_pio2+0x560>
 801033c:	4602      	mov	r2, r0
 801033e:	460b      	mov	r3, r1
 8010340:	e7c6      	b.n	80102d0 <__kernel_rem_pio2+0x570>
 8010342:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8010346:	f7ef ffa1 	bl	800028c <__adddf3>
 801034a:	3401      	adds	r4, #1
 801034c:	e7cb      	b.n	80102e6 <__kernel_rem_pio2+0x586>
 801034e:	ed95 7b00 	vldr	d7, [r5]
 8010352:	ed8d 7b00 	vstr	d7, [sp]
 8010356:	ed95 7b02 	vldr	d7, [r5, #8]
 801035a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801035e:	ec53 2b17 	vmov	r2, r3, d7
 8010362:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010366:	f7ef ff91 	bl	800028c <__adddf3>
 801036a:	4602      	mov	r2, r0
 801036c:	460b      	mov	r3, r1
 801036e:	4606      	mov	r6, r0
 8010370:	460f      	mov	r7, r1
 8010372:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010376:	f7ef ff87 	bl	8000288 <__aeabi_dsub>
 801037a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801037e:	f7ef ff85 	bl	800028c <__adddf3>
 8010382:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010386:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801038a:	e9c5 6700 	strd	r6, r7, [r5]
 801038e:	e76d      	b.n	801026c <__kernel_rem_pio2+0x50c>
 8010390:	ed94 7b00 	vldr	d7, [r4]
 8010394:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8010398:	ec51 0b17 	vmov	r0, r1, d7
 801039c:	4652      	mov	r2, sl
 801039e:	465b      	mov	r3, fp
 80103a0:	ed8d 7b00 	vstr	d7, [sp]
 80103a4:	f7ef ff72 	bl	800028c <__adddf3>
 80103a8:	4602      	mov	r2, r0
 80103aa:	460b      	mov	r3, r1
 80103ac:	4606      	mov	r6, r0
 80103ae:	460f      	mov	r7, r1
 80103b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80103b4:	f7ef ff68 	bl	8000288 <__aeabi_dsub>
 80103b8:	4652      	mov	r2, sl
 80103ba:	465b      	mov	r3, fp
 80103bc:	f7ef ff66 	bl	800028c <__adddf3>
 80103c0:	3d01      	subs	r5, #1
 80103c2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80103c6:	e9c4 6700 	strd	r6, r7, [r4]
 80103ca:	e755      	b.n	8010278 <__kernel_rem_pio2+0x518>
 80103cc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80103d0:	f7ef ff5c 	bl	800028c <__adddf3>
 80103d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80103d8:	e758      	b.n	801028c <__kernel_rem_pio2+0x52c>
 80103da:	bf00      	nop
 80103dc:	f3af 8000 	nop.w
	...
 80103e8:	41700000 	.word	0x41700000
 80103ec:	3e700000 	.word	0x3e700000
 80103f0:	9b04      	ldr	r3, [sp, #16]
 80103f2:	9a04      	ldr	r2, [sp, #16]
 80103f4:	601f      	str	r7, [r3, #0]
 80103f6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80103fa:	605c      	str	r4, [r3, #4]
 80103fc:	609d      	str	r5, [r3, #8]
 80103fe:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010402:	60d3      	str	r3, [r2, #12]
 8010404:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010408:	6110      	str	r0, [r2, #16]
 801040a:	6153      	str	r3, [r2, #20]
 801040c:	e719      	b.n	8010242 <__kernel_rem_pio2+0x4e2>
 801040e:	bf00      	nop

08010410 <floor>:
 8010410:	ec51 0b10 	vmov	r0, r1, d0
 8010414:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801041c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8010420:	2e13      	cmp	r6, #19
 8010422:	460c      	mov	r4, r1
 8010424:	4605      	mov	r5, r0
 8010426:	4680      	mov	r8, r0
 8010428:	dc34      	bgt.n	8010494 <floor+0x84>
 801042a:	2e00      	cmp	r6, #0
 801042c:	da17      	bge.n	801045e <floor+0x4e>
 801042e:	a332      	add	r3, pc, #200	@ (adr r3, 80104f8 <floor+0xe8>)
 8010430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010434:	f7ef ff2a 	bl	800028c <__adddf3>
 8010438:	2200      	movs	r2, #0
 801043a:	2300      	movs	r3, #0
 801043c:	f7f0 fb6c 	bl	8000b18 <__aeabi_dcmpgt>
 8010440:	b150      	cbz	r0, 8010458 <floor+0x48>
 8010442:	2c00      	cmp	r4, #0
 8010444:	da55      	bge.n	80104f2 <floor+0xe2>
 8010446:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801044a:	432c      	orrs	r4, r5
 801044c:	2500      	movs	r5, #0
 801044e:	42ac      	cmp	r4, r5
 8010450:	4c2b      	ldr	r4, [pc, #172]	@ (8010500 <floor+0xf0>)
 8010452:	bf08      	it	eq
 8010454:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8010458:	4621      	mov	r1, r4
 801045a:	4628      	mov	r0, r5
 801045c:	e023      	b.n	80104a6 <floor+0x96>
 801045e:	4f29      	ldr	r7, [pc, #164]	@ (8010504 <floor+0xf4>)
 8010460:	4137      	asrs	r7, r6
 8010462:	ea01 0307 	and.w	r3, r1, r7
 8010466:	4303      	orrs	r3, r0
 8010468:	d01d      	beq.n	80104a6 <floor+0x96>
 801046a:	a323      	add	r3, pc, #140	@ (adr r3, 80104f8 <floor+0xe8>)
 801046c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010470:	f7ef ff0c 	bl	800028c <__adddf3>
 8010474:	2200      	movs	r2, #0
 8010476:	2300      	movs	r3, #0
 8010478:	f7f0 fb4e 	bl	8000b18 <__aeabi_dcmpgt>
 801047c:	2800      	cmp	r0, #0
 801047e:	d0eb      	beq.n	8010458 <floor+0x48>
 8010480:	2c00      	cmp	r4, #0
 8010482:	bfbe      	ittt	lt
 8010484:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8010488:	4133      	asrlt	r3, r6
 801048a:	18e4      	addlt	r4, r4, r3
 801048c:	ea24 0407 	bic.w	r4, r4, r7
 8010490:	2500      	movs	r5, #0
 8010492:	e7e1      	b.n	8010458 <floor+0x48>
 8010494:	2e33      	cmp	r6, #51	@ 0x33
 8010496:	dd0a      	ble.n	80104ae <floor+0x9e>
 8010498:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801049c:	d103      	bne.n	80104a6 <floor+0x96>
 801049e:	4602      	mov	r2, r0
 80104a0:	460b      	mov	r3, r1
 80104a2:	f7ef fef3 	bl	800028c <__adddf3>
 80104a6:	ec41 0b10 	vmov	d0, r0, r1
 80104aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104ae:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80104b2:	f04f 37ff 	mov.w	r7, #4294967295
 80104b6:	40df      	lsrs	r7, r3
 80104b8:	4207      	tst	r7, r0
 80104ba:	d0f4      	beq.n	80104a6 <floor+0x96>
 80104bc:	a30e      	add	r3, pc, #56	@ (adr r3, 80104f8 <floor+0xe8>)
 80104be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104c2:	f7ef fee3 	bl	800028c <__adddf3>
 80104c6:	2200      	movs	r2, #0
 80104c8:	2300      	movs	r3, #0
 80104ca:	f7f0 fb25 	bl	8000b18 <__aeabi_dcmpgt>
 80104ce:	2800      	cmp	r0, #0
 80104d0:	d0c2      	beq.n	8010458 <floor+0x48>
 80104d2:	2c00      	cmp	r4, #0
 80104d4:	da0a      	bge.n	80104ec <floor+0xdc>
 80104d6:	2e14      	cmp	r6, #20
 80104d8:	d101      	bne.n	80104de <floor+0xce>
 80104da:	3401      	adds	r4, #1
 80104dc:	e006      	b.n	80104ec <floor+0xdc>
 80104de:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80104e2:	2301      	movs	r3, #1
 80104e4:	40b3      	lsls	r3, r6
 80104e6:	441d      	add	r5, r3
 80104e8:	4545      	cmp	r5, r8
 80104ea:	d3f6      	bcc.n	80104da <floor+0xca>
 80104ec:	ea25 0507 	bic.w	r5, r5, r7
 80104f0:	e7b2      	b.n	8010458 <floor+0x48>
 80104f2:	2500      	movs	r5, #0
 80104f4:	462c      	mov	r4, r5
 80104f6:	e7af      	b.n	8010458 <floor+0x48>
 80104f8:	8800759c 	.word	0x8800759c
 80104fc:	7e37e43c 	.word	0x7e37e43c
 8010500:	bff00000 	.word	0xbff00000
 8010504:	000fffff 	.word	0x000fffff

08010508 <_kill>:
 8010508:	4b02      	ldr	r3, [pc, #8]	@ (8010514 <_kill+0xc>)
 801050a:	2258      	movs	r2, #88	@ 0x58
 801050c:	601a      	str	r2, [r3, #0]
 801050e:	f04f 30ff 	mov.w	r0, #4294967295
 8010512:	4770      	bx	lr
 8010514:	20001434 	.word	0x20001434

08010518 <_exit>:
 8010518:	e7fe      	b.n	8010518 <_exit>
	...

0801051c <_init>:
 801051c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801051e:	bf00      	nop
 8010520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010522:	bc08      	pop	{r3}
 8010524:	469e      	mov	lr, r3
 8010526:	4770      	bx	lr

08010528 <_fini>:
 8010528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801052a:	bf00      	nop
 801052c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801052e:	bc08      	pop	{r3}
 8010530:	469e      	mov	lr, r3
 8010532:	4770      	bx	lr
